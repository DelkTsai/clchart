{"version":3,"sources":["webpack://ClChart/webpack/universalModuleDefinition","webpack://ClChart/webpack/bootstrap","webpack://ClChart/./src/util/cl.tool.js","webpack://ClChart/./src/data/cl.data.tools.js","webpack://ClChart/./src/cl.data.def.js","webpack://ClChart/./src/formula/cl.formula.js","webpack://ClChart/./src/util/cl.draw.js","webpack://ClChart/./src/chart/cl.chart.init.js","webpack://ClChart/./src/chart/cl.chart.tools.js","webpack://ClChart/./src/chart/cl.draw.line.js","webpack://ClChart/./src/chart/cl.draw.vline.js","webpack://ClChart/./src/cl.chart.def.js","webpack://ClChart/./src/chart/cl.draw.kbar.js","webpack://ClChart/./src/chart/cl.draw.right.js","webpack://ClChart/./src/chart/cl.draw.vbar.js","webpack://ClChart/./src/chart/cl.chart.button.js","webpack://ClChart/./src/chart/cl.draw.axisY.js","webpack://ClChart/./src/chart/cl.chart.line.js","webpack://ClChart/./src/chart/cl.draw.cursor.js","webpack://ClChart/./src/chart/cl.draw.info.js","webpack://ClChart/./src/chart/cl.draw.axisX.js","webpack://ClChart/./src/chart/cl.draw.grid.js","webpack://ClChart/./src/chart/cl.chart.scroll.js","webpack://ClChart/./src/chart/cl.chart.js","webpack://ClChart/./src/chart/cl.chart.order.js","webpack://ClChart/./src/event/cl.event.web.js","webpack://ClChart/./src/event/cl.event.js","webpack://ClChart/./src/data/cl.data.js","webpack://ClChart/./src/cl.api.js"],"names":["root","factory","exports","module","define","amd","ClChart","window","t","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","e","addPreZero","v","slice","getMTime","ttime","mtime","seconds","Date","parseInt","isNaN","getDate","getFullYear","getMonth","getMinute","getHours","getMinutes","getDayWeek","day","Math","floor","getDay","getDayMon","_dayToTTime","getDayGap","beginDay","endDay","fromTTimeToStr","format","ttimePre","getSeconds","getMinuteGap","beginMin","endMin","getMinuteOffset","minute","offset","mincount","copyArrayOfDeep","obj","out","Array","isArray","len","length","copyJsonOfDeep","key","updateJsonOfDeep","source","isEmptyArray","offsetRect","rect","left","top","width","height","right","bottom","inRect","point","x","y","inRangeX","xx","inRangeY","yy","inArray","arr","indexOf","formatVolume","unit","parseFloat","result","toFixed","String","formatPrice","decimal","limit","isopen","substr","formatShowTime","toString","formatInfo","middle","zero","abs","getValue","fields","coinunit","label","index","val","idx","pow","vol","money","error","_getExrightPrice","price","rightpara","mode","pg","px","gs","_transExright","days","rightdata","start","end","exrightGs","exrightPg","exrightPx","_cl_data_def__WEBPACK_IMPORTED_MODULE_0__","FIELD_RIGHT","accrual","sendstock","allotstock","allotprice","_getExrightPara","FIELD_DAY","open","high","low","close","_isRight","dateBegin","dateEnd","rightdate","transExrightDay","rights","j","time","transExrightMin","_util_cl_tool__WEBPACK_IMPORTED_MODULE_1__","h","findIndexInMin","status","lastIndex","findDateInDay","today","finded","getSize","checkZero","checkDayZero","push","checkDay5","tradeDate","tradetime","maxDays","FIELD_DAY5","count","curDate","splice","daymins","getMinuteCount","fromTradeTimeToIndex","allvol","allmoney","updateStatic","stktype","volunit","before","stophigh","stoplow","matchDayToWeek","daydata","zipday","field","isBegin","k","week","console","log","a","matchDayToMon","month","begin","nowmin","fromIndexToTradeTime","tindex","f","u","g","b","I","M","STOCK_TYPE_INDEX","STOCK_TYPE_A","STOCK_TYPE_B","STOCK_TYPE_OTHER","STOCK_TRADETIME","FIELD_MIN","FIELD_TICK","FIELD_LINE","FIELD_ILINE","FIELD_NOW","buy1","buyvol1","sell1","sellvol1","buy2","buyvol2","sell2","sellvol2","buy3","buyvol3","sell3","sellvol3","buy4","buyvol4","sell4","sellvol4","buy5","buyvol5","sell5","sellvol5","FIELD_ENOW","FIELD_NOW_IDX","ups","upvol","downs","downvol","mids","midvol","FIELD_CODE","code","spell","type","FIELD_INFO","FIELD_FINANCE","flow","total","earnings","FIELD_SEER","period","buy","target","stoploss","stopdate","surplus","uid","focused","FIELD_TRADE","info","__webpack_exports__","ClFormula","_data_cl_data_tools__WEBPACK_IMPORTED_MODULE_0__","this","data","minIndex","maxIndex","nowIndex","offIndex","runSingleStock","formula","singleValue","command","eval","MA","off","AVGPRC","N","R","H","S","z","K","W","G","B","V","_setLineWidth","context","lineWidth","_drawVline","yy1","yy2","moveTo","lineTo","_drawHline","xx1","xx2","_drawmoveTo","_drawlineTo","_drawRect","ww","hh","strokeRect","_fillRect","fillclr","fillStyle","fillRect","_drawBegin","clr","beginPath","strokeStyle","_drawEnd","stroke","_setFontSize","font","pixel","_drawTxt","txt","pos","textBaseline","textAlign","fillText","_getTxtWidth","measureText","_drawTxtRect","config","spaceX","spaceY","tr","__getTxtRect","xxx","yyy","bakclr","_drawCircle","arc","PI","_drawCircleAndFilled","fill","_drawLineAlone","oldclr","_drawKBar","item","unitX","xxm","yyh","round","maxmin","max","unitY","yyl","min","filled","_drawVBar","_systemInfo","runPlatform","axisPlatform","eventPlatform","scale","standard","sysColor","COLOR_WHITE","sys","line","back","baktxt","axis","grid","red","green","white","button","colume","box","COLOR_BLACK","setColor","syscolor","color","cl_tool","initSystem","cfg","canvas","clientWidth","clientHeight","initCommonInfo","chart","father","checkLayout","layout","margin","title","axisX","scroll","size","digit","symbol","changeCursorStyle","style","cursor","findNearTimeToIndex","findvalue","direction","cl_data_tools","setFixedLineFlags","showMode","fixed","maxCount","ClDrawLine","rectMain","linkInfo","onPaint","getData","labelX","labelY","showSort","skips","ClDrawVLine","CHART_LAYOUT","CHART_BUTTONS","CHART_ORDER","display","CHART_KBAR","zoomInfo","list","lines","axisY","className","codeInfo","extremum","method","maxvalue","minvalue","rightData","rightMode","CHART_VBAR","CHART_NOW","CHART_NOWVOL","CHART_DAY5","CHART_DAY5VOL","CHART_NORMAL","ClChartButton","DEFAULT_BUTTON","shape","maxR","hotIdx","visible","init","callback","map","checkConfig","setStatus","onClick","event","self","break","center","Arc1","Arc2","Arc3","_drawSignCircle","ClDrawAxisY","align","static","text","hideInfo","posX","offX","offy","ClChartLine","dataLayer","buttons","childCharts","setPublicRect","childDraws","setChildDraw","childLines","setChildLines","setButtons","setScroll","rectChart","axisInfo","rectTitle","rectMess","rectGridLine","rectAxisYLeft","rectAxisYRight","rectAxisX","rectScroll","getLineDataKey","hotKey","ClassName","tradeTime","draw","axisXInfo","axisYInfo","mousePos","valueX","valueY","q","th","CURSOR","titleInfo","message","TITLE","AXISY_LEFT","AXISY_RIGHT","AXISX","offx","GRID","DEFAULT_SCROLL","direct","range","select","stop","rectMin","rectMax","rectMid","drawClear","drawGridline","drawButton","onChange","iscall","findMouseIndex","xpos","checkMin","onInit","who","onMouseOut","onMouseDown","onMouseUp","onMouseMove","curIndex","head","tail","createButton","hasButton","setZoomInfo","fastDrawEnd","getDecimal","addLine","removeLine","zoomin","zoomout","setHotButton","drawChildCharts","drawChildLines","getMoveData","drawTitleInfo","drawChildDraw","moveIndex","locationData","readyData","readyDraw","img","getImageData","getMiddle","calcMaxMin","mm","maxrate","minrate","cl_data_def","readyScroll","HSCROLL","getDataRange","newdata","showCursorLine","eventLayer","boardEvent","reDraw","onLongPress","onMouseWheel","step","deltaY","mid","moveDate","onKeyDown","keyCode","putImageData","mouseIndex","getMouseMoveData","cl_chart","DEFAULT_LINKINFO","locked","set","hotIndex","initChart","setDataLayer","setEventLayer","clear","fastDraw","clearData","getChart","getEventLayer","layer","bindChart","getDataLayer","bindData","initData","setData","JSON","parse","fastBuffer","makeLineData","createChart","usercfg","txtLen","timeLen","volLen","closeLen","isIndex","orderData","tickData","drawReady","drawIndex","drawOrder","drawTick","rectOrder","rectTick","getColor","inow","ticklen","drawGridLine","mmpCount","maxlines","recs","beginIndex","str","strint","fastDrawBegin","setHideInfo","isHideInfo","_getTime","getTime","_getDistance","xLen","yLen","sqrt","_getTouchInfo","element","mouseInfo","srcRect","getBoundingClientRect","offsetX","pageX","offsetY","pageY","ClEvent","syscfg","eventCanvas","eventSource","bindEvent","addHandler","mousemove","bind","mouseout","mousewheel","mouseup","mousedown","keyup","keydown","touchstart","touchend","touchmove","click","clearEvent","clearHandler","eventName","handler","addEventListener","attachEvent","removeEventListener","deattachEvent","getEventInfo","emitEvent","mousein","__timestamp","touches","startX","startY","clearTimeout","longTapTimeout","point2","touchDistance","touchVector","startTime","setTimeout","srcElement","previousTouchPoint","previousTouchTime","changedTouches","timestamp","moveX","moveY","previousPinchScale","pinchScale","mouseinfo","vector","angle","vector1","vector2","mr","acos","_emitEvent","deltaX","preventDefault","firstChart","HotWin","getMousePos","chartPath","findEventPath","ignore","path","ClData","cl_formula","InData","OutData","flushNowData","flushTick","nowdata","TICK","flushMin","MIN","checked","DAY","mergeDay","NOW","WEEK","mergeWeek","MON","mergeMon","DAY5","mergeDay5","makeMinute","updateMinute","now","RIGHT","rightmode","outkey","mergeNowMinToMin","curMin","sumVol","sumMoney","hasData","stopIdx","DEF_CHART","cl_chart_def_namespaceObject","DEF_DATA","createSingleChart","createMulChart","chartList","charts"],"mappings":"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","file":"clchart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ClChart\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ClChart\"] = factory();\n\telse\n\t\troot[\"ClChart\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","'use strict'\n\n// /////////////////////////////////////////\n//   时间处理函数\n// ////////////////////////////////////////\n\nexport function addPreZero (v, n) { // n表示总共几位  (9,2) ---09\n  n = n > 9 ? 9 : n\n  const s = '000000000' + v\n  return s.slice(-1 * n)\n}\n\nexport function getMTime (ttime) { // 得到1970-1-1开始的毫秒数\n  let mtime, seconds\n  if (ttime === undefined) {\n    mtime = new Date()\n  } else {\n    if (typeof ttime === 'string') {\n      seconds = parseInt(ttime)\n    } else {\n      seconds = ttime\n    }\n    if (!isNaN(seconds)) {\n      mtime = new Date(seconds * 1000)\n    } else {\n      mtime = new Date()\n    }\n  }\n  return mtime\n}\n\n// time_t转换成20180101格式\nexport function getDate (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate()\n}\n// time_t提取其中的分钟 1030\nexport function getMinute (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getHours() * 100 + mtime.getMinutes()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayWeek (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getDay()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayMon (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getMonth() + 1\n}\n// 日期转换成time_t\nfunction _dayToTTime (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime / 1000\n}\n// 得到两个日期间隔的天数\nexport function getDayGap (beginDay, endDay) {\n  return Math.floor((_dayToTTime(endDay) - _dayToTTime(beginDay)) / (24 * 3600))\n}\n// 格式化time_t为指定字符串\nexport function fromTTimeToStr (ttime, format, ttimePre) {\n  const mtime = getMTime(ttime)\n  switch (format) {\n    case 'minute':\n      if (ttimePre === undefined) {\n        return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n      } else {\n        if (getMinute(ttime) === getMinute(ttimePre)) {\n          return ':' + addPreZero(mtime.getSeconds(), 2)\n        } else {\n          return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n        }\n      }\n    case 'datetime':\n      return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate() +\n      '-' + mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n    default:\n      return ''\n  }\n}\n// 分钟转字符串 1500 -- 15:00\nexport function fromMinuteToStr (minute) {\n  return addPreZero(Math.floor(minute / 100), 2).toString() + ':' + addPreZero(minute % 100, 2).toString()\n}\n// 得到间隔分钟数\nexport function getMinuteGap (beginMin, endMin) {\n  return (Math.floor(endMin / 100) - Math.floor(beginMin / 100)) * 60 + endMin % 100 - beginMin % 100\n}\n\n// 偏移分钟数，offset 为分钟数\nexport function getMinuteOffset (minute, offset) {\n  const mincount = Math.floor(minute / 100) * 60 + minute % 100 + offset\n  return Math.floor(mincount / 60) * 100 + mincount % 60\n}\n\n// /////////////////////////////////////////\n// 公用无关性的函数集合\n// /////////////////////////////////////////\n\nexport function copyArrayOfDeep (obj) {\n  let out\n  if (Array.isArray(obj)) {\n    out = []\n    const len = obj.length\n    for (let i = 0; i < len; i++) {\n      out[i] = copyArrayOfDeep(obj[i])\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\nexport function copyJsonOfDeep (obj) {\n  let out\n  if (obj instanceof Object) { // 数组和文档都为真\n    if (Array.isArray(obj)) { // 只有数组为真\n      out = copyArrayOfDeep(obj)\n    } else {\n      out = {}\n      for (const key in obj) {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\n// obj为子集，生成新的对象，仅仅替换source中存在的对应元素\n// 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// out = {a:[111,2,3]}\nexport function updateJsonOfDeep (obj, source) {\n  let out\n  if (source instanceof Object) {\n    if (Array.isArray(source)) {\n      out = []\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyArrayOfDeep(source[key])\n      }\n    } else {\n      out = {}\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyJsonOfDeep(source[key])\n      }\n    }\n  } else {\n    out = obj || source\n  }\n  return out\n}\n// // obj为原始集，不生成新的对象，用source中存在的对应元素替换obj的数据\n// // 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// // out = {a:[111,2,3],b:2}\nexport function mergeJsonOfDeep (obj, source) {\n  const out = updateJsonOfDeep(obj, source)\n\n  for (const key in obj) {\n    if (out[key] !== undefined) continue\n    if (obj[key] instanceof Object) {\n      if (Array.isArray(obj[key])) {\n        out[key] = copyArrayOfDeep(obj[key])\n      } else {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    } else {\n      out[key] = obj[key]\n    }\n  }\n  return out\n}\n// 数组是否为空\nexport function isEmptyArray (obj) {\n  if (obj !== undefined && Array.isArray(obj)) {\n    if (obj.length > 0) return false\n  }\n  return true\n}\n// 根据offset返回一个新的矩形\n// rect:{left,top,width,height}\n// offset:{left,top,right,bottom}\nexport function offsetRect (rect, offset) {\n  if (rect === undefined) return { left: 0, top: 0, width: 0, height: 0 }\n  if (offset === undefined) return rect\n  return {\n    left: rect.left + offset.left,\n    top: rect.top + offset.top,\n    width: rect.width - (offset.left + offset.right),\n    height: rect.height - (offset.top + offset.bottom)\n  }\n}\n// 判断点是否在矩形内\nexport function inRect (rect, point) {\n  if (rect === undefined || point === undefined) return false\n  if (point.x >= rect.left && point.y >= rect.top &&\n    point.x < (rect.left + rect.width) &&\n    point.y < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断X是否在矩形宽度范围内\nexport function inRangeX (rect, xx) {\n  if (rect === undefined || xx === undefined) return false\n  if (xx >= rect.left &&\n    xx < (rect.left + rect.width)) {\n    return true\n  }\n  return false\n}\n// 判断Y是否在矩形高度范围内\nexport function inRangeY (rect, yy) {\n  if (rect === undefined || yy === undefined) return false\n  if (yy >= rect.top &&\n    yy < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断 v 是否在数组arr中, 比in准确\nexport function inArray (v, arr) {\n  if (arr.indexOf(v) < 0) return false\n  return true\n}\n// 求数组a和b的交集\nexport function intersectArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    for (let bi = 0; bi < b.length; bi++) {\n      if (a[ai] === b[bi]) {\n        result.push(a[ai])\n        break\n      }\n    }\n  }\n  return result\n}\n// 求数组a和b的并集,去掉重复的元素\nexport function mergeArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    result.push(a[ai])\n  }\n  for (let bi = 0; bi < b.length; bi++) {\n    if (!inArray(b[bi], result)) {\n      result.push(b[bi])\n    }\n  }\n  return result\n}\n// 格式化百分比\nexport function formatRate (value, zero) {\n  if (value === undefined || isNaN(value) || zero === undefined) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  let result = Math.abs((value - zero) / zero * 100)\n  result = result.toFixed(2) + '%'\n  return result // 10.20%\n}\n// 格式化成交量\nexport function formatVolume (value, unit) {\n  if (value === undefined || isNaN(value)) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  if (unit === undefined) unit = 1\n  let result = value / unit\n\n  if (value > 100000000000) result = (value / 100000000).toFixed(0) + '亿'\n  else if (value > 10000000000) result = (value / 100000000).toFixed(1) + '亿'\n  else if (value > 1000000000) result = (value / 100000000).toFixed(2) + '亿'\n  else if (value > 100000000) result = (value / 100000000).toFixed(3) + '亿'\n  else if (value > 10000000) result = (value / 10000).toFixed(0) + '万'\n  else if (value > 1000000) result = (value / 10000).toFixed(1) + '万'\n  else if (value > -0.000000001 && value < 0.000000001) result = '--'\n  else result = value.toFixed(0)\n  return String(result)\n}\n// 格式化价格 decimal为小数点，limit为最大长度[4,10]，\nexport function formatPrice (value, decimal, limit, isopen) {\n  if (value === undefined || isNaN(value)) return '--'\n  // if (typeof value === 'string') value = parseFloat(value);\n\n  let result = value\n  if (decimal === undefined || decimal < 0 || decimal > 10) decimal = 0\n\n  if (value > -0.000000001 && value < 0.000000001 && !isopen) {\n    return '--'\n  }\n  result = result.toFixed(decimal)\n\n  if (limit === undefined || limit < 4) return result\n  return result.substr(0, limit)\n}\n// 格式化时间\nexport function formatShowTime (key, value, minute) {\n  let out = value\n  switch (key) {\n    case 'M5':\n    case 'M15':\n    case 'M30':\n    case 'M60':\n      out = fromTTimeToStr(value, 'datetime')\n      break\n    case 'MIN':\n      if (minute === undefined) {\n        out = fromTTimeToStr(value, 'minute')\n      } else {\n        out = fromMinuteToStr(minute)\n      }\n      break\n    case 'DAY5':\n      out = fromTTimeToStr(value, 'minute')\n      break\n  }\n  return out\n}\n\nexport function formatInfo (value, format, decimal, middle) {\n  let out\n  if (format === 'rate') {\n    out = formatRate(value, middle)\n  } else {\n    if (format === 'price') {\n      if (decimal === undefined) decimal = 2\n      out = formatPrice(value, decimal, 7)\n    } else {\n      out = formatVolume(value, 100)\n    }\n  }\n  return out\n}\n// /////////////////////////////////////////\n// 数据转换函数集合\n// /////////////////////////////////////////\n","'use strict'\n\nimport {\n  FIELD_DAY,\n  FIELD_TICK,\n  FIELD_RIGHT,\n  FIELD_DAY5\n} from '../cl.data.def'\n\nimport {\n  copyArrayOfDeep,\n  isEmptyArray,\n  getDate,\n  getDayWeek,\n  getDayGap,\n  getDayMon,\n  getMinuteGap,\n  getMinute,\n  getMinuteOffset\n} from '../util/cl.tool'\n\n// 按fields定义从数组value中获取，第index条标记为label的数据\nexport default function getValue ({\n  fields,\n  value,\n  coinunit\n}, label, index = 0) {\n  let val = 0\n  try {\n    // 支持二维数组和一维数组，判断如果是二维数组就取对应的值\n    let source = value\n    if (Array.isArray(value[0])) {\n      source = value[index]\n    }\n    switch (label) {\n      case 'idx':\n        // 序列，now 0-239，day5 0-5*239\n        // 非常重要，利用这里可以统一MIN和D5的画图\n        if (fields.idx === undefined) val = index\n        else val = source[fields.idx]\n        break\n      case 'coinunit':\n        val = Math.pow(10, getValue({\n          fields,\n          value\n        }, 'decimal', 0))\n        break\n      case 'before':\n      case 'open':\n      case 'high':\n      case 'low':\n      case 'close':\n      case 'stophigh':\n      case 'stoplow':\n      case 'buy1':\n      case 'buy2':\n      case 'buy3':\n      case 'buy4':\n      case 'buy5':\n      case 'sell1':\n      case 'sell2':\n      case 'sell3':\n      case 'sell4':\n      case 'sell5':\n        if (coinunit === undefined) coinunit = 100\n        val = source[fields[label]] / coinunit\n        break\n      case 'flow':\n      case 'total':\n        val = source[fields[label]] * 100\n        break\n      case 'decvol':\n        if (index === 0) {\n          val = source[fields.vol]\n        } else {\n          val = source[fields.vol] - getValue({\n            fields,\n            value\n          }, 'vol', index - 1)\n        }\n        break\n      case 'decmoney':\n        if (index === 0) {\n          val = source[fields.money]\n        } else {\n          val = source[fields.money] - getValue({\n            fields,\n            value\n          }, 'money', index - 1)\n        }\n        break\n      default:\n        if (source[fields[label]]) {\n          val = source[fields[label]]\n        }\n    }\n  } catch (error) {\n    val = 0\n  }\n  return val\n}\n\n// export function getTimeIndex(data, label, value) {\n//   let idx = -1;\n//   for (let i = data.value.length - 1; i >= 0; i--) {\n//     // console.log('object', getValue(data, label, i), value);\n//     if (getValue(data, label, i) > value) continue;\n//     idx = i;\n//     break;\n//   }\n//   return idx;\n// }\n\nexport function getValueMax (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v > out) out = v\n  }\n  return out\n}\nexport function getValueMin (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v < out) out = v\n  }\n  return out\n}\n\n// /////////////////////////////////////////\n// 日线除权的函数集合\n// /////////////////////////////////////////\n\nfunction _getExrightPara (rightdata) {\n  let exrightGs = 1000 // 送股数\n  let exrightPg = 0 // 配股数\n  let exrightPx = 0 // 利息\n  if (rightdata[FIELD_RIGHT.accrual]) exrightPx = rightdata[FIELD_RIGHT.accrual] / 10\n  if (rightdata[FIELD_RIGHT.sendstock] > 0 || rightdata[FIELD_RIGHT.allotstock] > 0) {\n    exrightGs = 1000 + rightdata[FIELD_RIGHT.sendstock] / 10 + rightdata[FIELD_RIGHT.allotstock] / 10\n    exrightPg = -rightdata[FIELD_RIGHT.allotprice] * rightdata[FIELD_RIGHT.allotstock] / 10000\n  }\n  return {\n    gs: exrightGs,\n    pg: exrightPg,\n    px: exrightPx\n  }\n}\n// 传入的价格和传出的价格都是放大coinunit倍的整形\nfunction _getExrightPrice (price, coinunit, rightpara, mode) {\n  if (coinunit === undefined) coinunit = 100\n  if (mode === 'forword') {\n    price = (price * (1000 / coinunit) - rightpara.pg - rightpara.px) * 1000 / rightpara.gs\n  } else {\n    price = price * (1000 / coinunit) * rightpara.gs / 1000 + rightpara.pg + rightpara.px\n  }\n  return Math.floor(price / (1000 / coinunit) + 0.5)\n}\n// 得到某个价格的除权价\nexport function getExrightPriceRange (start, stop, price, coinunit, rights) {\n  if (rights === undefined || rights.length < 1) return price\n  let rightpara\n  for (let j = 0; j < rights.length; j++) {\n    if (rights[j][0] > start && rights[j][0] <= stop) {\n      rightpara = _getExrightPara(rights[j])\n      price = _getExrightPrice(price, coinunit, rightpara, 'forword')\n      break\n    }\n  }\n  return price\n}\n\nfunction _transExright (days, coinunit, rightdata, mode, start, end) {\n  const rightpara = _getExrightPara(rightdata)\n  if (mode === 'forword') {\n    for (let i = start; i < end; i++) {\n      days[i][FIELD_DAY.open] = _getExrightPrice(days[i][FIELD_DAY.open], coinunit, rightpara, mode) // open\n      days[i][FIELD_DAY.high] = _getExrightPrice(days[i][FIELD_DAY.high], coinunit, rightpara, mode) // high\n      days[i][FIELD_DAY.low] = _getExrightPrice(days[i][FIELD_DAY.low], coinunit, rightpara, mode) // low\n      days[i][FIELD_DAY.close] = _getExrightPrice(days[i][FIELD_DAY.close], coinunit, rightpara, mode) // new\n      days[i][FIELD_DAY.vol] = days[i][FIELD_DAY.vol] * rightpara.gs / 1000\n    }\n  }\n}\n\n// 判断是否有除权\nfunction _isRight (dateBegin, dateEnd, rightdate) {\n  if (rightdate > dateBegin && rightdate <= dateEnd) {\n    return true\n  } else return false\n}\n// 对日线进行除权，周年线不能除权，,days传入时就是一个可修改的数组\nexport function transExrightDay (days, coinunit, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(days[i - 1][FIELD_DAY.time], days[i][FIELD_DAY.time], rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, coinunit, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {\n    // console.log(mode);\n  }\n  return days\n}\n\n// 对分钟线除权,days传入时就是一个可修改的数组\nexport function transExrightMin (days, coinunit, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(\n          getDate(days[i - 1][FIELD_DAY.time]),\n          getDate(days[i][FIELD_DAY.time]),\n          rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, coinunit, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {\n    // console.log(mode);\n  }\n  return days\n}\n// /////////////////\n// 检索数据函数集\n// /////////////////\n// 从分钟线查找对应记录\nexport function findIndexInMin (source, index) {\n  if (source.value.length < 1) {\n    return {\n      status: 'new',\n      index: -1\n    }\n  }\n  const lastIndex = source.value[source.value.length - 1][source.fields.time]\n  if (lastIndex === index) {\n    return {\n      status: 'old',\n      index: source.value.length - 1\n    }\n  } else if (lastIndex > index) {\n    return {\n      status: 'error',\n      index: source.value.length - 1\n    }\n  } else {\n    return {\n      status: 'new',\n      index: source.value.length - 1\n    }\n  }\n}\n// 从日线查找对应记录\nexport function findDateInDay (source, today) {\n  if (source === undefined || source.value === undefined || source.value.length < 1) {\n    return {\n      finded: false,\n      index: -1\n    }\n  }\n  const lastDate = source.value[source.value.length - 1][source.fields.time]\n  if (today === lastDate) {\n    return {\n      finded: true,\n      index: source.value.length - 1\n    }\n  }\n  return {\n    finded: false,\n    index: -1\n  }\n}\n// export function findDateInDay(source, today) {\n//   if (source === undefined || source.value === undefined || source.value.length < 1)\n//   {\n//     return {\n//       finded: false,\n//       index: -1\n//     };\n//   }\n//   const fields = source.fields;\n//   for (let i = source.value.length - 1; i >= 0; i--) {\n//     if (source.key === 'WEEK') {\n//       const curDay = source.value[i][fields.time];\n//       if (getDayGap(curDay, today) + getDayWeek(curDay) > 7) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'MON') {\n//       const curMon = Math.floor(source.value[i][fields.time] / 100);\n//       const todayMon = Math.floor(today / 100);\n//       if (curMon !== todayMon) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'DAY') {\n//       if (source.value[i][fields.time] === today) {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//   }\n//   return {\n//     finded: false,\n//     index: source.value.length - 1\n//   };\n// }\n\n// /////////////////\n// 检查数据完整性\n// /////////////////\nexport function getSize (source) {\n  if (source === undefined || isEmptyArray(source.value)) {\n    return 0\n  }\n  return source.value.length\n}\nexport function checkZero (value, fields) {\n  if (Array.isArray(value) &&\n    value[fields.open] > 0 &&\n    value[fields.high] > 0 &&\n    value[fields.low] > 0 &&\n    value[fields.close] > 0 &&\n    value[fields.vol] > 0 &&\n    value[fields.money] > 0) {\n    return false\n  } else {\n    return true\n  }\n}\nexport function checkDayZero (source) {\n  const out = []\n  if (!Array.isArray(source)) return out\n\n  for (let i = 0; i < source.length; i++) {\n    if (!checkZero(source[i], FIELD_DAY)) {\n      out.push(source[i])\n    }\n  }\n  return out\n}\n\nexport function checkDay5 (source, coinunit, tradeDate, tradetime) {\n  const out = []\n  if (source.length < 1) return out\n\n  const lastDate = getDate(source[source.length - 1][FIELD_DAY5.time])\n  // 判断是否已经有收盘数据了\n  let maxDays = 5\n  if (!lastDate === tradeDate) maxDays = 4\n  // console.log(source);\n\n  let idx\n  let count = 0\n  let curDate = 0\n  for (idx = source.length - 1; idx >= 0; idx--) {\n    if (curDate !== getDate(source[idx][FIELD_DAY5.time])) {\n      curDate = getDate(source[idx][FIELD_DAY5.time])\n      count++\n      if (count > maxDays) {\n        idx++\n        break\n      }\n    }\n    out.splice(0, 0, [source[idx][FIELD_DAY5.time], source[idx][FIELD_DAY5.close], source[idx][FIELD_DAY5.vol]])\n  }\n\n  count = 0\n  curDate = 0\n  let vol = 0\n  let money = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < out.length; idx++) {\n    // console.log(idx,day5_data[idx]);\n    if (curDate !== getDate(out[idx][FIELD_DAY5.time])) { // 增加记录\n      curDate = getDate(out[idx][FIELD_DAY5.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += out[idx][FIELD_DAY5.vol]\n    money += out[idx][FIELD_DAY5.close] * out[idx][FIELD_DAY5.vol] / coinunit\n    let index = fromTradeTimeToIndex(out[idx][FIELD_DAY5.time], tradetime)\n    index += (count - 1) * daymins\n    out[idx][FIELD_DAY5.idx] = index\n    out[idx][FIELD_DAY5.allvol] = vol\n    out[idx][FIELD_DAY5.allmoney] = money\n  }\n  // console.log(out);\n  return out\n}\n\nexport function updateStatic (fields, value) {\n  const coinunit = getValue({\n    fields,\n    value\n  }, 'coinunit')\n  const out = {\n    stktype: getValue({\n      fields,\n      value\n    }, 'type'),\n    volunit: getValue({\n      fields,\n      value\n    }, 'volunit'),\n    coinunit,\n    decimal: getValue({\n      fields,\n      value\n    }, 'decimal'),\n    before: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'before'),\n    stophigh: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'stophigh'),\n    stoplow: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'stoplow')\n  }\n  return out\n}\n\n// /////////////////\n// 对数据进行周期性合并\n// /////////////////\n// export function matchMinToMinute(source, outkey) {\n//   switch (outkey) {\n//     case 'M15': out = matchMin5ToMinute(out, outkey, 15);\n//       break;\n//     case 'M30': out = matchMin5ToMinute(out, outkey, 30);\n//       break;\n//     case 'M60': out = matchMin5ToMinute(out, outkey, 60);\n//       break;\n//   }\n// export function mergeMin(daydata, rate) {\n// this.match_minute_line = function(srcfields, srcvalue, minfields, minvalue, period) {\n//   const out = copyArrayOfDeep(srcvalue);\n//   const cur_min = [];\n//   let base_vol = 0;\n//   let base_money = 0;\n\n//   let hasData = false;\n//   let stopIdx = 4;\n//   for (let k = 0; k < minvalue.length; k++) {\n//     const nowmin = minvalue[k][minfields.idx];\n//     if (nowmin < 0) continue;\n//     if (nowmin > stopIdx) {\n//       if (hasData) {\n//         cur_min[minfields.vol] = minvalue[k][minfields.vol] - base_vol;\n//         cur_min[minfields.money] = minvalue[k][minfields.money] - base_money;\n//         base_vol = minvalue[k][minfields.vol];\n//         base_money = minvalue[k][minfields.money];\n\n//         cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//         // console.log(\"match 2:\",stopIdx,cur_min.toString());\n//         out.push(copyArrayOfDeep(cur_min));\n//       }\n//       stopIdx = (Math.floor(nowmin / offset) + 1) * offset - 1;\n//       cur_min[minfields.open] = minvalue[k][minfields.open];\n//       cur_min[minfields.high] = minvalue[k][minfields.high];\n//       cur_min[minfields.low] = minvalue[k][minfields.low];\n//       cur_min[minfields.close] = minvalue[k][minfields.close];\n//       hasData = true;\n//     } else { // nowmin 在0-5之间\n//       if (hasData) {\n//         cur_min[minfields.high] = cur_min[minfields.high] > minvalue[k][minfields.high] ? cur_min[minfields.high] : minvalue[k][minfields.high];\n//         cur_min[minfields.low] = cur_min[minfields.low] < minvalue[k][minfields.low] || minvalue[k][minfields.low] === 0 ?\n//                                   cur_min[minfields.low] : minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//       } else {\n//         cur_min[minfields.open] = minvalue[k][minfields.open];\n//         cur_min[minfields.high] = minvalue[k][minfields.high];\n//         cur_min[minfields.low] = minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//         hasData = true;\n//       }\n//     }\n//   } // for i\n//   if (hasData) {\n//     cur_min[minfields.vol] = minvalue[minvalue.length - 1][minfields.vol] - base_vol;\n//     cur_min[minfields.money] = minvalue[minvalue.length - 1][minfields.money] - base_money;\n//     cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//     out.push(copyArrayOfDeep(cur_min));\n//     // alert('4:'+out.toString());\n//     // console.log('match 3:', stopIdx, cur_min.toString());\n//   }\n//   return out;\n// }\n\n// 按rate率压缩日线和分钟数据，因为界面显示原因，可能会存在2日...7日等合并的线\nexport function getZipDay (daydata, rate) {\n  if (rate < 1) return daydata\n  const out = []\n  const zipday = []\n\n  let count = 0\n  const field = FIELD_DAY\n  for (let k = 0; k < daydata.length; k++) {\n    if (count === 0) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] = daydata[k][field.vol]\n      zipday[field.money] = daydata[k][field.money]\n      count = 1\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] += daydata[k][field.vol]\n      zipday[field.money] += daydata[k][field.money]\n      count++\n      if (count >= rate) {\n        zipday[field.time] = daydata[k][field.time]\n        out.push(copyArrayOfDeep(zipday))\n        count = 0\n      }\n    }\n  } // for i\n  if (count > 0) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n// 日线到周线\nexport function matchDayToWeek (daydata) {\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    // 周五 or 下一个日期跨越一周\n    const week = getDayWeek(daydata[k][field.time])\n    console.log('week', k, week, daydata[k][field.time])\n    if (k >= daydata.length - 1 || week === 5 ||\n      (getDayGap(daydata[k][field.time], daydata[k + 1][field.time]) + week > 7)) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 日线到月线\nexport function matchDayToMon (daydata) {\n  let month\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      month = getDayMon(daydata[k][field.time])\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    if (k >= daydata.length - 1 || getDayMon(daydata[k + 1][field.time]) !== month) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 求交易时间的总共分钟数 [{begin:930,end:1130},{...}]\nexport function getMinuteCount (tradetime) { // time_t\n  let mincount = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    mincount += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n  }\n  return mincount\n}\n\n// 根据交易时间把time_t返回一个顺序值 time_t --> 0..239 -1表示没有非交易时间\nexport function fromTradeTimeToIndex (ttime, tradetime) { // time_t 返回０－２３９\n  const minute = getMinute(ttime)\n\n  let nowmin = 0\n  let index = -1\n  for (let i = 0; i < tradetime.length; i++) {\n    // 9:31:00--11:29:59  13:01:00--14:59:59\n    if (minute > tradetime[i].begin && minute < tradetime[i].end) {\n      index = nowmin + getMinuteGap(tradetime[i].begin, minute)\n      break\n    }\n    if (minute <= tradetime[i].begin && i === 0) { // 8:00:00---9:30:59秒前都=0\n      return 0\n    }\n    if (minute <= tradetime[i].begin && (minute > getMinuteOffset(tradetime[i].begin, -5))) { // 12:55:59--13:00:59秒\n      return nowmin\n    }\n\n    nowmin += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n\n    if (minute >= tradetime[i].end && i === tradetime.length - 1) { // 15:00:00秒后\n      return nowmin - 1\n    }\n    if (minute >= tradetime[i].end && (minute < getMinuteOffset(tradetime[i].end, 5))) { // 11:30:00--11:34:59秒\n      return nowmin - 1\n    }\n  }\n  return index\n}\n\n// 根据交易时间把0..239 转换为 time_t;  0 表示没有非交易时间\nexport function fromIndexToTradeTime (tindex, tradetime, tradeDate) {\n  let index = tindex\n  let offset = 0\n  let nowmin = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    nowmin = getMinuteGap(tradetime[i].begin, tradetime[i].end)\n    if (index < nowmin) {\n      offset = getMinuteOffset(tradetime[i].begin, index + 1)\n      const ttime = new Date(Math.floor(tradeDate / 10000), Math.floor(tradeDate % 10000 / 100) - 1, tradeDate % 100,\n        Math.floor(offset / 100), offset % 100, 0)\n      return Math.floor(ttime / 1000)\n    }\n    index -= nowmin\n  }\n  return 0\n}\n\nexport function outputDay5 (source, coinunit, tradetime) {\n  const out = {\n    key: 'DAY5',\n    fields: FIELD_DAY5,\n    value: []\n  }\n  if (source.length < 1) return out\n\n  let idx\n  let count = 0\n  let vol = 0\n  let money = 0\n  let curDate = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < source.length; idx++) {\n    if (curDate !== getDate(source[idx][FIELD_TICK.time])) {\n      curDate = getDate(source[idx][FIELD_TICK.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += source[idx][FIELD_TICK.vol]\n    money += source[idx][FIELD_TICK.close] * source[idx][FIELD_TICK.vol] / coinunit\n    let index = fromTradeTimeToIndex(source[idx][FIELD_TICK.time], tradetime)\n    index += (count - 1) * daymins\n    out.value.push([index, source[idx][FIELD_TICK.close], source[idx][FIELD_TICK.vol], money / vol])\n  }\n  return out\n}\n","'use strict'\n\n// 数据类型和数据名称分开；根据数据类型生成\n// 在comm中定义几个函数，用户可以自己定义数据类型，自己定义按钮，自己定义画线的方式，\n// 只要用户产生的类支持通用的接口onpaint等函数，并成功注册进来，就可以被chart拿来画图了\n// 这样扩展起来才方便\n// 而chart.line只画基础的一些图形，其他非标的图形由用户自行定义，包括数据生成的算法\n\nexport const STOCK_TYPE_INDEX = 0\nexport const STOCK_TYPE_A = 1\nexport const STOCK_TYPE_B = 4\nexport const STOCK_TYPE_OTHER = 5\n\nexport const STOCK_TRADETIME = [{\n  begin: 930,\n  end: 1130\n},\n{\n  begin: 1300,\n  end: 1500\n}\n]\n\n// 基本日线定义，历史分钟线，\nexport const FIELD_DAY = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6\n}\nexport const FIELD_MIN = {\n  idx: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  allvol: 5, // 增补\n  allmoney: 6 // 增补\n}\n\nexport const FIELD_TICK = {\n  time: 0,\n  close: 1,\n  vol: 2\n}\nexport const FIELD_DAY5 = {\n  time: 0,\n  close: 1,\n  vol: 2,\n  idx: 3, // 增补\n  allvol: 4, // 增补\n  allmoney: 5 // 增补\n}\n\n// 两种单线的定义\nexport const FIELD_LINE = {\n  time: 0,\n  value: 1\n}\nexport const FIELD_ILINE = {\n  idx: 0,\n  value: 1\n}\n\n// 标准5档实时行情\nexport const FIELD_NOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10,\n  buy2: 11,\n  buyvol2: 12,\n  sell2: 13,\n  sellvol2: 14,\n  buy3: 15,\n  buyvol3: 16,\n  sell3: 17,\n  sellvol3: 18,\n  buy4: 19,\n  buyvol4: 20,\n  sell4: 21,\n  sellvol4: 22,\n  buy5: 23,\n  buyvol5: 24,\n  sell5: 25,\n  sellvol5: 26\n}\n// 简易一档实时行情\nexport const FIELD_ENOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10\n}\n// 指数实时行情\nexport const FIELD_NOW_IDX = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  ups: 7,\n  upvol: 8,\n  downs: 9,\n  downvol: 10,\n  mids: 11,\n  midvol: 12\n}\n// 股票CODE列表\nexport const FIELD_CODE = {\n  index: 0,\n  code: 1,\n  name: 2, // 股票名称\n  spell: 3, // 拼音首字母\n  type: 4, // 股票类型\n  decimal: 5, // 保留小数点\n  volunit: 6, // 成交量单位\n  before: 7, // 前收盘\n  stophigh: 8, // 涨停价\n  stoplow: 9 // 跌停价\n}\n// 股票信息定义\nexport const FIELD_INFO = {\n  name: 0, // 股票名称\n  type: 1, // 股票类型\n  decimal: 2, // 保留小数点\n  volunit: 3, // 成交量单位\n  before: 4, // 前收盘\n  stophigh: 5, // 涨停价\n  stoplow: 6 // 跌停价\n}\n\n// 除权字段定义\nexport const FIELD_RIGHT = {\n  time: 0,\n  sendstock: 1, // 10送股 放大1000倍\n  allotstock: 2, // 10配股数 放大1000倍\n  allotprice: 3, // 配股价 放大1000倍\n  accrual: 4 // 10送红利 放大1000倍\n}\n// 财务信息定义\nexport const FIELD_FINANCE = {\n  code: 0,\n  time: 1,\n  flow: 2, // 流通股\n  total: 3, // 总股本\n  earnings: 4 // 每股收益\n}\n// ////////////////////////////////////////\n// 以上为系统默认定义，用户定义数据类型可以放在下面\n// ////////////////////////////////////////\n\n// 预测信息定义\nexport const FIELD_SEER = {\n  code: 0,\n  start: 1, // 开始日期\n  period: 2, // 预期周期\n  buy: 3, // 买入价\n  target: 4, // 目标价\n  stoploss: 5, // 止损价\n  status: 6, // 当前状态\n  stopdate: 7, // 停止日期 正在进行的为0\n  // highdate: 8,  // 最高价格日期\n  // lowdate: 9,    // 最低价格日期\n  surplus: 10, // 剩余天数\n  uid: 11, // 预测的id\n  focused: 12 // 是否热点\n}\nexport const FIELD_TRADE = {\n  time: 0, // 交易时间\n  code: 1, // 股票代码\n  type: 2, // B S 买卖标志\n  price: 3, // 交易价格\n  vol: 4, // 成交量\n  money: 5, // 成交金额\n  info: 6 // 交易参数\n}\n","'use strict'\n\n// /////////////////////////////////////////\n// 预先定义好的公式，比如MA等，可在这里扩展公式定义\n// 用户可以自定义公式注册到ClData层，便于系统调用\n// ////////////////////////////////////////\nimport getValue from '../data/cl.data.tools'\n\nexport function ClFormula () {\n  this.source = {\n    data: {},\n    minIndex: 0,\n    maxIndex: 0,\n    nowIndex: 0\n  }\n  this.getValue = function (label, offIndex) { // offIndex 向前偏移offIndex条记录\n    if (label === undefined) return 0\n    if (this.source.data === undefined || this.source.data.value === undefined) return 0\n\n    if (this.source.nowIndex === undefined) this.source.nowIndex = this.source.minIndex\n    const index = this.source.nowIndex - offIndex\n\n    return getValue(this.source.data, label, index)\n  }\n  this.runSingleStock = function (source, formula) {\n    const singleValue = []\n    this.source = source\n    // console.log('source', source);\n    const command = `\n    for (this.source.nowIndex = this.source.minIndex;this.source.nowIndex <= this.source.maxIndex;this.source.nowIndex++) {\n          const ${formula}\n          singleValue.push([this.getValue('idx', 0), out]);\n    }`\n    // console.log(command);\n    eval(command)\n    return singleValue\n  }\n  // ///////////////////\n  //  自定义公式\n  // /////////////////\n  this.MA = function (label, period) {\n    let off = 0\n    let value = 0\n    for (let m = 0; m < period; m++) {\n      const v = this.getValue(label, m)\n      if (v !== 0) {\n        off++\n        value += v\n      }\n    }\n    return off === 0 ? 0 : value / off\n  }\n  this.AVGPRC = function () {\n    let value = 0\n    value = this.getValue('allmoney', 0) / this.getValue('allvol', 0)\n    return value\n  }\n}\n\n//\n// 求均价时，需要考虑指数的均价问题\n// case 'MIN':\n// // 处理指数的均线问题\n// allmoney = 0;\n// fields = getFields('MIN');\n// if (this.InData.MIN === undefined) break;\n// value = this.InData['MIN'].value;\n// // console.log('123-----', value);\n// for (let k = 0; k < value.length; k++) {\n//   if (this.static.stktype === 0) {\n//     if (k === 0) {\n//       allmoney = value[k][fields.vol] * value[k][fields.close] / this.static.coinunit;\n//     } else {\n//       allmoney += (value[k][fields.vol] - value[k - 1][fields.vol]) * value[k][fields.close] / this.static.coinunit;\n//     }\n//     value[k][fields.allmoney] = allmoney;\n//     // console.log('123', value[k][fields.allmoney] / value[k][fields.allvol]);\n//   } else {\n//     // value[k][fields.allmoney] = value[k][fields.money];\n//   }\n// }\n// break;\n","'use strict'\n\nexport function _getImageData (context, xx, yy, ww, hh) {\n  return context.getImageData(xx, yy, ww, hh)\n}\n\nexport function _putImageData (context, img, xx, yy) {\n  context.putImageData(img, xx, yy)\n}\n\nexport function _setLineWidth (context, l) {\n  context.lineWidth = l\n}\n\nexport function _getLineWidth (context) {\n  return context.lineWidth\n}\n\n// 画竖线\nexport function _drawVline (context, xx, yy1, yy2) {\n  context.moveTo(xx, yy1)\n  context.lineTo(xx, yy2)\n}\n// 画横线\nexport function _drawHline (context, xx1, xx2, yy) {\n  context.moveTo(xx1, yy)\n  context.lineTo(xx2, yy)\n}\n// 画斜线\nexport function _drawline (context, xx1, yy1, xx2, yy2) {\n  context.moveTo(xx1, yy1)\n  context.lineTo(xx2, yy2)\n}\n\n// 画线\nexport function _drawmoveTo (context, xx, yy) {\n  context.moveTo(xx, yy)\n}\n\n// 画线\nexport function _drawlineTo (context, xx, yy) {\n  context.lineTo(xx, yy)\n}\n\n// 画空心长方形\nexport function _drawRect (context, xx, yy, ww, hh) {\n  context.strokeRect(xx, yy, ww, hh) // 这里的宽度是指不算xx的起始点的宽度，所以你写宽5，实际出来图形是6个像素，\n}\n// 画实心长方形\nexport function _fillRect (context, xx, yy, ww, hh, fillclr) {\n  context.fillStyle = fillclr || context.fillStyle\n  context.fillRect(xx, yy, ww, hh)\n}\n\n// 画实心长方形\nexport function _fill (context, fillclr) {\n  context.fillStyle = fillclr\n  context.fill()\n}\n// 开始画线\nexport function _drawBegin (context, clr) {\n  context.beginPath()\n  context.strokeStyle = clr || context.strokeStyle\n}\n\n// 结束画线\nexport function _drawEnd (context) {\n  context.stroke()\n}\n\n// 画一条虚线\nfunction __getBeveling (x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))\n}\nexport function _drawDashLine (context, x1, y1, x2, y2, dashLen) {\n  dashLen = dashLen === undefined ? 5 : dashLen\n  // 得到斜边的总长度\n  const beveling = __getBeveling(x2 - x1, y2 - y1)\n  // 计算有多少个线段\n  const num = Math.floor(beveling / dashLen)\n\n  for (let i = 0; i < num; i++) {\n    context[i % 2 === 0 ? 'moveTo' : 'lineTo'](x1 + (x2 - x1) / num * i, y1 + (y2 - y1) / num * i)\n  }\n  // context.stroke();\n}\n\n// ////////////////////////////\n// 以下显示文字\n// ///////////////////////////\n\nexport function _setFontSize (context, font, pixel) {\n  context.font = ' ' + pixel + 'px ' + font\n}\n\nexport function _drawTxt (context, xx, yy, txt, font, pixel, clr, pos) {\n  _setFontSize(context, font, pixel)\n  context.fillStyle = clr || context.fillStyle\n  context.textBaseline = pos ? pos.y || 'top' : 'top' // top（默认）；middle bottom\n  context.textAlign = pos ? pos.x || 'start' : 'start' // start（默认）;center end\n  context.fillText(txt, xx, yy)\n}\n\nexport function _getTxtWidth (context, txt, font, pixel) {\n  _setFontSize(context, font, pixel)\n  return context.measureText(txt).width\n}\n// 获取文字显示的最适合的Rect\nfunction __getTxtRect (context, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const len = _getTxtWidth(context, txt, config.font, config.pixel)\n  return { width: len + 2 * spaceX, height: config.pixel + spaceY * 2 }\n}\n// 把文本画在矩形内\nexport function _drawTxtRect (context, xx, yy, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const tr = __getTxtRect(context, txt, config)\n\n  let xxx, yyy\n  yyy = yy // top\n  xxx = xx // start\n  if (config.y === 'middle') yyy = yy - Math.floor(tr.height / 2) // middle\n  if (config.x === 'end') xxx = xx - tr.width\n  if (config.x === 'center') xxx = xx - Math.floor(tr.width / 2)\n  _fillRect(context, xxx, yyy, tr.width, tr.height, config.bakclr)\n\n  _drawBegin(context, config.clr)\n  _drawRect(context, xxx, yyy, tr.width, tr.height)\n  xxx = xx\n  yyy = yy\n  if (config.x === 'start') xxx = xx + spaceX // ||config.x==='center'\n  if (config.x === 'end') xxx = xx - spaceX\n  if (config.y === 'top') yyy = yy - spaceY\n  _drawTxt(context, xxx, yyy, txt, config.font, config.pixel, config.clr, {\n    x: config.x,\n    y: config.y\n  })\n  _drawEnd(context)\n}\n\n// 画空心圆\nexport function _drawCircle (context, x, y, r) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n}\n\n// 画实心圆\nfunction _drawCircleAndFilled (context, x, y, r, clr) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n  context.fillStyle = clr\n  context.fill()\n}\n\n// 画一根独立的线，不影响后面的画线颜色\nexport function _drawLineAlone (context, xx, yy, xx1, yy1, clr) {\n  const oldclr = context.strokeStyle\n  _drawBegin(context, clr)\n  context.moveTo(xx, yy)\n  context.lineTo(xx1, yy1)\n  _drawEnd(context)\n  context.strokeStyle = oldclr\n}\n\n// 画一个椭圆\nexport function _BezierEllipse (context, x, y, a, b, h) {\n  const k = 0.5522848\n  const ox = a * k // 水平控制点偏移量\n  const oy = b * k // 垂直控制点偏移量\n\n  context.beginPath()\n  // 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线\n  if (!h) {\n    context.moveTo(x - a, y)\n    context.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n    context.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y)\n    context.closePath()\n  } else {\n    context.moveTo(x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n  }\n  context.stroke()\n}\n\n// 画一个LOGO\nexport function _drawLogo (context, xx, yy, size) {\n  context.beginPath()\n  const lw = size\n\n  context.lineWidth = lw\n  context.strokeStyle = '#efefef'\n\n  context.moveTo(xx - 0.5 * lw, yy) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy) // 创建水平线\n  context.moveTo(xx, yy) // 创建开始点\n  context.lineTo(xx, yy + 13 * lw) // 创建水平线\n  context.moveTo(xx - 3 * lw, yy + 13 * lw) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy + 13 * lw) // 创建水平线\n\n  context.moveTo(xx + 10 * lw, yy + 3.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 3.5 * lw) // 创建水平线\n  context.moveTo(xx + 10 * lw, yy + 9.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 9.5 * lw) // 创建水平线\n  context.stroke()\n\n  _BezierEllipse(context, xx + 5.5 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw, true)\n  _BezierEllipse(context, xx + 9 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw)\n  context.fillStyle = '#000'\n  context.fillRect(xx + 8.5 * lw, yy + 4 * lw, 6 * lw, 5 * lw)\n}\n\n// ////////////////////////////////////\n// 以下函数只能调用上面的函数,不能直接画图\n// //////////////////////////////////\n\n// data {o,h,l,c}\nexport function _drawSignPlot (context, x, y, Arc1, Arc2) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawmoveTo(context, x - Arc1.r, y)\n    _drawlineTo(context, x + Arc1.r, y)\n    _drawlineTo(context, x, y + 2 * Arc1.r)\n    _drawlineTo(context, x - Arc1.r, y)\n    _fill(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n}\nexport function _drawSignCircle (context, x, y, Arc1, Arc2, Arc3) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n  if (Arc3 !== undefined && Arc3.r > 0) {\n    _drawBegin(context, Arc3.clr)\n    _drawCircleAndFilled(context, x, y, Arc3.r, Arc3.clr)\n    _drawEnd(context)\n  }\n}\n\nexport function _drawSignHLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.right - config.pixel / 2, config.yy, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n\n  config.width = config.right - config.xx\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let xx = config.xx + config.width * item[i].set / 100\n    if (item[i].txt === 'arc') {\n      if ((xx + item[i].maxR) > config.right) xx = config.right - item[i].maxR\n      _drawSignCircle(context, xx, config.yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((xx + tr.width) > config.right) xx = config.right - tr.width\n      let yy = config.yy\n      if (config.top && yy < config.top + tr.height / 2) {\n        yy = config.top + tr.height / 2\n      }\n      if (config.bottom && yy > config.bottom - tr.height / 2) {\n        yy = config.bottom - tr.height / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'start',\n        y: config.y,\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n\nexport function _drawSignVLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.xx, config.bottom - config.pixel / 2, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n  config.height = config.bottom - config.yy\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let yy = config.yy + config.height * item[i].set / 100\n\n    if (item[i].txt === 'arc') {\n      if ((yy + item[i].maxR) > config.bottom) yy = config.bottom - item[i].maxR\n      _drawSignCircle(context, config.xx, yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((yy + tr.height) > config.bottom) yy = config.bottom - tr.height\n      let xx = config.xx\n      if (config.left && xx < config.left + tr.width / 2) {\n        xx = config.left + tr.width / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'center',\n        y: 'middle',\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n// { index:k, unitX: unitX, spaceX:spaceX, unitY:unitY,maxmin:mm},\n// data {o,h,l,c}\nexport function _drawKBar (context, config, item) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const xxm = xx + Math.floor(config.unitX / 2)\n  const yyh = config.rect.top + Math.round((config.maxmin.max - item[1]) * config.unitY)\n  const yyl = config.rect.top + config.rect.height - Math.round((item[2] - config.maxmin.min) * config.unitY)\n  let hh\n\n  const yy = config.rect.top + Math.round((config.maxmin.max - item[0]) * config.unitY)\n\n  if (item[0] === item[3]) {\n    hh = 0\n    _drawHline(context, xx, xx + config.unitX, yy)\n    if (item[1] > item[2]) {\n      _drawVline(context, xxm, yyh, yyl)\n    }\n  } else {\n    hh = Math.round((item[0] - item[3]) * config.unitY)\n    _drawVline(context, xxm, yyh, yy)\n    if (config.filled) {\n      _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n    } else {\n      _drawRect(context, xx, yy, config.unitX, hh)\n    }\n    _drawVline(context, xxm, yy + hh, yyl)\n  }\n}\n// data {o,h,l,c}\nexport function _drawVBar (context, config, value) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const yy = config.rect.top + Math.round((config.maxmin.max - value) * config.unitY)\n  const hh = config.rect.top + config.rect.height - yy\n  if (config.filled) {\n    _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n  } else {\n    _drawRect(context, xx, yy, config.unitX, hh)\n  }\n}\n\n// ////////////////////////////////////\n// 以下函数为辅助画图的工具函数\n// //////////////////////////////////\n// 为传入的16进制颜色增加透明度 ‘#1F1F2F’ -> rgba(...)\nexport function _setTransColor (scolor, trans) {\n  const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n  let sColor = scolor.toLowerCase()\n  if (sColor && reg.test(sColor)) {\n    if (sColor.length === 4) {\n      let sColorNew = '#'\n      for (let i = 1; i < 4; i += 1) {\n        sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\n      }\n      sColor = sColorNew\n    }\n    // 处理六位的颜色值\n    const sColorChange = []\n    for (let i = 1; i < 7; i += 2) {\n      sColorChange.push(parseInt('0x' + sColor.slice(i, i + 2)))\n    }\n    sColor = sColorChange.join(',')\n    trans = trans || 1\n    return 'RGB(' + sColor + ',' + trans + ')'\n  } else {\n    return sColor\n  }\n}\n","'use strict'\n\nimport {\n  copyJsonOfDeep\n} from '../util/cl.tool'\n\n// ///////////////////////////\n//  这里是定义的一些公共变量，以及调用方法\n// ///////////////////////////\n\n// 以下的几个变量都是系统确立时就必须确立的，属于大家通用的配置\nexport let _systemInfo = {\n  runPlatform: 'normal', // 支持其他平台，其他平台（如微信）可能需要做函数替代和转换\n  axisPlatform: 'phone', // 'web' 对坐标显示的区别\n  eventPlatform: 'html5', // 'react'所有事件\n  scale: 1, // 屏幕的放大倍数，该常量会经常性使用，并且是必须的\n  standard: 'china', // 画图标准，美国’usa‘，需要调整颜色\n  sysColor: 'black' // 色系，分白色和黑色系\n}\n\nexport const COLOR_WHITE = {\n  sys: 'white',\n  line: ['#4048cc', '#dd8d2d', '#168ee0', '#ad7eac', '#ff8290', '#ba1215'],\n  back: '#fafafa',\n  txt: '#2f2f2f',\n  baktxt: '#2f2f2f',\n  axis: '#7f7f7f',\n  grid: '#cccccc',\n  red: '#ff6a6c',\n  green: '#32cb47',\n  white: '#7e7e7e',\n  vol: '#dd8d2d',\n  button: '#888888',\n  colume: '#41bfd0',\n  box: '#ddf4df',\n  code: '#3f3f3f'\n}\n\nexport const COLOR_BLACK = {\n  sys: 'black',\n  line: ['#efefef', '#fdc104', '#5bbccf', '#ad7eac', '#bf2f2f', '#cfcfcf'],\n  back: '#232323',\n  txt: '#bfbfbf',\n  baktxt: '#2f2f2f',\n  axis: '#afafaf',\n  grid: '#373737',\n  red: '#ff6a6c',\n  green: '#6ad36d',\n  white: '#9f9f9f',\n  vol: '#fdc104',\n  button: '#9d9d9d',\n  colume: '#41bfd0',\n  box: '#373737',\n  code: '#41bfd0'\n}\n\nexport function setColor (syscolor, standard) {\n  let color = {}\n  if (syscolor === 'white') {\n    color = copyJsonOfDeep(COLOR_WHITE)\n  } else {\n    color = copyJsonOfDeep(COLOR_BLACK)\n  }\n  // 当发现国别为美国需要修改颜色配对\n  if (standard === 'usa') {\n    const clr = color.red\n    color.red = color.green\n    color.green = clr\n  }\n  return color\n}\nexport function initSystem (cfg) {\n  if (cfg !== undefined) {\n    if (cfg.canvas !== undefined && cfg.scale !== 1) {\n      setScale(cfg.canvas, cfg.scale)\n      _systemInfo.canvas = cfg.canvas\n    }\n    _systemInfo.context = cfg.context\n    for (const key in _systemInfo) {\n      _systemInfo[key] = cfg[key] || _systemInfo[key]\n    }\n    console.log(_systemInfo)\n  }\n  _systemInfo.color = setColor(_systemInfo.sysColor, _systemInfo.standard)\n}\n\n// 所有chart都必须调用这个函数，以获取基本的配置\nexport function initCommonInfo (chart, father) {\n  chart.father = father\n  chart.context = father.context\n  chart.scale = _systemInfo.scale\n  chart.color = _systemInfo.color\n  chart.axisPlatform = _systemInfo.axisPlatform\n  chart.eventPlatform = _systemInfo.eventPlatform\n}\nexport function checkLayout (layout) {\n  const scale = _systemInfo.scale\n  layout.margin.top *= scale\n  layout.margin.left *= scale\n  layout.margin.bottom *= scale\n  layout.margin.right *= scale\n\n  layout.offset.top *= scale\n  layout.offset.left *= scale\n  layout.offset.bottom *= scale\n  layout.offset.right *= scale\n\n  layout.title.pixel *= scale\n  layout.title.height *= scale\n  layout.title.spaceX *= scale\n\n  if (layout.title.height < (layout.title.pixel + 2 * scale)) {\n    layout.title.height = layout.title.pixel + 2 * scale\n  }\n\n  layout.axisX.pixel *= scale\n  layout.axisX.width *= scale\n  layout.axisX.height *= scale\n  layout.axisX.spaceX *= scale\n\n  layout.scroll.pixel *= scale\n  layout.scroll.size *= scale\n  layout.scroll.spaceX *= scale\n\n  layout.digit.pixel *= scale\n  layout.digit.height *= scale\n  layout.digit.spaceX *= scale\n\n  if (layout.digit.height < (layout.digit.pixel + 2 * scale)) {\n    layout.digit.height = layout.digit.pixel + 2 * scale\n  }\n\n  layout.symbol.pixel *= scale\n  layout.symbol.size *= scale\n  layout.symbol.spaceX *= scale\n  layout.symbol.spaceY *= scale\n\n  if (layout.symbol.size < (layout.symbol.pixel + 2 * scale)) {\n    layout.symbol.size = layout.symbol.pixel + 2 * scale\n  }\n}\n// 改变鼠标样式\n// default\nexport function changeCursorStyle (style) {\n  if (_systemInfo.eventPlatform === 'html5') {\n    _systemInfo.canvas.style.cursor = style\n  }\n}\n\nexport function setScale (canvas, scale) {\n  console.log(canvas.clientWidth, canvas.width)\n  canvas.width = canvas.clientWidth * scale\n  canvas.height = canvas.clientHeight * scale\n  return {\n    width: canvas.width,\n    height: canvas.height\n  }\n}\n","'use strict'\n\nimport {\n  _systemInfo\n} from '../chart/cl.chart.init'\nimport getValue from '../data/cl.data.tools'\n\n// ///////////////////////////////////////\n// 和定位相关基本函数\n// //////////////////////////////////////\n\n// 根据label在data中寻找匹配的记录编号\nexport function findLabelToIndex (data, findvalue, label) {\n  for (let idx = 0; idx <= data.value.length - 1; idx++) {\n    if (findvalue === getValue(data, label, idx)) {\n      return idx\n    }\n  }\n  return -1\n}\n// 查找最匹配time的记录号，direction为forword的时候表示从后面向前开始寻找，\nexport function findNearTimeToIndex (data, findvalue, label, direction) {\n  if (label === undefined) label = 'time'\n  if (direction && direction === 'forword') {\n    for (let idx = data.value.length - 1; idx >= 0; idx--) {\n      if (getValue(data, label, idx) > findvalue) continue\n      return idx\n    }\n  } else {\n    for (let idx = 0; idx <= data.value.length - 1; idx++) {\n      if (getValue(data, label, idx) < findvalue) continue\n      return idx\n    }\n  }\n  return -1\n}\n// 专门处理分时图和5日图这种所有数据都会小于界面的情况\n// 此种情况下elementW一般就只有一个像素\nexport function setFixedLineFlags (info, config) {\n  info.showMode = 'fixed'\n  info.fixed = {\n    min: 0,\n    max: config.maxCount - 1,\n    left: 0,\n    right: 0\n  }\n  info.minIndex = 0\n  info.maxIndex = config.size - 1\n  // 5日线时 spaceX初始值设为0\n  info.maxCount = config.maxCount > 1 ? config.maxCount : 2\n  info.unitX = _systemInfo.scale\n  info.spaceX = config.width / info.maxCount - info.unitX\n}\n// 此种情况下spaceX最小需要一个像素\nexport function setMoveLineFlags (info, config) {\n  const spaceX = info.unitX / 4\n  info.spaceX = spaceX < _systemInfo.scale ? _systemInfo.scale : spaceX\n  info.maxCount = Math.floor(config.width / (info.unitX + info.spaceX)) // 整个图形区域最大显示记录数\n  const offset = info.maxCount > config.size ? config.size : info.maxCount\n\n  switch (info.showMode) {\n    case 'fixed':\n      break\n    case 'locked':\n      // info.locked.index = config.index ? config.index : info.locked.index;\n      // 把需要锁定的记录初始化，如果没有值就取当前画面中间的值\n      // info.locked.set = config.set ? config.set : info.locked.set;\n      break\n    case 'move':\n      break\n    default: // case 'last':\n      info.maxIndex = config.size - 1\n      info.minIndex = config.size - offset\n      break\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport { initCommonInfo } from '../chart/cl.chart.init'\nimport {\n  inRect\n} from '../util/cl.tool'\n\nexport default function ClDrawLine (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    this.data = this.source.getData(key)\n    // console.log(this.data, key, this.info, this.maxmin);\n\n    if (this.info.labelX === undefined) this.info.labelX = 'idx'\n    if (this.info.labelY === undefined) this.info.labelY = 'value'\n    // 分钟线为‘close’\n\n    let xx, yy\n    let isBegin = false\n    let idx\n    let count = 0\n    // console.log(this.rectMain.left, this.rectMain.top);\n    _drawBegin(this.context, this.info.color)\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + idx * (this.linkInfo.unitX + this.linkInfo.spaceX)\n      yy = this.rectMain.top + Math.round((this.maxmin.max - getValue(this.data, this.info.labelY, index)) * this.maxmin.unitY)\n      // console.log(index, this.data, this.info.labelX, getValue(this.data, this.info.labelY, index));\n      if (Math.floor(idx / this.info.skips) > count) {\n        count = Math.floor(idx / this.info.skips)\n        isBegin = false\n      }\n      if (!isBegin) {\n        isBegin = inRect(this.rectMain, { x: xx, y: yy })\n        if (isBegin) _drawmoveTo(this.context, xx, yy)\n        continue\n      }\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawLineAlone,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\nexport default function ClDrawVLine (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  // this.rectMain = {\n  //   left:rectMain.left,\n  //   top:rectMain.top,\n  //   width:rectMain.width,\n  //   height:rectMain.height\n  // };\n  console.log('---1--', this.rectMain)\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    this.data = this.source.getData(key)\n    console.log(this.data, key, this.info, this.maxmin, this.rectMain)\n\n    if (this.info.labelX === undefined) this.info.labelX = 'time'\n    if (this.info.labelY === undefined) this.info.labelY = 'vol'\n\n    let xx, yy, value\n    let idx\n\n    _drawBegin(this.context, this.color[this.info.color])\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + Math.floor(idx * (this.linkInfo.spaceX + this.linkInfo.unitX))\n      value = getValue(this.data, this.info.labelY, k)\n      if (value < 0) continue\n      yy = this.rectMain.top + Math.round((this.maxmin.max - value) * this.maxmin.unitY)\n      if (yy < this.rectMain.top) {\n        yy = this.rectMain.top + 1\n        _drawLineAlone(this.context, xx, this.rectMain.top + this.rectMain.height - 1, xx, yy, this.color.white)\n        continue\n      }\n      _drawmoveTo(this.context, xx, this.rectMain.top + this.rectMain.height - 1)\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","import ClDrawKBar from './chart/cl.draw.kbar'\nimport ClDrawLine from './chart/cl.draw.line'\nimport ClDrawRight from './chart/cl.draw.right'\nimport ClDrawVBar from './chart/cl.draw.vbar'\nimport ClDrawVLine from './chart/cl.draw.vline'\n\nexport const CHART_LAYOUT = {\n  margin: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }, // 边界偏移值\n  offset: {\n    left: 2,\n    top: 2,\n    right: 2,\n    bottom: 0\n  }, // 实际画图区域的偏移值\n  title: {\n    pixel: 12,\n    height: 18,\n    spaceX: 10,\n    font: 'sans-serif'\n  }, // 标题文字的定义\n  axisX: {\n    pixel: 12,\n    height: 18,\n    width: 50,\n    spaceX: 2,\n    font: 'sans-serif'\n  },\n  scroll: {\n    pixel: 12,\n    size: 15,\n    spaceX: 10,\n    font: 'sans-serif'\n  },\n  digit: {\n    pixel: 12,\n    height: 16,\n    spaceX: 3,\n    font: 'Arial'\n  }, // 数字的定义\n  symbol: {\n    pixel: 10,\n    size: 16,\n    spaceX: 3,\n    spaceY: 2,\n    font: 'Arial'\n  }// 标记的定义\n}\n// 按钮的预定义\nexport const CHART_BUTTONS = [\n  { key: 'zoomin' },\n  { key: 'zoomout' },\n  { key: 'exright' }\n]\n\n// 预定义参数\nexport const CHART_ORDER = {\n  showMode: 'normal', // 'tiny'只显示买一卖一 'normal' 5档买卖盘\n  title: {\n    display: 'text' // none 不显示 btn 按钮 text 文字\n  }\n}\n// 预定义参数\nexport const CHART_KBAR = {\n  // buttons: ['zoomin', 'exright', 'zoomout'],\n  // title: { display: 'none' },\n  // scroll: {display: 'none'},\n  zoomInfo: {\n    index: 3,\n    list: [1, 2, 3, 5, 8, 13, 21]\n  },\n  scroll: {\n    display: 'none' // none不显示\n  },\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'K线' // 需要显示的文字信息\n  },\n  axisX: {\n    lines: 0,\n    display: 'none', // none不显示， both 两边各一个值, block ：根据lines每个块显示一个值 = 显示坐标\n    type: 'normal', // 有 day1 当日 day5 5日线 和 normal:日线 三种模式\n    // ??? 是否把这三种统一起来\n    format: 'date' // date time datetime normal tradetime(9:30) 根据交易时间此时 = 输出的信息格式    width: 50       // 显示宽度，web下\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示, both, noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price 保留一定小数位 vol 没有小数\n    },\n    right: {\n      display: 'both', // none不显示，noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // rate, price vol\n    }\n  },\n  lines: [{\n    // type: 'l_kbar',\n    className: ClDrawKBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    }\n    // 第一根线默认的key是跟随chart的hotKey变化而变化的，其他线要么自己有数据，要么根据hotKey加上公式计算出自己的key\n  },\n  {\n    className: ClDrawRight\n  },\n  {\n    className: ClDrawLine,\n    info: { // 输出在信息栏目的数据\n      txt: '5:',\n      labelY: 'value', // 从key中获取对应的数据标签 用于显示信息用\n      format: 'price'\n    },\n    formula: { // 数据生成方式，都需要基于基本数据，没有formula表示取绑定的数据\n      key: 'DAYM1', // 生成和获取数据的key，\n      command: `out = this.MA('close',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM2', // 获取数据的key，\n      command: `out = this.MA('close',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM3', // 获取数据的key，\n      command: `out = this.MA('close',20)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '60:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM4', // 获取数据的key，\n      command: `out = this.MA('close',60)` // 公式只能输出值到out中\n    }\n  }]\n}\n\nexport const CHART_VBAR = {\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'VOL' // 需要显示的文字信息\n  },\n  axisX: {\n    lines: 0,\n    display: 'both', // 左右两边显示\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      labelY: 'vol', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '5:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL1', // 获取数据的key，\n      command: `out = this.MA('vol',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL2', // 获取数据的key，\n      command: `out = this.MA('vol',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL3', // 获取数据的key，\n      command: `out = this.MA('vol',20)` // 公式只能输出值到out中\n    }\n  }]\n}\n\nexport const CHART_NOW = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'none', // none不显示，sides：两边各一个值, block：根据块大小每个块显示一个值 = 显示坐标\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    },\n    info: {\n      labelX: 'idx',\n      labelY: 'close'\n    }\n  },\n  {\n    className: ClDrawLine,\n    formula: {\n      key: 'NOWM1', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\nexport const CHART_NOWVOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'both', // 左右两边显示\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['decvol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      labelX: 'idx',\n      labelY: 'decvol',\n      color: 'vol'\n    }\n  }]\n}\n\nexport const CHART_DAY5 = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'none', // none不显示，both 边各一个值, block 根据块大小每个块显示一个值 = 显示坐标\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['close'], // 参与计算最大值的标签\n      minvalue: ['close'] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'close'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      showSort: 'idx'\n    },\n    formula: {\n      key: 'NOWDAY5', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\n\nexport const CHART_DAY5VOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'block',\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'nofoot', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'vol',\n      color: 'vol'\n    }\n  }]\n}\n\nexport const CHART_NORMAL = {\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'NORMAL'\n  },\n  axisX: {\n    lines: 0,\n    display: 'none',\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    },\n    right: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    }\n  },\n  lines: [{\n    className: ClDrawLine\n  }]\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawKBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawKBar (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    this.data = this.source.getData(key)\n    // console.log('ClDrawKBar', this.data, this.linkInfo);\n    this.codeInfo = this.source.getData('INFO')\n\n    let clr = this.color.red\n    _drawBegin(this.context, clr)\n    let open, close\n    let before = getValue(this.codeInfo, 'before', 0)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open < close || (open === close && close >= before)) {\n      // console.log('red',k, open, close,\n      // getValue(this.data, 'high', idx),\n      // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: false,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [close,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          open\n        ])\n      }\n    }\n    _drawEnd(this.context)\n    clr = this.color.green\n    _drawBegin(this.context, clr)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open > close || (open === close && close < before)) {\n        // console.log('green',k, open, close,\n        // getValue(this.data, 'high', idx),\n        // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [open,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          close\n        ])\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineRight 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  findNearTimeToIndex\n} from './cl.chart.tools'\nimport getValue, {\n  getSize\n} from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawRight (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n  this.symbol = father.layout.symbol\n\n  this.onPaint = function (key) {\n    this.data = this.source.getData(key)\n    this.rightData = this.source.getData('RIGHT')\n    if (getSize(this.rightData) < 1) return\n\n    const len = _getTxtWidth(this.context, '▲', this.symbol.font, this.symbol.pixel)\n    for (let i = 0; i < this.rightData.value.length; i++) {\n      const idx = findNearTimeToIndex(this.data, getValue(this.rightData, 'time', i))\n      const offset = idx - this.linkInfo.minIndex\n      const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n      if (xx < this.rectMain.left) {\n        continue\n      }\n      let clr = this.color.button\n      if (this.linkInfo.rightMode !== 'no') clr = this.color.vol\n      _drawTxt(this.context, xx - Math.floor(len / 2), this.rectMain.top + this.rectMain.height - this.symbol.pixel - this.symbol.spaceY,\n        '▲', this.symbol.font, this.symbol.pixel, clr, { y: 'top' })\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineVBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawVBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawVBar (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    this.data = this.source.getData(key)\n\n    _drawBegin(this.context, this.color.red)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) <= parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: this.color.sys === 'white',\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.red\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n    _drawBegin(this.context, this.color.green)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) > parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.green\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n//   按钮定义\n// ▲▼※★☆○●◎☉√↑←→↓↖↗↘↙‰℃∧∨△□▽♂♀﹡\n// ///////////////////////////////////////////////////////////////\nimport {\n  _drawRect,\n  _drawVline,\n  _drawHline,\n  _drawCircle,\n  _setLineWidth,\n  _drawTxt,\n  _drawBegin,\n  _drawSignCircle,\n  _drawSignPlot,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport { updateJsonOfDeep } from '../util/cl.tool'\n\nexport default function ClChartButton (father) {\n  const DEFAULT_BUTTON = {\n    shape: 'arc', // box range radio checkbox set(位置)\n    maxR: 4,\n    hotIdx: 0,\n    visible: true,\n    status: 'enabled' // disable focused : 热点\n  }\n  initCommonInfo(this, father)\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 25,\n      height: 25\n    }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_BUTTON)\n\n    this.info = cfg.info || [{\n      map: '+'\n    }]\n    // map: 如果不在以下 '+' '-' 'left' 'right'就表示直接显示字符串\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    this.config.maxR *= this.scale\n  }\n  this.setStatus = function (status) {\n    if (this.config.status !== status) {\n      this.config.status = status\n    }\n  }\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.onClick = function (event) {\n    if (!this.config.visible) return\n    if (this.info.length > 1) {\n      this.config.hotIdx++\n      this.config.hotIdx %= this.info.length\n      this.onPaint()\n    }\n    if (this.config.hotIdx >= 0 && this.config.hotIdx < this.info.length) {\n      this.callback({\n        self: this,\n        info: this.info[this.config.hotIdx]\n      })\n    } else {\n      this.callback({\n        self: this\n      })\n    }\n    event.break = true\n  }\n  // 事件监听\n  this.onPaint = function () { // 重画\n    if (!this.config.visible) return\n    _setLineWidth(this.context, this.scale)\n\n    if (this.config.status === 'disabled') _drawBegin(this.context, this.color.grid)\n    else _drawBegin(this.context, this.color.button)\n\n    const center = {\n      xx: Math.floor(this.rectMain.width / 2),\n      yy: Math.floor(this.rectMain.height / 2),\n      offset: 4 * this.scale\n    }\n\n    const info = this.info[this.config.hotIdx]\n    switch (this.config.shape) {\n      case 'set':\n        if (this.config.status === 'focused') {\n          _drawSignPlot(this.context, this.rectMain.left + center.xx,\n            this.rectMain.top + center.xx, {\n              r: Math.round(this.config.maxR),\n              clr: this.color.red\n            }\n          )\n          center.yy = center.xx\n        } else {\n          _drawSignCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, {\n            r: Math.round(this.config.maxR),\n            clr: this.color.vol\n          })\n        }\n        break\n      case 'arc':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'box':\n        _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n        break\n      case 'range':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'radio':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'checkbox':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      default:\n    }\n    _drawEnd(this.context)\n    if (this.config.status === 'disabled') _drawBegin(this.context, this.color.grid)\n    else _drawBegin(this.context, this.color.button)\n    switch (info.map) {\n      case '+':\n        _drawVline(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.offset,\n          this.rectMain.top + this.rectMain.height - center.offset)\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '-':\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case '*':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy - 2 * this.scale, '...',\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case 'left':\n      case 'right':\n        break\n      default:\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.symbol.font, this.layout.symbol.pixel, this.color.button, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisY 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  formatInfo\n} from '../util/cl.tool'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawAxisY (father, rectMain, align) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  this.linkInfo = father.father.linkInfo\n\n  this.static = father.static\n\n  this.align = align\n  this.axisY = father.config.axisY\n\n  this.maxmin = father.maxmin\n  this.text = father.layout.title\n\n  this.onPaint = function () {\n    if (this.axisY[this.align].display === 'none') return\n    if (this.linkInfo.hideInfo) return\n\n    let xx, yy\n    let value, clr\n\n    let posX\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    if (this.align === 'left') {\n      posX = this.axisPlatform === 'phone' ? 'start' : 'end'\n      xx = this.rectMain.left + offX\n      yy = this.rectMain.top + this.scale // 画最上面的\n    } else {\n      posX = this.axisPlatform === 'phone' ? 'end' : 'start'\n      xx = this.rectMain.left + this.rectMain.width - offX\n      yy = this.rectMain.top + this.scale // 画最上面的\n    }\n    // 画不画最上面的坐标\n    if (this.axisY[this.align].display !== 'noupper') {\n      yy = this.rectMain.top + this.scale // 画最上面的\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.red\n      value = formatInfo(\n        this.maxmin.max,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'top' })\n    }\n    // 画不画最下面的坐标\n    if (this.axisY[this.align].display !== 'nofoot') {\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.green\n      yy = this.rectMain.top + this.rectMain.height - this.scale\n      value = formatInfo(\n        this.maxmin.min,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'bottom' })\n    }\n    // 画其他的坐标线\n    const offy = this.rectMain.height / (this.axisY.lines + 1)\n\n    for (let i = 0; i < this.axisY.lines; i++) {\n      value = this.maxmin.max - offy * (i + 1) / this.maxmin.unitY\n      yy = this.rectMain.top + Math.round((i + 1) * offy)\n      clr = this.color.axis\n      if (this.axisY[this.align].middle !== 'none') {\n        if ((i + 1) < Math.round(this.axisY.lines / 2)) clr = this.color.red\n        if ((i + 1) > Math.round(this.axisY.lines / 2)) clr = this.color.green\n        if ((i + 1) === Math.round(this.axisY.lines / 2)) {\n          value = this.axisY[this.align].middle === 'zero' ? 0 : this.static.before\n        }\n      }\n      // console.log(this.static.before);\n\n      value = formatInfo(\n        value,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'middle' })\n    }\n  }\n}\n","// //////////////////////////////////////////////////\n// 以下是ClChartLine的实体定义  --- 画线类\n// //////////////////////////////////////////////////\n// 实际上就是获取某种类型数据，然后横坐标 0 开始排序，永远是数值型，但显示出什么要到对应的数组中找\n// 纵坐标根据数据类型，计算最大最小值，然后根据画线类型画出数据线，所有的不同全部在ClChart中处理\n// //////////////////////////////////////////////////\nimport {\n  _fillRect,\n  _drawRect,\n  _getImageData,\n  _putImageData,\n  _setLineWidth,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  findLabelToIndex,\n  setFixedLineFlags,\n  setMoveLineFlags\n} from './cl.chart.tools'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  copyJsonOfDeep,\n  offsetRect,\n  inArray,\n  isEmptyArray,\n  formatShowTime,\n  formatInfo,\n  inRangeX\n} from '../util/cl.tool'\n\nimport {\n  STOCK_TYPE_INDEX\n} from '../data/../cl.data.def'\nimport getValue, {\n  getSize,\n  fromIndexToTradeTime,\n  getMinuteCount\n} from '../data/cl.data.tools'\n\nimport ClChartButton from './cl.chart.button'\nimport ClChartScroll from './cl.chart.scroll'\nimport ClDrawAxisX from './cl.draw.axisX'\nimport ClDrawAxisY from './cl.draw.axisY'\nimport ClDrawCursor from './cl.draw.cursor'\nimport ClDrawGrid from './cl.draw.grid'\nimport ClDrawInfo from './cl.draw.info'\nimport ClDrawLine from './cl.draw.line'\nimport ClDrawVLine from './cl.draw.vline'\n\nexport default function ClChartLine (father) {\n  initCommonInfo(this, father)\n\n  this.linkInfo = father.linkInfo\n  this.static = this.father.dataLayer.static\n\n  this.data = {}\n  this.maxmin = {}\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 400,\n      height: 200\n    }\n\n    // console.log('---0--',this.rectMain);\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = copyJsonOfDeep(cfg.config)\n    // 这里直接赋值是因为外部已经设置好了配置才会开始初始化\n    this.buttons = cfg.buttons || []\n    this.scroll = cfg.config.scroll || {\n      display: 'none'\n    }\n    this.childCharts = {}\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n    // 初始化子窗口\n    this.childDraws = {}\n    this.setChildDraw()\n    this.childLines = {}\n    this.setChildLines()\n    // 初始化按钮\n    this.setButtons()\n    // 初始化滚动条\n    this.setScroll()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    if (this.config.zoomInfo !== undefined) {\n      this.linkInfo.unitX = this.config.zoomInfo.list[this.config.zoomInfo.index] * this.scale\n      if (this.linkInfo.unitX < this.scale) this.linkInfo.unitX = this.scale\n      this.linkInfo.spaceX = this.linkInfo.unitX / 4\n    }\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    // rectChart 画图区\n    // rectTitle rectMess\n    // rectAxisX\n    // rectScroll\n    // rectAxisYLeft rectAxisYRight\n    // rectGridLine 坐标线区域\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n    const axisInfo = {\n      width: this.layout.axisX.width\n    } //\n\n    // 计算title和mess矩形位置\n    this.rectTitle = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    this.rectMess = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: axisInfo.width,\n        height: this.layout.title.height\n      }\n      this.rectMess = {\n        left: this.rectChart.left + axisInfo.width + this.scale,\n        top: this.rectChart.top,\n        width: this.rectChart.width - axisInfo.width * 2,\n        height: this.layout.title.height\n      }\n    }\n\n    // 计算rectAxisX和rectScroll矩形位置\n    axisInfo.left = this.rectChart.left\n    axisInfo.right = this.rectChart.left + this.rectChart.width\n    axisInfo.top = this.rectTitle.top + this.rectTitle.height\n    axisInfo.bottom = this.rectChart.top + this.rectChart.height\n\n    if (this.axisPlatform !== 'phone') {\n      if (this.config.axisY.left.display !== 'none') axisInfo.left += this.layout.axisX.width\n      if (this.config.axisY.right.display !== 'none') axisInfo.right -= this.layout.axisX.width\n    }\n    if (this.config.axisX.display !== 'none') {\n      axisInfo.bottom -= this.layout.axisX.height\n    }\n    if (this.scroll.display !== 'none') {\n      axisInfo.bottom -= this.layout.scroll.size\n    }\n    // 此时已经可以得出画坐标线的区域了\n    this.rectGridLine = {\n      left: axisInfo.left,\n      top: axisInfo.top,\n      width: axisInfo.right - axisInfo.left,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYLeft = {\n      left: this.rectChart.left,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYRight = {\n      left: this.rectChart.left + this.rectChart.width - axisInfo.width,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n\n    this.rectChart = offsetRect(this.rectGridLine, this.layout.offset)\n\n    this.rectAxisX = {\n      left: 0,\n      top: axisInfo.bottom,\n      width: 0,\n      height: 0\n    }\n    if (this.config.axisX.display !== 'none') {\n      this.rectAxisX = {\n        left: axisInfo.left,\n        top: axisInfo.bottom + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.axisX.height\n      }\n    }\n    if (this.scroll.display !== 'none') {\n      this.rectScroll = {\n        left: axisInfo.left,\n        top: this.rectAxisX.top + this.rectAxisX.height + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.scroll.size\n      }\n    }\n  }\n  this.getLineDataKey = function (line) {\n    if (line.formula === undefined) return this.hotKey\n    return line.formula.key\n  }\n  this.setChildLines = function () {\n    // l_kbar，l_line，l_nowvol，l_vbar l_nowline\n    let line\n    let clr = 0\n    for (let i = 0; i < this.config.lines.length; i++) {\n      const ClassName = this.config.lines[i].className\n      line = new ClassName(this, this.rectChart)\n\n      this.childLines['NAME' + i] = line\n      line.hotKey = this.getLineDataKey(this.config.lines[i])\n      if (inArray(ClassName, [ClDrawLine, ClDrawVLine])) {\n        line.info = {\n          labelX: 'idx',\n          labelY: 'value'\n        }\n        if (this.config.lines[i].info !== undefined) line.info = this.config.lines[i].info\n        if (this.config.axisX.type === 'day5') {\n          // 专用于5日线跨天的连线问题\n          line.info.skips = getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n        if (line.info.color === undefined) {\n          line.info.color = this.color.line[clr % this.color.line.length]\n        }\n        clr++\n      }\n    }\n  }\n  this.setChildDraw = function () {\n    let draw\n    draw = new ClDrawCursor(this, this.rectGridLine, this.rectChart)\n    this.childDraws['CURSOR'] = draw\n\n    if (this.config.title.display !== 'none') {\n      draw = new ClDrawInfo(this, this.rectTitle, this.rectMess)\n      this.childDraws['TITLE'] = draw\n    }\n    if (this.config.axisY.left.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYLeft, 'left')\n      this.childDraws['AXISY_LEFT'] = draw\n    }\n    if (this.config.axisY.right.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYRight, 'right')\n      this.childDraws['AXISY_RIGHT'] = draw\n    }\n    if (this.config.axisX.display !== 'none') {\n      draw = new ClDrawAxisX(this, this.rectAxisX)\n      this.childDraws['AXISX'] = draw\n    }\n    draw = new ClDrawGrid(this, this.rectGridLine)\n    this.childDraws['GRID'] = draw\n    // 下面是line的定义\n  }\n  this.setScroll = function () {\n    if (this.scroll.display === 'none') return\n    const chart = new ClChartScroll(this)\n    chart.name = 'HSCROLL'\n    // this.father.bindEvent(chart);\n    this.childCharts[chart.name] = chart\n\n    chart.init({\n      rectMain: this.rectScroll,\n      config: {\n        width: 8\n      }\n    },\n    result => {\n      const self = result.self.father\n      if (self.father.linkInfo.minIndex !== result.minIndex) {\n        self.father.linkInfo.minIndex = result.minIndex\n        self.father.onPaint()\n      }\n    })\n  }\n  this.createButton = function (name) {\n    if (this.childCharts[name] !== undefined) return this.childCharts[name]\n    const chart = new ClChartButton(this)\n    chart.name = name\n    // this.father.bindEvent(chart);\n    this.childCharts[name] = chart\n    return chart\n  }\n  this.hasButton = function (key, buttons) {\n    for (let k = 0; k < buttons.length; k++) {\n      // console.log(buttons[k].key, key);\n      if (key === buttons[k].key) return true\n    }\n    return false\n  }\n  this.setButtons = function () {\n    let chart\n    let xx, yy\n    let ww = 25 * this.scale\n    if (this.hasButton('zoomin', this.buttons) || this.hasButton('zoomout', this.buttons)) {\n      chart = this.createButton('zoomin')\n      xx = Math.floor((this.rectChart.width - (ww + ww) * 2) / 4)\n      yy = this.rectChart.top + this.rectChart.height * 0.95 - ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '-'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index > 0) {\n          this.config.zoomInfo.index--\n          this.setZoomInfo(this.config.zoomInfo.index)\n          this.father.onPaint()\n        }\n      })\n      chart = this.createButton('zoomout')\n      xx += 2 * ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '+'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index < this.config.zoomInfo.list.length - 1) {\n          this.config.zoomInfo.index++\n          this.setZoomInfo(this.config.zoomInfo.index)\n          this.father.onPaint()\n        }\n      })\n    }\n    if (this.hasButton('exright', this.buttons)) {\n      chart = this.createButton('exright')\n      ww = _getTxtWidth(this.context, '前复权', this.layout.symbol.font, this.layout.symbol.pixel)\n      xx = this.rectMain.left + this.rectMain.width - ww - 2 * this.layout.symbol.spaceX\n      yy = (this.rectMess.height - this.layout.symbol.pixel - 2 * this.layout.symbol.spaceY) / 2\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: this.rectMess.top + yy,\n          width: ww + this.layout.symbol.spaceX,\n          height: this.rectMess.height - 2 * yy\n        },\n        config: {\n          shape: 'box'\n        },\n        info: [{\n          map: '不除权',\n          value: 'no'\n        },\n        {\n          map: '前复权',\n          value: 'forword'\n        }\n          // , {\n          //   map: '后复权',\n          //   value: 'back'\n          // }\n        ]\n      },\n      result => {\n        // const self = result.self.father;\n        this.father.linkInfo.rightMode = result.info.value\n        this.father.fastDrawEnd()\n        this.father.onPaint()\n      })\n      chart.hotIdx = 0\n    }\n  }\n  // //////////////////////////////////////\n  // 下面开始是功能性函数 主要用于简化主函数的结构\n  // //////////////////////////////////////\n  this.getDecimal = function (label) {\n    if (label === 'vol' || label === 'decvol') return 0\n    return this.static.decimal\n  }\n  this.addLine = function (line) {\n    // this.removeLine(line.name);\n    this.config.lines.push(line)\n  }\n  this.removeLine = function (name) {\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].name === undefined) continue\n      if (this.config.lines[i].name === name) {\n        this.config.lines.splice(i, 1)\n      }\n    }\n  }\n  this.setZoomInfo = function (index) {\n    this.linkInfo.unitX = this.config.zoomInfo.list[index] * this.scale\n    if (this.linkInfo.unitX < this.scale) this.linkInfo.unitX = this.scale\n    this.linkInfo.spaceX = this.linkInfo.unitX / 4\n    if (this.linkInfo.spaceX < this.scale) this.linkInfo.spaceX = this.scale\n\n    if (this.childCharts['zoomin']) {\n      if (this.config.zoomInfo.index === 0) this.childCharts['zoomin'].setStatus('disabled')\n      else this.childCharts['zoomin'].setStatus('enabled')\n    }\n    if (this.childCharts['zoomout']) {\n      if (this.config.zoomInfo.index === this.config.zoomInfo.list.length - 1) this.childCharts['zoomout'].setStatus('disabled')\n      else this.childCharts['zoomout'].setStatus('enabled')\n    }\n    this.father.fastDrawEnd()\n  }\n  this.setHotButton = function (chart) {\n    for (const name in this.childCharts) {\n      if (this.childCharts[name] === chart) {\n        this.childCharts[name].focused = true\n      } else {\n        this.childCharts[name].focused = false\n      }\n    }\n  }\n  // ////////////////////////////////////////////////\n  // 下面的函数为绘图函数，\n  // ////////////////////////////////////////////////\n\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  this.drawChildCharts = function () {\n    let top\n    // console.log('drawChildCharts', this.childCharts);\n    for (const name in this.childCharts) {\n      if (!this.childCharts[name].focused) {\n        this.childCharts[name].onPaint()\n      } else {\n        top = this.childCharts[name]\n      }\n    }\n    if (top) top.onPaint()\n  }\n  this.drawChildLines = function () {\n    for (const name in this.childLines) {\n      // console.log('..', this.childLines[name].hotKey);\n\n      if (this.childLines[name].hotKey !== undefined) {\n        this.childLines[name].onPaint(this.childLines[name].hotKey)\n      } else {\n        this.childLines[name].onPaint(this.hotKey)\n      }\n    }\n  }\n  // 按记录索引根据keys获取一组数据，数据为{MA:[]...} 主要提供给鼠标移动\n  this.getMoveData = function (index) {\n    let lines = this.config.lines\n    const out = []\n    if (!Array.isArray(lines)) return out\n\n    let value, info\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].info === undefined) continue\n      if (lines[k].info.labelY !== undefined) {\n        if (lines[k].formula === undefined) {\n          value = getValue(this.data, lines[k].info.labelY, index)\n          // console.log('getMoveData', this.data, lines[k].info.labelY, index, value);\n        } else {\n          value = getValue(this.father.getData(lines[k].formula.key), lines[k].info.labelY,\n            index - this.linkInfo.minIndex)\n        }\n        info = formatInfo(value, lines[k].info.format, this.static.decimal)\n        out.push({\n          index: k,\n          txt: lines[k].info.txt,\n          value: info\n        })\n      } else {\n        out.push({\n          index: k,\n          txt: lines[k].info.txt\n        })\n      }\n    }\n    // console.log('movedata', out);\n    return out\n  }\n  this.drawTitleInfo = function (index) {\n    if (this.config.title.display === 'none') return\n    if (index === undefined || index < 0 || index > this.linkInfo.maxIndex) index = this.linkInfo.maxIndex\n    this.childDraws['TITLE'].onPaint(this.getMoveData(index))\n  }\n  this.drawChildDraw = function (name) {\n    if (this.childDraws[name] !== undefined) {\n      if (name === 'TITLE') {\n        this.drawTitleInfo(this.linkInfo.moveIndex)\n      } else {\n        this.childDraws[name].onPaint()\n      }\n    }\n  }\n  this.onPaint = function () {\n    this.data = this.father.getData(this.hotKey)\n    this.locationData()\n    this.father.readyData(this.data, this.config.lines)\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n\n    this.drawChildDraw('GRID') // 先画线格\n\n    // 为画图做准备工作\n    this.readyDraw()\n    this.drawChildDraw('AXISX')\n    this.drawChildDraw('AXISY_LEFT')\n    this.drawChildDraw('AXISY_RIGHT')\n\n    this.drawChildLines() // 画出所有的线\n\n    this.drawChildDraw('TITLE')\n    this.drawChildCharts()\n\n    this.img = _getImageData(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n  }\n\n  // ///////////////////////////////////////////////////////////\n  // 画图前的准备工作\n  // ////////////////////////////////////////////////////////////\n  this.getMiddle = function (method) {\n    let middle = this.config.axisY.left.middle\n    if (method === 'fixedRight') middle = this.config.axisY.right.middle\n    if (middle === 'before') return this.static.before\n    if (middle === 'zero') return 0\n    return 0\n  }\n  this.calcMaxMin = function (data, extremum, start, stop) {\n    const mm = {\n      max: 0.0,\n      min: 0.0\n    }\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      mm.min = middle * (1 - 0.01)\n      mm.max = middle * (1 + 0.01)\n    }\n    if (data === undefined || isEmptyArray(data.value)) return mm\n\n    let value\n    if (start === undefined) start = 0\n    if (stop === undefined) stop = data.value.length - 1\n\n    for (let k = start; k <= stop; k++) {\n      if (!isEmptyArray(extremum.maxvalue)) {\n        for (let m = 0; m < extremum.maxvalue.length; m++) {\n          if (typeof (extremum.maxvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.maxvalue[m], k)\n          if (value > 0 && value > mm.max) {\n            mm.max = value\n          }\n        }\n      }\n      if (!isEmptyArray(extremum.minvalue)) {\n        for (let m = 0; m < extremum.minvalue.length; m++) {\n          if (typeof (extremum.minvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.minvalue[m], k)\n          if (mm.min === 0.0) mm.min = value\n          if (value > 0 && value < mm.min) {\n            mm.min = value\n          }\n        }\n      }\n    }\n    // //////////////////\n    if (!isEmptyArray(extremum.maxvalue)) {\n      for (let m = 0; m < extremum.maxvalue.length; m++) {\n        if (typeof (extremum.maxvalue[m]) === 'number') {\n          mm.max = extremum.maxvalue[m]\n          break\n        }\n      }\n    }\n    if (!isEmptyArray(extremum.minvalue)) {\n      for (let m = 0; m < extremum.minvalue.length; m++) {\n        if (typeof (extremum.minvalue[m]) === 'number') {\n          mm.min = extremum.minvalue[m]\n          break\n        }\n      }\n    }\n    // console.log(mm, this.getMiddle(extremum.method));\n\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      if (mm.max === mm.min) {\n        if (mm.max > middle) mm.min = middle\n        if (mm.min < middle) mm.max = middle\n      }\n      const maxrate = Math.abs(mm.max - middle) / middle\n      const minrate = Math.abs(middle - mm.min) / middle\n      if (maxrate < 0.01 && minrate < 0.01 &&\n        this.static.stktype !== STOCK_TYPE_INDEX) {\n        mm.min = middle * (1 - 0.01)\n        mm.max = middle * (1 + 0.01)\n      } else {\n        if (maxrate > minrate) {\n          mm.min = middle / (1 + maxrate)\n        } else {\n          mm.max = middle * (1 + minrate)\n        }\n      }\n      if (mm.min < 0) mm.min = 0\n    }\n    console.log('getmaxmin', mm, start, stop)\n\n    return mm\n  }\n  this.readyScroll = function () { // 计算最大最小值等\n    if (this.scroll.display === 'none') return\n    if (this.childCharts['HSCROLL'] !== undefined) {\n      let left = getValue(this.data, 'time', this.linkInfo.minIndex)\n      left = formatShowTime(this.data.key, left, this.father.dataLayer.tradeTime[0].begin)\n      let right = getValue(this.data, 'time', this.linkInfo.maxIndex)\n      right = formatShowTime(this.data.key, right,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n      let head = getValue(this.data, 'time', 0)\n      head = formatShowTime(this.data.key, head, this.father.dataLayer.tradeTime[0].begin)\n      let tail = getValue(this.data, 'time', this.data.value.length - 1)\n      tail = formatShowTime(this.data.key, tail,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n\n      this.childCharts['HSCROLL'].onChange({\n        head,\n        tail,\n        left,\n        right,\n        min: this.linkInfo.minIndex,\n        max: this.linkInfo.maxIndex,\n        range: this.data.value.length\n      })\n    }\n  }\n  this.getDataRange = function (data) {\n    const out = {\n      minIndex: -1,\n      maxIndex: -1\n    }\n    if (isEmptyArray(data.value) || isEmptyArray(this.data.value)) return out\n    const start = getValue(this.data, 'time', this.linkInfo.minIndex)\n    const stop = getValue(this.data, 'time', this.linkInfo.maxIndex)\n    for (let k = 0; k <= data.value.length - 1; k++) {\n      const tt = getValue(data, 'time', k)\n      if (tt >= start) {\n        out.minIndex = k\n        break\n      }\n    }\n    for (let k = data.value.length - 1; k >= 0; k--) {\n      const tt = getValue(data, 'time', k)\n      if (tt <= stop) {\n        out.maxIndex = k\n        break\n      }\n    }\n    return out\n  }\n  this.locationData = function () {\n    if (this.data === undefined) return\n    // console.log(this.father.dataLayer.tradeTime);\n    const size = getSize(this.data)\n    if (this.config.axisX.type === 'day1') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          maxCount: getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else if (this.config.axisX.type === 'day5') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          maxCount: 5 * getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else {\n      setMoveLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size\n        }\n      )\n      // if (size < 10) // 临时处理\n      //   this.setZoomInfo(this.config.zoomInfo.list.length - 1);\n    }\n  }\n  this.readyDraw = function () { // 计算最大最小值等\n    // 画滚动块\n    this.readyScroll()\n\n    // 求最大最小值\n    let mm, maxmin\n    // const force = true;   // 由于定义了没有在后面使用，因此注释掉\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].extremum === undefined) continue\n      if (isEmptyArray(this.config.lines[i].extremum.maxvalue) &&\n        isEmptyArray(this.config.lines[i].extremum.minvalue)) continue\n      // 只对第一个线和有需要的线计算最大最小值\n      // const ds = this.getLineDS(this.config.lines[i]);\n      const formula = this.config.lines[i].formula\n      if (formula !== undefined) {\n        const newdata = this.father.getData(formula.key)\n        const range = this.getDataRange(newdata)\n        mm = this.calcMaxMin(newdata, this.config.lines[i].extremum,\n          range.minIndex, range.maxIndex)\n      } else {\n        mm = this.calcMaxMin(this.data, this.config.lines[i].extremum,\n          this.linkInfo.minIndex, this.linkInfo.maxIndex)\n      }\n      if (maxmin === undefined) maxmin = mm\n      else {\n        maxmin.max = maxmin.max > mm.max ? maxmin.max : mm.max\n        maxmin.min = maxmin.min < mm.min ? maxmin.min : mm.min\n      }\n    } // for\n    this.maxmin.max = maxmin.max\n    this.maxmin.min = maxmin.min\n    this.maxmin.unitY = (this.rectChart.height - 2) / (this.maxmin.max - this.maxmin.min) // 一个单位价位多少像素\n\n    // console.log('maxmin', this.maxmin);\n  }\n\n  // ////////////////////////////////////////////////\n  // 下面的函数为事件处理函数，\n  // ////////////////////////////////////////////////\n  this.onClick = function (event) {\n    // console.log('click', this.axisPlatform);\n    if (this.axisPlatform !== 'phone1') {\n      this.linkInfo.showCursorLine = !this.linkInfo.showCursorLine\n      if (this.linkInfo.showCursorLine) {\n        this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event)\n      } else {\n        event.reDraw = true // 需要重画\n        this.father.eventLayer.boardEvent(this.father, 'onMouseOut', event)\n      }\n    }\n  }\n  this.onLongPress = function (event) {\n    this.linkInfo.showCursorLine = true\n    this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event, this)\n  }\n  this.onMouseOut = function (event) {\n    if (this.linkInfo.showCursorLine || event.reDraw) {\n      this.linkInfo.moveIndex = this.linkInfo.maxIndex\n      this.onPaint()\n    }\n  }\n  this.onMouseWheel = function (event) {\n    if (this.config.zoomInfo === undefined) return\n    const step = Math.floor(event.deltaY / 10)\n    if (step >= 1) {\n      if (this.config.zoomInfo.index > 0) {\n        if (this.linkInfo.maxIndex < this.data.value.length - 1) {\n          const mid = Math.floor((this.linkInfo.maxIndex + this.linkInfo.minIndex) / 2 + 1)\n          this.linkInfo.moveDate = getValue(this.data, 'time', mid)\n          this.linkInfo.minIndex = -2\n        } else {\n          this.linkInfo.minIndex = -1\n        }\n        this.config.zoomInfo.index--\n        this.setZoomInfo(this.config.zoomInfo.index)\n        this.father.onPaint()\n      }\n    } else if (step <= -1) {\n      if (this.config.zoomInfo.index < this.config.zoomInfo.list.length - 1) {\n        if (this.linkInfo.maxIndex < this.data.value.length - 1) {\n          const mid = Math.floor((this.linkInfo.maxIndex + this.linkInfo.minIndex) / 2 + 1)\n          this.linkInfo.moveDate = getValue(this.data, 'time', mid)\n          this.linkInfo.minIndex = -2\n        } else {\n          this.linkInfo.minIndex = -1\n        }\n        this.config.zoomInfo.index++\n        this.setZoomInfo(this.config.zoomInfo.index)\n        this.father.onPaint()\n      }\n    }\n  }\n  this.onKeyDown = function (event) {\n    switch (event.keyCode) {\n      case 38: // up\n        break\n      case 40: // down\n        break\n      case 37: // left\n        break\n      case 39: // right\n        break\n    }\n    // console.log('key:', event.keyCode);\n  }\n  this.onMouseMove = function (event) {\n    if (this.img === undefined) return\n    if (this.linkInfo.hideInfo) return\n    if (!this.linkInfo.showCursorLine) return\n    // this.draw_clear();\n    // 找到X坐标对应的数据索引\n    const mousePos = event.mousePos\n    _putImageData(this.context, this.img, this.rectMain.left, this.rectMain.top)\n\n    const mouseIndex = this.getMouseMoveData(mousePos.x)\n    let idx, valueY\n    let valueX = mouseIndex\n    if (mouseIndex > 0) {\n      if (this.config.axisX.type === 'day1' || this.config.axisX.type === 'day5') {\n        valueX = valueX % 240\n        valueX = fromIndexToTradeTime(valueX, this.father.dataLayer.tradeTime, this.father.dataLayer.tradeDate)\n        idx = findLabelToIndex(this.data, mouseIndex, 'idx')\n      } else {\n        valueX = getValue(this.data, 'time', mouseIndex)\n        idx = mouseIndex\n      }\n      if (inRangeX(this.rectChart, mousePos.x)) {\n        this.drawTitleInfo(idx)\n      }\n      if (this.linkInfo.moveIndex !== mouseIndex) {\n        this.linkInfo.moveIndex = mouseIndex\n        this.callback({\n          event: 'mousemove',\n          before: mouseIndex > 0 ? getValue(this.data, 'close', mouseIndex - 1) : getValue(this.data, 'open', 0),\n          data: this.data.value[mouseIndex]\n        })\n      }\n    }\n    // console.log('-----',valueX, mouseIndex, this.father.dataLayer.tradeTime);\n    this.childDraws['CURSOR'].onPaint(mousePos, valueX, valueY)\n  }\n\n  // 事件监听\n  // ////////////////////////////////////////////////////////////////\n  //   处理数据的函数集合\n  // ///////////////////////////////////////////////////////////////\n  this.getMouseMoveData = function (xpos) {\n    const idx = Math.round((xpos - this.rectChart.left) / (this.linkInfo.unitX + this.linkInfo.spaceX) - 0.5)\n    if (this.config.axisX.type === 'day1') {\n      return idx\n    } else if (this.config.axisX.type === 'day5') {\n      return idx\n    } else {\n      return this.linkInfo.minIndex + idx\n    }\n  }\n\n  // /// ClChart end.\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawCursor 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxtRect,\n  _drawLineAlone\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  inRangeX,\n  inRangeY,\n  formatShowTime,\n  formatInfo\n} from '../util/cl.tool'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawCursor (father, rectMain, rectChart) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain // 画十字线和边界标签\n  this.rectChart = rectChart // 鼠标有效区域\n\n  this.static = father.father.static\n  this.linkInfo = father.father.linkInfo\n\n  this.axisXInfo = father.config.axisX\n  this.axisYInfo = father.config.axisY\n\n  this.maxmin = father.maxmin\n  this.axisX = father.layout.axisX\n\n  this.onPaint = function (mousePos, valueX, valueY) {\n    // console.log(mousePos, this.rectChart);\n    if (inRangeX(this.rectChart, mousePos.x) === false) return\n\n    let txt\n    let xx = mousePos.x\n    let yy = mousePos.y\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    // 如果鼠标在本图区域，就画横线信息\n    if (inRangeY(this.rectChart, mousePos.y)) {\n      if (valueY === undefined) {\n        valueY = this.maxmin.max - (mousePos.y - this.rectChart.top) / this.maxmin.unitY\n      } else {\n        yy = (this.maxmin.max - valueY) * this.maxmin.unitY + this.rectChart.top\n      }\n      // console.log(mousePos, valueY );\n\n      _drawLineAlone(this.context, this.rectMain.left, yy, this.rectMain.left + this.rectMain.width, yy, this.color.grid)\n      let posX = this.axisPlatform === 'phone' ? 'start' : 'end'\n\n      if (this.axisYInfo.left.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.left.format,\n          this.static.decimal,\n          this.static.before)\n        xx = this.rectMain.left + offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n      if (this.axisYInfo.right.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.right.format,\n          this.static.decimal,\n          this.static.before)\n        posX = this.axisPlatform === 'phone' ? 'end' : 'start'\n        xx = this.rectMain.left + this.rectMain.width - offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n    }\n\n    _drawLineAlone(this.context, mousePos.x, this.rectMain.top, mousePos.x, this.rectMain.top + this.rectMain.height - 1, this.color.grid)\n    if (this.axisXInfo.display !== 'none') {\n      xx = mousePos.x\n      const th = Math.floor((this.axisX.height - this.axisX.pixel - this.scale) / 2)\n      yy = this.rectMain.top + this.rectMain.height + th\n      txt = formatShowTime(this.father.data.key, valueX)\n      const len = Math.round(_getTxtWidth(this.context, txt, this.axisX.font, this.axisX.pixel) / 2)\n      let posX = 'center'\n      if (xx - len < this.rectMain.left + offX) { xx = this.rectMain.left + offX; posX = 'start' }\n      if (xx + len > this.rectMain.left + this.rectMain.width - offX) {\n        xx = this.rectMain.left + this.rectMain.width - offX\n        posX = 'end'\n      }\n      _drawTxtRect(this.context, xx, yy, txt, {\n        font: this.axisX.font,\n        pixel: this.axisX.pixel,\n        spaceX: this.axisX.spaceX,\n        clr: this.color.txt,\n        bakclr: this.color.grid,\n        x: posX,\n        y: 'top'\n      })\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _fillRect,\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawInfo (father, rectMain, rectMess) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  this.rectMess = rectMess\n\n  this.linkInfo = father.father.linkInfo\n\n  this.title = father.layout.title\n  this.titleInfo = father.config.title\n\n  this.onPaint = function (message) {\n    if (this.titleInfo.display === 'none' || this.linkInfo.hideInfo) return\n\n    _fillRect(this.context, this.rectMain.left + this.scale, this.rectMain.top + this.scale,\n      this.rectMess.left + this.rectMess.width - 2 * this.scale,\n      this.rectMain.height - 2 * this.scale, this.color.back)\n\n    let clr = this.color.txt\n    const spaceY = Math.round((this.title.height - this.title.pixel) / 2) - this.scale\n    const yy = this.rectMess.top + spaceY\n\n    if (this.titleInfo.label !== undefined) {\n      _drawTxt(this.context, this.rectMain.left + this.scale, yy, this.titleInfo.label,\n        this.title.font, this.title.pixel, clr)\n    }\n    let xx = this.rectMess.left + this.scale\n    for (let i = 0; i < message.length; i++) {\n      clr = this.color.line[i]\n      if (message[i].txt !== undefined) {\n        _drawTxt(this.context, xx, yy, message[i].txt, this.title.font, this.title.pixel, clr)\n        xx += _getTxtWidth(this.context, message[i].txt, this.title.font, this.title.pixel) + this.title.spaceX\n      }\n      if (message[i].value === undefined) continue\n      _drawTxt(this.context, xx, yy, ' ' + message[i].value, this.title.font, this.title.pixel, clr)\n      xx += _getTxtWidth(this.context, ' ' + message[i].value, this.title.font, this.title.pixel) + this.title.spaceX\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisX 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  // _drawLineAlone,\n  _drawTxt\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  getDate,\n  formatShowTime\n} from '../util/cl.tool'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawAxisX (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.axisX = father.config.axisX\n\n  this.maxmin = father.maxmin\n  this.text = father.layout.axisX\n\n  this.onPaint = function () {\n    this.data = father.data\n    if (this.axisX.display === 'none') return\n\n    let xx, value, spaceX\n    xx = this.rectMain.left + this.text.spaceX\n\n    const yy = this.rectMain.top + this.rectMain.height / 2\n    if (this.axisX.display === 'block') {\n      let count = -1\n      let days = 0\n      const daymins = this.linkInfo.maxCount / (this.axisX.lines + 1)\n      spaceX = this.rectMain.width / (this.axisX.lines + 1)\n      for (let k = this.linkInfo.minIndex; k <= this.linkInfo.maxIndex; k++) {\n        const index = getValue(this.data, 'idx', k)\n        if (index < 0) continue\n        days = Math.floor(index / daymins)\n        // console.log('value----', days, index, count, this.linkInfo.maxCount);\n        if (days > count) {\n          count = days\n          xx = this.rectMain.left + spaceX / 2 + spaceX * count\n          value = getDate(getValue(this.data, 'time', k))\n          // console.log('value', value);\n          _drawTxt(this.context, xx, yy, value,\n            this.text.font, this.text.pixel, this.color.axis, { y: 'middle', x: 'center' })\n        }\n      }\n    } else {\n      if (this.axisX.format === 'tradetime') {\n        this.tradeTime = this.father.father.dataLayer.tradeTime\n        value = formatShowTime(this.data.key, 0, this.tradeTime[0].begin)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = formatShowTime(this.data.key, 0, this.tradeTime[this.tradeTime.length - 1].end)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      } else {\n        // _drawLineAlone(this.context, this.rectMain.left, this.rectMain.top,\n        //   this.rectMain.left + this.rectMain.width, this.rectMain.top, this.color.red)\n        value = getValue(this.data, 'time', this.linkInfo.minIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.min)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = getValue(this.data, 'time', this.linkInfo.maxIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.max)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      }\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawHline,\n  _drawVline\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawGrid (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.axisX = father.config.axisX\n  this.axisY = father.config.axisY\n\n  this.onPaint = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top)\n    // console.log(this.rectMain);\n    if (this.axisY.lines > 0) {\n      const offy = this.rectMain.height / (this.axisY.lines + 1)\n      for (let i = 0; i < this.axisY.lines; i++) {\n        _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + Math.round((i + 1) * offy))\n      }\n    }\n    if (this.axisX.display !== 'none') {\n      // console.log('---', this.rectMain);\n      _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + this.rectMain.height)\n    }\n    // 画纵坐标\n    if (this.axisX.lines > 0) {\n      const offx = this.rectMain.width / (this.axisX.lines + 1)\n      for (let i = 0; i < this.axisX.lines; i++) {\n        _drawVline(this.context, this.rectMain.left + Math.round((i + 1) * offx), this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      }\n    }\n    if (this.axisPlatform !== 'phone') {\n      _drawVline(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      _drawVline(this.context, this.rectMain.left + this.rectMain.width, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n// 可以拖动的滑动块定义\n// 支持锁定模式和自由模式，锁定模式滑动块固定大小，和传统滑动块类似，自由模式可左右选择范围，并返回值域，\n// 通常定义最大最小值，当前选定的最大最小值，并在鼠标放开后返回当前值域\n// ///////////////////////////////////////////////////////////////\nimport {\n  _getTxtWidth,\n  _setLineWidth,\n  _drawTxt,\n  _fillRect,\n  _drawRect,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  changeCursorStyle,\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  offsetRect,\n  inRect\n} from '../util/cl.tool'\n\nexport default function ClChartScroll (father) {\n  const DEFAULT_SCROLL = {\n    // display: 'none', // true\n    shape: 'fixed', // fixed 为固定宽度 free有边界\n    direct: 'horizontal', // ver 竖立 和横\n    range: 100,\n    select: { min: 40, max: 60 }, // min == beginIdx max = pageCount\n    status: 'enabled',\n    txt: {}\n  }\n  initCommonInfo(this, father)\n\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 25 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_SCROLL)\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    const count = this.config.range\n    let spaceX\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n\n    let start, stop, spaceY\n    if (this.config.direct === 'horizontal') {\n      spaceX = this.rectMain.width / (count - 1)\n      spaceY = this.rectMain.height - this.scale * 2\n      start = this.rectMain.left + spaceX * this.config.select.min\n      stop = this.rectMain.left + spaceX * this.config.select.max\n      if (this.config.shape === 'free') {\n        this.rectMin = {\n          left: start - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMax = {\n          left: stop - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMid = {\n          left: start + this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: stop - start - this.layout.scroll.size,\n          height: spaceY\n        }\n      } else {\n        this.rectMid = {\n          left: start,\n          top: this.rectMain.top + this.scale,\n          width: stop - start,\n          height: spaceY\n        }\n      }\n    } else {\n      // spaceX = this.rectMain.height / (count - 1);\n      // spaceY = this.rectMain.width - this.scale * 2;\n      // start = this.rectMain.top + spaceX * this.config.select;\n      // stop = this.rectMain.top + spaceX * this.config.select;\n    }\n  }\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.onPaint = function () { // 重画\n    _setLineWidth(this.context, this.scale)\n\n    this.drawClear()\n    this.drawGridline() // 先画线格\n    this.setPublicRect()\n    this.drawButton()\n  }\n  // ////////////////////////////////////////////////////////////////\n  // 事件监听\n  // ///////////////////////////////////////////////////////////////\n  this.onChange = function (info) {\n    this.config = updateJsonOfDeep(info, this.config)\n    if (this.config.select.max > this.config.range) this.config.select.max = this.config.range - 1\n    if (info.iscall) {\n      this.callback({ self: this, minIndex: this.config.select.min })\n    }\n  }\n  this.findMouseIndex = function (xpos) {\n    const count = this.config.range\n    const spaceX = this.rectMain.width / (count - 1)\n    const idx = Math.round((xpos - this.rectMain.left) / spaceX)\n    return idx\n  }\n  this.checkMin = function (min) {\n    if (min < 0) return 0\n    if (min > this.config.range - (this.config.select.max - this.config.select.min + 1)) {\n      return this.config.range - (this.config.select.max - this.config.select.min + 1)\n    }\n    return min\n  }\n  this.onInit = function () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  this.onMouseOut = function () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  this.onMouseDown = function (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos)) {\n      this.who = 'min'\n    } else if (inRect(this.rectMax, mousePos)) {\n      this.who = 'max'\n    } else if (inRect(this.rectMid, mousePos)) {\n      this.who = 'mid'\n      this.index = this.findMouseIndex(mousePos.x)\n    } else {\n      this.who = undefined\n    }\n  }\n\n  this.onMouseUp = function (event) {\n    if (this.config.shape !== 'free' && this.who === undefined) {\n      const mousePos = event.mousePos\n      const curIndex = this.findMouseIndex(mousePos.x)\n      let min = curIndex - Math.floor((this.config.select.max - this.config.select.min) / 2)\n      min = this.checkMin(min)\n      this.onChange({ min, iscall: true })\n    }\n    this.who = undefined\n  }\n  this.onMouseMove = function (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos) || inRect(this.rectMax, mousePos)) {\n      changeCursorStyle('col-resize')\n    } else if (inRect(this.rectMid, mousePos)) {\n      changeCursorStyle('move')\n    } else {\n      changeCursorStyle('default')\n    }\n    if (this.who !== undefined) {\n      let min, max\n      const curIndex = this.findMouseIndex(mousePos.x)\n      if (this.config.shape === 'free') {\n        if (curIndex < this.config.select.max) {\n          if (this.who === 'max') {\n            max = curIndex\n          } else if (this.who === 'min') {\n            min = curIndex\n          }\n        } else if (curIndex >= this.config.select.max) {\n          if (this.who === 'min') {\n            min = this.config.select.max\n            max = curIndex\n            this.who = 'max'\n          } else if (this.who === 'max') {\n            max = curIndex\n          }\n        }\n        this.onChange({ min, max, iscall: true })\n      } else {\n        min = this.config.select.min + curIndex - this.index\n        this.index = curIndex\n        min = this.checkMin(min)\n        this.onChange({ min, iscall: true })\n      }\n    }\n  }\n\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  this.drawGridline = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width + this.scale / 2, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  this.drawButton = function () {\n    if (this.config.direct === 'horizontal') {\n      // console.log('DDD', spaceX, spaceY, start, stop, this.layout.scroll.size);\n      const spaceY = (this.rectChart.height - this.layout.scroll.height) / 2\n      if (this.config.txt.head !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.scale, this.rectChart.top + spaceY,\n          this.config.txt.head,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.tail !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.rectChart.width - this.scale,\n          this.rectChart.top + spaceY, this.config.txt.tail,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n\n      _drawBegin(this.context, this.color.colume)\n      _drawRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height)\n      _fillRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height, this.color.box)\n      if (this.config.shape === 'free') {\n        _fillRect(this.context, this.rectMin.left, this.rectMin.top,\n          this.rectMin.width, this.rectMin.height, this.color.colume)\n        _fillRect(this.context, this.rectMax.left, this.rectMax.top,\n          this.rectMax.width, this.rectMax.height, this.color.colume)\n      }\n      _drawEnd(this.context)\n      const len = _getTxtWidth(this.context, this.config.txt.left, this.layout.scroll.font, this.layout.scroll.pixel) + 2 * this.scale\n      // console.log('len', len, this.rectMid.width);\n      if (this.config.txt.left !== undefined && this.rectMid.width > len) {\n        _drawTxt(this.context, this.rectMid.left + this.scale, this.rectMid.top + spaceY,\n          this.config.txt.left,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.right !== undefined && this.rectMid.width > 2 * len) {\n        _drawTxt(this.context, this.rectMid.left + this.rectMid.width - this.scale,\n          this.rectMid.top + spaceY, this.config.txt.right,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n    }\n    // else {\n\n    // }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是ClChart的实体定义\n// 一般只用操作这个类就可以实现功能了\n// 一个ClChart类只是调度框架下所属的Chart的画图，鼠标键盘事件，并不存储数据\n// 多图联动时，子图都到这里来获取相关信息。\n// //////////////////////////////////////////////////\n\nimport {\n  copyJsonOfDeep\n  // formatInfo\n} from '../util/cl.tool'\n// import ClChartButton from './cl.chart.button';\nimport ClChartLine from './cl.chart.line'\nimport ClChartOrder from './cl.chart.order'\n// import ClChartScroll from './cl.chart.scroll';\n// import getValue from '../data/cl.data.tools';\nimport { setColor, _systemInfo } from '../chart/cl.chart.init'\n\n// 必须包含 context，其他初始化信息参考initSystem\nfunction ClChart (context) {\n  const DEFAULT_LINKINFO = {\n    showMode: 'last',\n    // 'last' 以最新数据为定位，maxIndex=-1 表示显示最新的数据\n    // ‘move’ 当发生移动就设置该参数，-- 可能不需要\n    // fixed 固定显示一定范围的 分时图和5日线这一类固定数量的显示模式\n    // locked 指定某条记录放中间位置\n    fixed: { // 对应fixed模式\n      min: -1, // 最小记录, 为-1表示最小记录加上left\n      max: -1, // 最大记录, 为-1表式最大记录减去right\n      left: 20,\n      right: 20\n    },\n    locked: { // 只有当showMode==‘locked’模式才有作用\n      index: -1, // 当前锁定的记录号，\n      set: 0.5 // 表示锁定在中间，1表示锁定在最后一条记录，当前记录的百分比\n    },\n    minIndex: -1, // 当前画面的起始记录号 -1 表示第一次\n    maxIndex: -1, // 当前画面的最大记录号 -1 表示第一次\n    hotIndex: -1, // 循环时需要定位当前数据的指针定位\n    showCursorLine: false, // 是否显示光标信息\n    moveIndex: -1, // 当前鼠标所在位置的记录号 -1 表示没有鼠标事件或第一次\n    spaceX: 2, // 每个数据的间隔像素，可以根据实际情况变化，但不能系统参数里设定的spaceX小\n    unitX: 5, // 每天数据的宽度 默认为5， 可以在1..50之间切换\n    rightMode: 'no', // 除权模式\n    hideInfo: false // 是否显示价格\n  }\n  // 必须设置context\n  this.context = context\n  // 通过这个来判断是否为根\n  this.father = undefined\n  // //////////////////////////////////////////////\n  // 重新初始化Chart，会清理掉所有的图表和数据\n  // //////////////////////////////////////////////\n  this.initChart = function (dataLayer, eventLayer) {\n    // linkInfo 是所有子chart公用的参数集合，也是dataLayer应用的集合\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n    // this.checkConfig();\n    // 初始化子chart为空\n    this.childCharts = {}\n    // 设置数据层，同时对外提供设置接口\n    this.setDataLayer(dataLayer)\n    // 设置事件层，同时对外提供设置接口\n    this.setEventLayer(eventLayer)\n  }\n  this.clear = function () {\n    this.childCharts = {}\n    this.fastDraw = false\n    this.dataLayer.clearData()\n    // this.eventLayer.clear();\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n  }\n  // this.checkConfig = function() { // 检查配置有冲突的修正过来\n  //   this.linkInfo.unitX *= _systemInfo.scale;\n  //   this.linkInfo.spaceX *= _systemInfo.scale;\n  // }\n  this.getChart = function (key) {\n    return this.childCharts[key]\n  }\n  // //////////////////////////////////////////////\n  // 以下是设置chart的事件关联接口，element表示映射的chart类\n  // 所有事件由外部获取事件后传递到eventLayer后，再统一分发给相应的图表\n  // eventLayer中有针对html5的鼠标键盘事件处理接口，其他事件处理接口另外再做\n  // ////////////////////////////////////////////\n  this.getEventLayer = function () {\n    return this.eventLayer\n  }\n  this.setEventLayer = function (layer) {\n    if (layer === undefined) return\n    this.eventLayer = layer\n    this.eventLayer.bindChart(this) // 把chart绑定到事件处理层\n  }\n  // this.bindEvent = function (chart) {\n  //   this.eventLayer.bindEvent(chart);\n  // }\n  // //////////////////////////////////////////////\n  // 下面是绑定数据层，engine\n  // //////////////////////////////////////////////\n  this.getDataLayer = function () {\n    return this.dataLayer\n  }\n  this.setDataLayer = function (layer) {\n    if (layer === undefined) return\n    this.dataLayer = layer\n    layer.father = this // 告诉数据层\n    this.static = this.dataLayer.static\n  }\n  // 设置对应的chart基本的数据key\n  this.bindData = function (chart, key) {\n    // console.log('bindData', chart, key);\n    if (chart.hotKey !== key) {\n      this.linkInfo.showMode = 'last' // 切换数据后需要重新画图\n      this.linkInfo.minIndex = -1\n      chart.hotKey = key // hotKey 针对chart的数据都调用该数据源\n      this.fastDrawEnd() // 热点数据改变，就重新计算\n    }\n  }\n  // 以下是客户端设置data中数据的接口\n  this.initData = function (tradeDate, tradetime) {\n    this.dataLayer.initData(tradeDate, tradetime)\n  }\n  this.setData = function (key, fields, value) {\n    let info = value\n    if (typeof value === 'string') info = JSON.parse(value)\n    this.dataLayer.setData(key, fields, info)\n    this.fastDrawEnd() // 新的数据被设置，就重新计算\n  }\n  // 按key获取一个数组数据\n  this.getData = function (key) {\n    if (this.fastDraw) {\n      if (this.fastBuffer[key] !== undefined) {\n        return this.fastBuffer[key]\n      }\n    }\n    const out = this.dataLayer.getData(key, this.linkInfo.rightMode)\n    if (this.fastDraw) {\n      this.fastBuffer[key] = out\n    }\n    return out\n  }\n  this.readyData = function (data, lines) {\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].formula === undefined) continue\n      if (!this.fastDraw || (this.fastDraw && this.fastBuffer[lines[k].formula.key] === undefined)) {\n        // console.log('readyData', lines[k].formula, this.linkInfo);\n        this.dataLayer.makeLineData(\n          { data, minIndex: this.linkInfo.minIndex, maxIndex: this.linkInfo.maxIndex },\n          lines[k].formula.key,\n          lines[k].formula.command\n        )\n      }\n    }\n  }\n  // // 按记录索引根据keys获取一组数据，数据为{MA:[]...} 主要提供给鼠标移动\n  // this.getMoveData = function (lines, index) {\n  //   const out = [];\n  //   if (!Array.isArray(lines)) return out;\n\n  //   index -= this.linkInfo.minIndex;\n  //   let value, info;\n  //   for (let k = 0; k < lines.length; k++) {\n  //     if (lines[k].info === undefined) continue;\n  //     if (lines[k].info.labelY !== undefined) {\n  //       if (lines[k].formula === undefined) {\n  //         console.log(this.data);\n  //         value = getValue(this.data, lines[k].info.labelY, index);\n  //       } else {\n  //         value = getValue(this.getData(lines[k].formula.key), lines[k].info.labelY, index);\n  //       }\n  //       info = formatInfo(value, lines[k].info.format, this.static.decimal);\n  //       out.push({ index: k, txt: lines[k].info.txt, value: info });\n  //     } else {\n  //       out.push({ index: k, txt: lines[k].info.txt });\n  //     }\n  //   }\n  //   return out;\n  // }\n  // //////////////////////////////////////////////\n  // name是唯一的名字，名字一样会覆盖以前同名的类，\n  // className是调用什么类型的图，目前只支持 Line Order Button Scroll\n  // usercfg指该图特殊的配置\n  // callback 表示鼠标移动时返回的当前记录数据\n  // //////////////////////////////////////////////\n  this.createChart = function (name, className, usercfg, callback) {\n    // console.log(name, className, ClChartLine);\n\n    // if (!inArray(className, [\n    //   ClChartButton,\n    //   ClChartLine,\n    //   ClChartOrder,\n    //   ClChartScroll\n    // ])) return undefined;\n    // const chart = new className(this);\n\n    let chart\n    switch (className) {\n      case 'CHART.ORDER': chart = new ClChartOrder(this); break\n      case 'CHART.LINE': chart = new ClChartLine(this); break\n      default : chart = new ClChartLine(this); break\n    }\n\n    chart.name = name\n    this.childCharts[name] = chart\n\n    // this.bindEvent(chart);\n    chart.init(usercfg, callback) // 根据用户配置初始化信息框\n\n    return chart\n  }\n\n  // 以下是chart画图的接口\n  this.onPaint = function (chart) { // 需要重画时调用\n    this.fastDrawBegin()\n    // console.log('paint', this.childCharts);\n\n    for (const key in this.childCharts) {\n      if (chart !== undefined) {\n        if (this.childCharts[key] === chart) {\n          this.childCharts[key].onPaint()\n        }\n      } else {\n        this.childCharts[key].onPaint()\n      }\n    }\n    // this.fastDrawEnd();\n  }\n  // 用于同一组多图只取一次数据，这样可以加速显示，程序结构不会乱\n  this.fastDrawBegin = function () {\n    if (!this.fastDraw) {\n      this.fastBuffer = []\n      this.fastDraw = true\n    }\n  }\n  this.fastDrawEnd = function () {\n    this.fastDraw = false\n  }\n\n  // ///////////////////////////////////\n  // 设置通用参数API\n  // //////////////////////////////////\n  this.setHideInfo = function (isHideInfo) {\n    if (isHideInfo === undefined) return\n    if (isHideInfo !== this.linkInfo.hideInfo) {\n      this.linkInfo.hideInfo = isHideInfo\n      this.onPaint()\n    }\n  }\n  // 最多支持多级图层\n  this.setColor = function (syscolor, chart) { // 设置背景颜色方案\n    this.color = setColor(syscolor, _systemInfo.standard)\n    if (chart === undefined) chart = this\n    for (const key in chart.childCharts) {\n      chart.childCharts[key].color = this.color\n      if (chart.childCharts[key] !== undefined) {\n        this.setColor(syscolor, chart.childCharts[key])\n      }\n    }\n    this.onPaint()\n  }\n  // ///////////////////////////////////\n  //\n  // //////////////////////////////////\n\n  // this.makeLineData = function(data, key, formula, punit) {\n  //   return this.dataLayer.makeLineData(data, key, this.linkInfo.minIndex, this.linkInfo.maxIndex, formula);\n  // }\n}\n\nexport default ClChart\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n//   画买卖盘\n// ///////////////////////////////////////////////////////////////\n// 画买卖盘和Tick\n\nimport {\n  _fillRect,\n  _drawRect,\n  _drawHline,\n  _setLineWidth,\n  _drawTxt,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  fromTTimeToStr,\n  formatVolume,\n  formatPrice,\n  updateJsonOfDeep,\n  offsetRect\n} from '../util/cl.tool'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT, CHART_ORDER } from '../cl.chart.def'\nimport getValue from '../data/cl.data.tools'\nimport {\n  FIELD_NOW,\n  FIELD_NOW_IDX,\n  FIELD_TICK\n} from '../data/../cl.data.def'\n\nexport default function ClChartOrder (father) {\n  initCommonInfo(this, father)\n\n  this.linkInfo = father.linkInfo\n  this.static = this.father.dataLayer.static\n  console.log('ClChartOrder', this.static)\n\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg) {\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 300 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n\n    this.config = updateJsonOfDeep(cfg.config, CHART_ORDER)\n\n    this.showMode = cfg.config.showMode || 'normal'\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    this.txtLen = _getTxtWidth(this.context, '涨', this.layout.digit.font, this.layout.digit.pixel)\n    this.timeLen = _getTxtWidth(this.context, '15:30', this.layout.digit.font, this.layout.digit.pixel)\n    this.volLen = _getTxtWidth(this.context, '888888', this.layout.digit.font, this.layout.digit.pixel)\n    this.closeLen = _getTxtWidth(this.context, '888.88', this.layout.digit.font, this.layout.digit.pixel)\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n  }\n\n  // //////////\n  //\n  // ///////////\n  this.onClick = function (/* e */) {\n    if (this.isIndex) return // 如果是指数就啥也不干\n    if (this.showMode === 'normal') {\n      this.showMode = 'tiny'\n    } else {\n      this.showMode = 'normal'\n    }\n    this.onPaint()\n  }\n  // 事件监听\n  this.onPaint = function () { // 重画\n    // console.log(this.charttype);\n    console.log('ClChartOrder 1', this.static)\n    this.codeInfo = this.father.getData('INFO')\n    this.orderData = this.father.getData('NOW')\n    this.tickData = this.father.getData('TICK')\n    if (this.orderData === undefined || this.tickData === undefined) return\n    this.orderData.coinunit = this.static.coinunit\n    this.tickData.coinunit = this.static.coinunit\n    this.isIndex = getValue(this.codeInfo, 'type') === 0\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n    this.drawReady() // 数据准备\n\n    if (this.isIndex) {\n      this.drawIndex()\n    } else {\n      this.drawOrder()\n    }\n    this.drawTick()\n  }\n\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  this.drawReady = function () {\n    if (this.tickData === undefined) {\n      this.tickData = { key: 'TICK', fields: FIELD_TICK, value: [] }\n    }\n    if (this.orderData === undefined) {\n      this.orderData = { key: 'NOW', fields: FIELD_NOW, value: [] }\n    }\n    let yy\n    if (this.showMode === 'normal') {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 10\n    } else {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 2\n    }\n    if (this.isIndex) {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 4\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    } else {\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: yy,\n        width: this.rectChart.width,\n        height: this.layout.title.height\n      }\n    } else {\n      this.rectTitle = {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }\n    }\n    yy += this.rectTitle.height\n    this.rectTick = {\n      left: this.rectChart.left,\n      top: yy,\n      width: this.rectChart.width,\n      height: this.rectChart.height - yy - this.layout.digit.height / 2\n    }\n  }\n  this.getColor = function (close, before) {\n    if (close > before) {\n      return this.color.red\n    } else if (close < before) {\n      return this.color.green\n    } else {\n      return this.color.white\n    }\n  }\n  this.drawIndex = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    const offy = this.rectOrder.height / 3\n    const offx = this.rectOrder.width / 3\n    let xx, yy, len\n    let value\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n\n    xx = this.rectOrder.left + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '涨', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '跌', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + 2 * offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '平', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    const inow = { key: 'NOW', fields: FIELD_NOW_IDX, value: this.orderData.value }\n    yy = this.rectOrder.top + offy + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    // console.log('mmp', getValue(inow, 'ups1'));\n    value = formatVolume(getValue(inow, 'ups'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downs'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'mids'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + 2 * offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    yy = this.rectOrder.top + 2 * offy + Math.floor((offy - this.layout.digit.height) / 2)\n\n    value = formatVolume(getValue(inow, 'upvol'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downvol'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      const ticklen = _getTxtWidth(this.context, '分时成交', this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, '分时成交',\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n  }\n  this.drawOrder = function () {\n    const xpos = this.drawGridLine() // 先画线格\n    if (this.orderData === undefined || this.orderData.value.length < 1) {\n      return\n    }\n    const offx = (this.rectOrder.width - xpos - 2 * this.layout.digit.spaceX - this.closeLen - this.volLen) / 2\n\n    let mmpCount = 1\n    if (this.showMode === 'normal') {\n      mmpCount = 5\n    }\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    let xx, yy\n    let value, clr\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    for (let idx = mmpCount; idx >= 1; idx--) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'sell' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'sellvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n    for (let idx = 1; idx <= mmpCount; idx++) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'buy' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'buyvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n  this.drawTick = function () {\n    if (this.tickData === undefined || this.tickData.value.length < 1) return\n    const maxlines = Math.floor(this.rectTick.height / this.layout.digit.height) - 1 // 屏幕最大能显示多少条记录\n    const recs = this.tickData.value.length\n    const beginIndex = recs > maxlines ? recs - maxlines : 0\n    const offy = this.rectTick.height / maxlines\n\n    let xx, yy\n    let value, clr\n    let offx = (this.rectTick.width - 4 * this.layout.digit.spaceX - this.timeLen - this.closeLen - this.volLen) / 2\n    if (this.isIndex) offx = (this.rectTick.width - 3 * this.layout.digit.spaceX - this.timeLen - this.closeLen) / 2\n\n    yy = this.rectTick.top + 2 + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = recs - 1; idx >= beginIndex; idx--) {\n    // for (let idx = beginIndex; idx < recs; idx++) {\n      xx = this.rectTick.left + this.layout.digit.spaceX + this.timeLen\n      value = getValue(this.tickData, 'time', idx)\n      clr = this.color.txt\n      let str\n      if (idx === 0) {\n        str = fromTTimeToStr(value, 'minute')\n      } else {\n        str = fromTTimeToStr(value, 'minute', getValue(this.tickData, 'time', idx - 1))\n      }\n      _drawTxt(this.context, xx, yy, str,\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      if (this.isIndex) {\n        xx = this.rectTick.left + this.rectTick.width - this.layout.digit.spaceX\n\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n        yy += offy\n        continue\n      }\n      xx += offx + this.closeLen + this.layout.digit.spaceX\n\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n\n      value = getValue(this.tickData, 'decvol', idx)\n      // console.log(\"nowvol:\",value);\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n\n  this.drawGridLine = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    let mmpCount = 1\n    if (this.showMode === 'normal') {\n      mmpCount = 5\n    }\n    let len = 0\n    _drawHline(this.context, this.rectOrder.left, this.rectOrder.left + this.rectOrder.width, this.rectOrder.top + Math.floor(this.rectOrder.height / 2))\n\n    let xx, yy, value\n    const strint = ['①', '②', '③', '④', '⑤']\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    len = _getTxtWidth(this.context, '卖①', this.layout.title.font, this.layout.digit.height)\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = mmpCount - 1; idx >= 0; idx--) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '卖' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    for (let idx = 0; idx < mmpCount; idx++) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '买' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      if (this.showMode === 'normal') {\n        value = '分时成交 △'\n      } else {\n        value = '分时成交 ▽'\n      }\n      const ticklen = _getTxtWidth(this.context, value, this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n    return len\n  }\n}\n","'use strict'\n\n// /////////////////////////////////////////////////\n// 定义特定函数\n// ////////////////////////////////////////////////\n\nfunction _getTime () {\n  return new Date().getTime()\n}\n\nfunction _getDistance (xLen, yLen) {\n  return Math.sqrt(xLen * xLen + yLen * yLen)\n}\n/**\n * 获取向量的旋转方向\n */\nfunction _getRotateDirection (vector1, vector2) {\n  return vector1.x * vector2.y - vector2.x * vector1.y\n}\n\nfunction _getRotateAngle (vector1, vector2) {\n  let direction = _getRotateDirection(vector1, vector2)\n  direction = direction > 0 ? -1 : 1\n  const len1 = _getDistance(vector1.x, vector1.y)\n  const len2 = _getDistance(vector2.x, vector2.y)\n  const mr = len1 * len2\n  if (mr === 0) return 0\n  const dot = vector1.x * vector2.x + vector1.y * vector2.y\n  let r = dot / mr\n  if (r > 1) r = 1\n  if (r < -1) r = -1\n  return Math.acos(r) * direction * 180 / Math.PI\n}\n\nfunction _getTouchInfo (point, element) {\n  const mouseInfo = {\n    name: 'touch'\n  }\n  let srcRect = {\n    left: 0,\n    top: 0\n  }\n  if (element !== undefined) srcRect = element.getBoundingClientRect()\n  mouseInfo.offsetX = point.pageX - srcRect.left\n  mouseInfo.offsetY = point.pageY - srcRect.top\n  return mouseInfo\n}\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n\nexport default function ClEventWeb (father) {\n  this.father = father\n  this.eventCanvas = father.eventCanvas\n\n  this.bindEvent = function () {\n    this.addHandler('mousemove', this.mousemove.bind(this))\n    // this.addHandler('mousein', this.mousein.bind(this));\n    this.addHandler('mouseout', this.mouseout.bind(this))\n    this.addHandler('mousewheel', this.mousewheel.bind(this))\n    this.addHandler('mouseup', this.mouseup.bind(this))\n    this.addHandler('mousedown', this.mousedown.bind(this))\n\n    this.addHandler('keyup', this.keyup.bind(this))\n    this.addHandler('keydown', this.keydown.bind(this))\n\n    this.addHandler('touchstart', this.touchstart.bind(this))\n    this.addHandler('touchend', this.touchend.bind(this))\n    this.addHandler('touchmove', this.touchmove.bind(this))\n\n    this.addHandler('click', this.click.bind(this))\n  }\n  this.clearEvent = function () {\n    this.clearHandler('mousemove', this.mousemove.bind(this))\n    // this.clearHandler('mousein', this.mousein.bind(this));\n    this.clearHandler('mouseout', this.mouseout.bind(this))\n    this.clearHandler('mousewheel', this.mousewheel.bind(this))\n    this.clearHandler('mouseup', this.mouseup.bind(this))\n    this.clearHandler('mousedown', this.mousedown.bind(this))\n\n    this.clearHandler('keyup', this.keyup.bind(this))\n    this.clearHandler('keydown', this.keydown.bind(this))\n\n    this.clearHandler('touchstart', this.touchstart.bind(this))\n    this.clearHandler('touchend', this.touchend.bind(this))\n    this.clearHandler('touchmove', this.touchmove.bind(this))\n\n    this.clearHandler('click', this.click.bind(this))\n  }\n  this.addHandler = function (eventName, handler) {\n    if (this.eventCanvas.addEventListener) {\n      this.eventCanvas.addEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.attachEvent) {\n      this.eventCanvas.attachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = handler /* 直接赋给事件 */\n    }\n  }\n  /* 清理所有的绑定事件 */\n  this.clearHandler = function (eventName, handler) { /* Chrome */\n    if (this.eventCanvas.removeEventListener) {\n      this.eventCanvas.removeEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.deattachEvent) {\n      this.eventCanvas.deattachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = null /* 直接赋给事件 */\n    }\n  }\n  // /////////////////////\n  // 下面时对事件的处理\n  // /////////////////////\n  this.getEventInfo = function (event) {\n    return {\n      offsetX: event.offsetX,\n      offsetY: event.offsetY\n    }\n  }\n  this.mousemove = function (event) {\n    this.father.emitEvent('onMouseMove', this.getEventInfo(event))\n  }\n  this.mousein = function (event) {\n    this.father.emitEvent('onMouseIn', this.getEventInfo(event))\n  }\n  this.mouseout = function (event) {\n    this.father.emitEvent('onMouseOut', this.getEventInfo(event))\n  }\n  this.mousewheel = function (event) {\n    const info = this.getEventInfo(event)\n    info.deltaY = event.deltaY\n    this.father.emitEvent('onMouseWheel', info)\n  }\n  this.mouseup = function (event) {\n    this.father.emitEvent('onMouseUp', this.getEventInfo(event))\n  }\n  this.mousedown = function (event) {\n    this.father.emitEvent('onMouseDown', this.getEventInfo(event))\n  }\n  // 键盘\n  this.keyup = function (event) {\n    const info = this.getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyUp', info)\n  }\n  this.keydown = function (event) {\n    const info = this.getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyDown', info)\n  }\n  this.click = function (event) {\n    this.father.emitEvent('onClick', this.getEventInfo(event))\n  }\n  // 触摸\n  this.touchstart = function (event) {\n    this.__timestamp = new Date()\n    const point = event.touches ? event.touches[0] : event\n    this.startX = point.pageX\n    this.startY = point.pageY\n    window.clearTimeout(this.longTapTimeout)\n    // 两点接触\n    if (event.touches.length > 1) {\n      const point2 = event.touches[1]\n      const xLen = Math.abs(point2.pageX - this.startX)\n      const yLen = Math.abs(point2.pageY - this.startY)\n      this.touchDistance = _getDistance(xLen, yLen)\n      this.touchVector = {\n        x: point2.pageX - this.startX,\n        y: point2.pageY - this.startY\n      }\n      this.startTime = _getTime()\n    } else {\n      this.startTime = _getTime()\n      this.longTapTimeout = setTimeout(() => {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.srcElement))\n      }, 600)\n      if (this.previousTouchPoint) {\n        if (Math.abs(this.startX - this.previousTouchPoint.startX) < 10 &&\n          Math.abs(this.startY - this.previousTouchPoint.startY) < 10 &&\n          Math.abs(this.startTime - this.previousTouchTime) < 300) {\n          // this._emitEvent('onDoubleTap');\n          this.father.emitEvent('onDBClick', _getTouchInfo(point, event.srcElement))\n        }\n      }\n      this.previousTouchTime = this.startTime\n      this.previousTouchPoint = {\n        startX: this.startX,\n        startY: this.startY\n      }\n    }\n  }\n  this.touchend = function (event) {\n    /**\n     * 在X轴或Y轴发生过移动\n     */\n    const point = event.changedTouches ? event.changedTouches[0] : event\n    window.clearTimeout(this.longTapTimeout)\n    const timestamp = _getTime()\n    if ((this.moveX !== null && Math.abs(this.moveX - this.startX) > 10) ||\n      (this.moveY !== null && Math.abs(this.moveY - this.startY) > 10)) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onSwipe'); // 挥手\n        this.father.emitEvent('onSwipe', _getTouchInfo(point, event.srcElement))\n      }\n    } else if (timestamp - this.startTime < 2000) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onTap'); // 单击\n        this.father.emitEvent('onClick', _getTouchInfo(point, event.srcElement))\n      }\n      if (timestamp - this.startTime > 500) {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.srcElement))\n      }\n    }\n    this.startX = this.startY = this.moveX = this.moveY = null\n    this.previousPinchScale = 1\n    this.father.emitEvent('onMouseOut', _getTouchInfo(point, event.srcElement))\n  }\n  this.touchmove = function (event) {\n    if (new Date() - this.__timestamp < 150) {\n      return event\n    }\n    const timestamp = _getTime()\n    if (event.touches.length > 1) {\n      const xLen = Math.abs(event.touches[0].pageX - event.touches[1].pageX)\n      const yLen = Math.abs(event.touches[1].pageY - event.touches[1].pageY)\n      const touchDistance = _getDistance(xLen, yLen)\n      if (this.touchDistance) {\n        const pinchScale = touchDistance / this.touchDistance\n        const point = event.touches ? event.touches[0] : event\n        // this._emitEvent('onPinch', { scale: pinchScale - this.previousPinchScale }); // 缩放\n        const mouseinfo = _getTouchInfo(point, event.srcElement)\n        mouseinfo.scale = pinchScale - this.previousPinchScale\n        if (timestamp - this.startTime > 90) {\n          this.father.emitEvent('onPinch', mouseinfo)\n          this.startTime = _getTime()\n        }\n        // mouseinfo.deltaY = pinchScale - this.previousPinchScale;\n        // mouseinfo.deltaY *= -1000;\n        // // console.log('Zoom:', mouseinfo.deltaY);\n        // if (timestamp - this.startTime > 90) {\n        //   this.father.emitEvent('onMouseWheel', mouseinfo);\n        //   this.startTime = _getTime();\n        // }\n        this.previousPinchScale = pinchScale\n      }\n      if (this.touchVector) {\n        const vector = {\n          x: event.touches[1].pageX - event.touches[0].pageX,\n          y: event.touches[1].pageY - event.touches[0].pageY\n        }\n        const angle = _getRotateAngle(vector, this.touchVector)\n        this._emitEvent('onRotate', {\n          angle\n        })\n        this.touchVector.x = vector.x\n        this.touchVector.y = vector.y\n      }\n    } else {\n      window.clearTimeout(this.longTapTimeout)\n      const point = event.touches ? event.touches[0] : event\n      const deltaX = this.moveX === null ? 0 : point.pageX - this.moveX\n      const deltaY = this.moveY === null ? 0 : point.pageY - this.moveY\n      // this._emitEvent('onMove', { deltaX, deltaY });\n      const config = _getTouchInfo(point, event.srcElement)\n      config.deltaX = deltaX\n      config.deltaY = deltaY\n      this.father.emitEvent('onMouseMove', config)\n      this.moveX = point.pageX\n      this.moveY = point.pageY\n    }\n    event.preventDefault()\n  }\n}\n","'use strict'\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n// 鼠标事件\n//  onMouseMove // 移动\n//  onMouseIn  // 进入\n//  monMouseOut // 离开\n//  onMousewheel // 滚动\n//  onMouseUp  //\n//  onMouseDown //\n// 键盘事件\n//  onKeyUp\n//  onKeyDown\n// 触摸事件\n//  onTouchStart // 触摸开始\n//  onTouchEnd   // 触摸结束\n//  onTouchMove  // 触摸移动\n// 其他事件\n//  onClick // 点击\n//  onLongPress // 长按\n//  onPinch // 两指放大或缩小\n//  onRotate // 旋转\n//  onSwipe //左滑或右滑\nimport {\n  copyJsonOfDeep,\n  inRect\n} from '../util/cl.tool'\nimport ClEventWeb from './cl.event.web'\n\nexport const EVENT_DEFINE = [\n  'onMouseMove',\n  // 'onMouseIn',\n  'onMouseOut',\n  'onMousewheel',\n  'onMouseUp',\n  'onMouseDown',\n  'onKeyUp',\n  'onKeyDown',\n  'onClick',\n  'onDBClick',\n  'onLongPress',\n  'onPinch',\n  'onRotate',\n  'onSwipe'\n]\n\nexport default function ClEvent (syscfg) {\n  this.eventCanvas = syscfg.canvas // 对web来说就是虚拟接收事件的canvas\n  this.eventPlatform = syscfg.eventPlatform || 'html5'\n  this.scale = syscfg.scale\n  // console.log(this.eventCanvas, syscfg);\n\n  if (this.eventPlatform === 'react') {\n    // this.eventSource = new ClEventReact(this);\n  } else { // html5\n    this.eventSource = new ClEventWeb(this)\n  }\n  this.eventSource.bindEvent()\n  // 只需要绑定一个原始ClChart就可以了，子图的事件通过childCharts来判断获取\n  // 每个chart如果自己定义了对应事件就会分发，未定义不分发，分发后以返回值判断是否继续传递到下一个符合条件的chart\n  this.bindChart = function (source) {\n    this.firstChart = source\n    this.HotWin = undefined\n  }\n  this.clearEvent = function () {\n    this.eventSource.clearEvent()\n  }\n  // 下面是接收事件后,根据热点位置来判断归属于哪一个chart,并分发事件;\n  // config 必须包含鼠标位置 {offsetX:offsetY:}\n  this.emitEvent = function (eventName, config) {\n    // .....这里需要特殊分解处理Out的事件\n    if (eventName === 'onMouseOut' || eventName === 'onMouseMove') {\n      this.boardEvent(this.firstChart, eventName, config)\n      this.HotWin = undefined\n      return\n    }\n    const mousePos = this.getMousePos(config)\n    const chartPath = []\n    for (const name in this.firstChart.childCharts) {\n      // 判断鼠标在哪个区域\n      if (inRect(this.firstChart.childCharts[name].rectMain, mousePos)) {\n        // 取得事件冒泡顺序\n        this.findEventPath(chartPath, this.firstChart.childCharts[name], mousePos)\n        // 只处理符合条件的一个区域，重叠区域不考虑\n        break\n      }\n    }\n    // console.log('findEventPath', chartPath);\n    // console.log('chartPath', chartPath);\n    if (chartPath.length < 1) return\n    // 继承最初始的传入参数,从最顶层开始处理\n    const event = copyJsonOfDeep(config)\n    for (let k = chartPath.length - 1; k >= 0; k--) {\n      // if (eventName==='onClick') console.log(eventName, k, chartPath[k]);\n      if (chartPath[k][eventName] !== undefined) {\n        // 这里生成一个相对鼠标位置\n        event.mousePos = {\n          // x: mousePos.x - chartPath[k].rectMain.left,\n          // y: mousePos.y - chartPath[k].rectMain.top\n          x: mousePos.x,\n          y: mousePos.y\n        }\n        // 执行事件函数\n        chartPath[k][eventName](event)\n        // if (eventName==='onClick') console.log(event);\n        if (event.break) break // 跳出循环\n      }\n    }\n  }\n  // 用于鼠标联动时，向childCharts同一级别画图区域广播事件\n  //\n  this.boardEvent = function (chart, eventName, config, ignore) {\n    const event = copyJsonOfDeep(config)\n    const mousePos = this.getMousePos(config)\n\n    for (const name in chart.childCharts) {\n      if (chart.childCharts[name] === ignore) continue\n      if (chart.childCharts[name][eventName] === undefined) continue\n\n      event.mousePos = {\n        // x: mousePos.x - chart.childCharts[name].rectMain.left,\n        // y: mousePos.y - chart.childCharts[name].rectMain.top\n        x: mousePos.x,\n        y: mousePos.y\n      }\n      chart.childCharts[name][eventName](event)\n      if (event.break) break\n    }\n  }\n  this.findEventPath = function (path, chart, mousePos) {\n    path.push(chart)\n    // console.log('findEventPath', chart, chart.childCharts);\n    if (chart.childCharts === undefined) return\n\n    for (const name in chart.childCharts) {\n      if (inRect(chart.childCharts[name].rectMain, mousePos)) {\n        this.findEventPath(path, chart.childCharts[name], mousePos)\n      }\n    }\n  }\n  this.getMousePos = function (event) {\n    const mouseX = event.offsetX * this.scale\n    const mouseY = event.offsetY * this.scale\n    return {\n      x: mouseX,\n      y: mouseY\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是ClData的实体定义\n// 一般只用操作这个类就可以获取单个股票的所有数据\n// 不支持多个股票的数据，对于列表来说，这里只保存ID列表，其他的数据由实际画图自行获取，\n// //////////////////////////////////////////////////\n\nimport {\n  fromTradeTimeToIndex,\n  fromIndexToTradeTime,\n  checkZero,\n  getSize,\n  checkDayZero,\n  checkDay5,\n  updateStatic,\n  findDateInDay,\n  findIndexInMin,\n  matchDayToWeek,\n  matchDayToMon,\n  getMinuteCount,\n  transExrightMin,\n  transExrightDay\n} from './cl.data.tools'\nimport {\n  FIELD_INFO,\n  FIELD_CODE,\n  FIELD_DAY,\n  FIELD_MIN,\n  FIELD_TICK,\n  FIELD_DAY5,\n  FIELD_NOW,\n  FIELD_ILINE,\n  FIELD_ENOW\n} from '../cl.data.def'\nimport {\n  getDate,\n  isEmptyArray,\n  copyArrayOfDeep\n} from '../util/cl.tool'\nimport {\n  ClFormula\n} from '../formula/cl.formula'\n// 只保存一只股票的信息，当前日期，开收市时间\n\nexport default function ClData () {\n  // this.formula = new ClFormula();\n  this.static = {\n    stktype: 1,\n    volunit: 100,\n    coinunit: 100,\n    decimal: 2,\n    before: 1000,\n    stophigh: 1100,\n    stoplow: 900\n  }\n\n  // 只保存一只股票的信息，当前日期，开收市时间\n  this.initData = function (tradeDate, tradetime) {\n    this.formula = new ClFormula()\n    this.clearData()\n    if (tradetime === undefined) {\n      this.tradeTime = [{\n        begin: 930,\n        end: 1130\n      },\n      {\n        begin: 1300,\n        end: 1500\n      }\n      ]\n    } else {\n      this.tradeTime = tradetime\n    }\n\n    if (tradeDate === undefined) {\n      this.tradeDate = getDate() // 得到当天的日期\n    } else {\n      this.tradeDate = tradeDate // 最近一个交易日期，并不一定等于今天的日期，比如节假日期间\n    }\n  }\n  // 包含一个股票所有的数据,以便于以后做公式系统也使用这个数据定义\n  this.clearData = function () {\n    this.InData = [] // 数据 json格式数据 {key:..,fields:.., value:[[],[]...]}\n    this.OutData = [] // 专门用于获取数据时临时产生的数据\n  }\n  // //////////////////////\n  // 下面是设置数据的方法\n  // ////////////////////\n  this.setData = function (key, fields, value) {\n    if (value === undefined) value = []\n    if (this.InData[key] === undefined) this.InData[key] = {}\n    switch (key) {\n      case 'DAY5':\n        value = checkDay5(value, this.static.coinunit, this.tradeDate, this.tradeTime)\n        break\n      case 'NOW':\n      case 'ENOW':\n        this.flushNowData(key, value)\n        break\n      case 'MIN':\n      case 'DAY':\n        value = checkDayZero(value, this.tradeDate)\n        break\n      case 'INFO':\n        this.static = updateStatic(FIELD_INFO, value)\n        break\n      case 'CODE':\n        this.static = updateStatic(FIELD_CODE, value)\n        break\n    }\n    // // 设置了CODE或者INFO后，把一些常用的数取出来放到static中\n    // 仅仅接收以上和 MIN5 RIGHT 等原始数据，周月年和其他周期分钟线，全部通过计算获取\n    this.InData[key] = {\n      key,\n      fields\n    }\n    this.InData[key].value = copyArrayOfDeep(value)\n  }\n\n  this.flushTick = function (nowdata, fields) {\n    // if (this.static.stktype == 0) return ;\n    if (getSize(this.InData['TICK']) < 1) {\n      if (nowdata[fields.vol] > 0) {\n        this.InData['TICK'] = {\n          key: 'TICK',\n          fields: FIELD_TICK,\n          value: [nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]]\n        }\n      }\n    } else {\n      if (this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.vol] < nowdata[fields.vol] ||\n        this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.close] !== nowdata[fields.close]) {\n        // 成交量变化才生成tick,或收盘价不一样\n        this.InData['TICK'].value.push([nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]])\n      }\n    }\n  }\n  this.flushMin = function (nowdata, fields) {\n    if (this.InData['MIN'] === undefined) {\n      this.InData['MIN'] = {\n        key: 'MIN',\n        fields: FIELD_MIN,\n        value: [\n          fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime),\n          nowdata[fields.open],\n          nowdata[fields.high],\n          nowdata[fields.low],\n          nowdata[fields.close],\n          nowdata[fields.vol],\n          nowdata[fields.money]\n        ]\n      }\n    } else {\n      const index = fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime)\n      const checked = findIndexInMin(this.InData['MIN'], index)\n      if (checked.status === 'old') {\n        if (this.InData['MIN'].value[checked.index][fields.high] < nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.high] = nowdata[fields.close]\n        }\n        if (this.InData['MIN'].value[checked.index][fields.low] > nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.low] = nowdata[fields.close]\n        }\n        this.InData['MIN'].value[checked.index][fields.close] = nowdata[fields.close]\n        this.InData['MIN'].value[checked.index][fields.vol] = nowdata[fields.vol]\n        this.InData['MIN'].value[checked.index][fields.money] = nowdata[fields.money]\n      } else if (checked.status === 'new') {\n        this.InData['MIN'].value.push([index, nowdata[fields.close], nowdata[fields.close],\n          nowdata[fields.close], nowdata[fields.close], nowdata[fields.vol], nowdata[fields.money]\n        ])\n      }\n    }\n  }\n  // 当有新的NOW进来时，需要对TICK和当日MIN线进行更新，\n  this.flushNowData = function (key, nowdata) {\n    if (nowdata.length < 1) return\n    let fields = FIELD_NOW\n    if (key === 'ENOW') fields = FIELD_ENOW\n    if (checkZero(nowdata, fields)) return\n\n    // 先处理TICK\n    this.flushTick(nowdata, fields)\n\n    // 再处理Min\n    this.flushMin(nowdata, fields)\n  }\n\n  // //////////////////////\n  // 下面是获取数据的方法,先从OutData获取，没有数据就从InData数据中获取\n  // ////////////////////\n  this.getData = function (key, rightMode) {\n    switch (key) {\n      case 'DAY':\n        this.OutData['DAY'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['DAY'].value = this.mergeDay(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 对原始数据不做变更\n        break\n      case 'WEEK':\n        this.OutData['WEEK'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['WEEK'].value = this.mergeWeek(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'MON':\n        this.OutData['MON'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['MON'].value = this.mergeMon(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'DAY5':\n        this.OutData['DAY5'] = {\n          key,\n          fields: FIELD_DAY5\n        }\n        this.OutData['DAY5'].value = this.mergeDay5(this.InData['DAY5'], this.InData['MIN'])\n        // 每次都从日线计算生成\n        break\n      case 'M5':\n      case 'M15':\n      case 'M30':\n      case 'M60':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData[key].value = this.makeMinute(key, this.InData[key], this.InData['MIN'], rightMode)\n        break\n      case 'MIN':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_MIN\n        }\n        this.OutData[key].value = this.updateMinute(this.InData[key])\n        break\n    }\n    // 先找Out中的数据，没有就找In的数据\n    return this.OutData[key] ? this.OutData[key] : this.InData[key]\n  }\n  this.updateMinute = function (source) {\n    let out = copyArrayOfDeep(source.value)\n\n    let allmoney\n    for (let k = 0; k < out.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          allmoney = out[k][FIELD_MIN.vol] * out[k][FIELD_MIN.close] / this.static.coinunit\n        } else {\n          allmoney += (out[k][FIELD_MIN.vol] - out[k - 1][FIELD_MIN.vol]) * out[k][FIELD_MIN.close] / this.static.coinunit\n        }\n        out[k][FIELD_MIN.allmoney] = allmoney\n      } else {\n        // value[k][fields.allmoney] = value[k][fields.money];\n      }\n    }\n    return out\n  }\n  this.mergeDay = function (source, now, rightMode) {\n    let out = copyArrayOfDeep(source.value)\n    if (now !== undefined && !checkZero(now.value, now.fields)) {\n      const checked = findDateInDay(source, getDate(now.value[now.fields.time]))\n      if (checked.finded) {\n        out[checked.index] = [\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ]\n      } else {\n        out.push([\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ])\n      }\n    }\n    if (this.InData['RIGHT'] && rightMode !== 'none') {\n      out = transExrightDay(out, this.static.coinunit, this.InData['RIGHT'].value, rightMode,\n        0, out.length - 1)\n    }\n    // this.config.start,this.config.stop);\n\n    return out\n  }\n  this.mergeWeek = function (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToWeek(out)\n    // 合并周线\n  }\n  this.mergeMon = function (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToMon(out)\n    // 合并月线\n  }\n  this.mergeDay5 = function (source, min) {\n    let out = []\n\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        return out\n      }\n    }\n    if (min === undefined || isEmptyArray(min.value)) {\n      return out\n    }\n    const daymins = getMinuteCount(this.tradeTime) * 4\n    let money\n    for (let k = 0; k < min.value.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          money = min.value[k][min.fields.vol] * min.value[k][min.fields.close] / this.static.coinunit\n        } else {\n          money += (min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol]) * min.value[k][min.fields.close] / this.static.coinunit\n        }\n      } else {\n        money = min.value[k][min.fields.money]\n      }\n      out.push([\n        fromIndexToTradeTime(min.value[k][min.fields.idx], this.tradeTime, this.tradeDate),\n        min.value[k][min.fields.close],\n        k === 0 ? min.value[k][min.fields.vol] : min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol],\n        daymins + min.value[k][min.fields.idx],\n        min.value[k][min.fields.vol],\n        money\n      ])\n    }\n    // console.log(out);\n    return out\n  }\n  // source历史分钟线 nowmin当日分钟线\n  this.makeMinute = function (outkey, source, nowmin, rightMode) {\n    let out = []\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      out = transExrightMin(out, this.static.coinunit, this.InData['RIGHT'].value, rightMode,\n        // this.config.start,this.config.stop);\n        0, out.length - 1)\n\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        // 已经是最新的数据了\n        return out\n      }\n    }\n    // 没有原始数据或者未收市，需要把当日的nowmin合并\n    if (nowmin !== undefined && !isEmptyArray(nowmin.value)) {\n      let offset = 5\n      if (outkey === 'M15') offset = 15\n      if (outkey === 'M30') offset = 30\n      if (outkey === 'M60') offset = 60\n      out = this.mergeNowMinToMin(out, nowmin, offset) // 当日的分钟线转成分钟线，索引转时间的问题\n    }\n    // out = matchMinToMinute(out, outkey);\n    return out\n  }\n\n  this.mergeNowMinToMin = function (source, min, offset) {\n    const curMin = []\n    let sumVol = 0\n    let sumMoney = 0\n\n    let hasData = false\n    let stopIdx = 4\n\n    for (let k = 0; k < min.value.length; k++) {\n      const curIndex = min.value[k][min.fields.idx]\n      if (curIndex < 0) continue\n      if (curIndex > stopIdx) {\n        if (hasData) {\n          curMin[min.fields.vol] = min.value[k][min.fields.vol] - sumVol\n          curMin[min.fields.money] = min.value[k][min.fields.money] - sumMoney\n          sumVol = min.value[k][min.fields.vol]\n          sumMoney = min.value[k][min.fields.money]\n\n          curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n          source.push(copyArrayOfDeep(curMin))\n        }\n        stopIdx = (Math.floor(curIndex / offset) + 1) * offset - 1\n        curMin[min.fields.open] = min.value[k][min.fields.open]\n        curMin[min.fields.high] = min.value[k][min.fields.high]\n        curMin[min.fields.low] = min.value[k][min.fields.low]\n        curMin[min.fields.close] = min.value[k][min.fields.close]\n        hasData = true\n      } else { // curIndex 在0-5之间\n        if (hasData) {\n          curMin[min.fields.high] = curMin[min.fields.high] > min.value[k][min.fields.high]\n            ? curMin[min.fields.high] : min.value[k][min.fields.high]\n          curMin[min.fields.low] = curMin[min.fields.low] < min.value[k][min.fields.low] ||\n            min.value[k][min.fields.low] === 0\n            ? curMin[min.fields.low] : min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n        } else {\n          curMin[min.fields.open] = min.value[k][min.fields.open]\n          curMin[min.fields.high] = min.value[k][min.fields.high]\n          curMin[min.fields.low] = min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n          hasData = true\n        }\n      }\n    } // for i\n    if (hasData) {\n      curMin[min.fields.vol] = min.value[min.value.length - 1][min.fields.vol] - sumVol\n      curMin[min.fields.money] = min.value[min.value.length - 1][min.fields.money] - sumMoney\n      curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n      source.push(copyArrayOfDeep(curMin))\n    }\n    return source\n  }\n\n  // /////////////////////////////////////////\n  //  以下为公司系统，自由计算的定义\n  // /////////////////////////////////////////\n  this.makeLineData = function (source, outkey, formula) {\n    const value = this.formula.runSingleStock(source, formula)\n    if (this.OutData[outkey] === undefined) {\n      this.OutData[outkey] = {\n        outkey,\n        fields: FIELD_ILINE,\n        value\n      }\n    } else {\n      this.OutData[outkey].value = value\n      // 返回的值都是真实的值，不用再除单位了，具体显示几个小数点，由坐标的类别来定，\n    }\n    return this.OutData[outkey]\n  }\n} // end.\n","'use strict'\n\nimport ClChart from './chart/cl.chart'\nimport ClEvent from './event/cl.event'\nimport ClData from './data/cl.data'\n\nimport * as ClChartDef from './cl.chart.def'\nimport * as ClDataDef from './cl.data.def'\n\nimport {\n  initSystem\n} from './chart/cl.chart.init'\n\nexport const DEF_CHART = ClChartDef\nexport const DEF_DATA = ClDataDef\n\n// ///////////////////////////\n//  下面是一个接口API函数\n// ///////////////////////////\n// 针对单一的Chart（一个股票对应一组数据图表）\n// 多个股票对应多图需要各自设定对应关系\n// cfg 为以下区域\n//   runPlatform: 'normal', // 支持其他平台，其他平台（如微信）可能需要做函数替代和转换\n//   axisPlatform: 'phone', // 'web' 对坐标显示的区别\n//   eventPlatform: 'html5', // 'react'所有事件\n//   scale: 1, // 屏幕的放大倍数，该常量会经常性使用，并且是必须的\n//   standard: 'china',  // 画图标准，美国’usa‘，需要调整颜色\n//   sysColor: 'black'  // 色系，分白色和黑色系\n// ///////////////////////////////////\n//   context:  // 画布\n//   canvas:   // 用于接受事件处理的\n// ///////////////////////////////////\nexport function createSingleChart (cfg) {\n  initSystem(cfg)\n  const chart = new ClChart(cfg.context)\n  const event = new ClEvent(cfg)\n  const data = new ClData()\n\n  chart.initChart(data, event)\n  return chart\n}\n\n// ///////////////////////////////////\n//   多股票同列的处理\n//   context:  // 画布\n//   canvas:   // 用于接受事件处理的\n//   charts: [name1:{},name2:{},name2:{}...]\n// 返回一组chart，每组chart按名字存在一个json数据结构里，方便使用\n// ///////////////////////////////////\nexport function createMulChart (cfg) {\n  initSystem(cfg)\n  const event = new ClEvent(cfg)\n  const chartList = {}\n  for (const key in cfg.charts) {\n    const chart = new ClChart(cfg.context)\n    const data = new ClData()\n    chart.initChart(data, event)\n    chartList[key] = chart\n  }\n  return chartList\n}\n"],"sourceRoot":""}