{"version":3,"sources":["webpack://ClChart/webpack/universalModuleDefinition","webpack://ClChart/webpack/bootstrap","webpack://ClChart/./src/util/cl.tool.js","webpack://ClChart/./src/data/cl.data.tools.js","webpack://ClChart/./src/cl.data.def.js","webpack://ClChart/./src/formula/cl.formula.js","webpack://ClChart/./src/util/cl.draw.js","webpack://ClChart/./src/chart/cl.chart.tools.js","webpack://ClChart/./src/chart/cl.chart.init.js","webpack://ClChart/./src/chart/cl.draw.kbar.js","webpack://ClChart/./src/chart/cl.draw.line.js","webpack://ClChart/./src/chart/cl.draw.right.js","webpack://ClChart/./src/chart/cl.draw.vline.js","webpack://ClChart/./src/cl.chart.def.js","webpack://ClChart/./src/chart/cl.draw.vbar.js","webpack://ClChart/./src/chart/cl.draw.axisY.js","webpack://ClChart/./src/chart/cl.chart.line.js","webpack://ClChart/./src/chart/cl.draw.cursor.js","webpack://ClChart/./src/chart/cl.draw.info.js","webpack://ClChart/./src/chart/cl.draw.axisX.js","webpack://ClChart/./src/chart/cl.draw.grid.js","webpack://ClChart/./src/chart/cl.chart.scroll.js","webpack://ClChart/./src/chart/cl.chart.button.js","webpack://ClChart/./src/chart/cl.chart.js","webpack://ClChart/./src/chart/cl.chart.order.js","webpack://ClChart/./src/event/cl.event.web.js","webpack://ClChart/./src/event/cl.event.rn.js","webpack://ClChart/./src/event/cl.event.js","webpack://ClChart/./src/data/cl.data.js","webpack://ClChart/./src/plugins/cl.seer.def.js","webpack://ClChart/./src/plugins/cl.seer.js","webpack://ClChart/./src/plugins/cl.register.js","webpack://ClChart/./src/cl.api.js"],"names":["root","factory","exports","module","define","amd","ClChart","window","t","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","e","addPreZero","v","slice","getMTime","ttime","mtime","seconds","Date","parseInt","isNaN","getDate","getFullYear","getMonth","getMinute","getHours","getMinutes","getDayWeek","day","Math","floor","getDay","getDayMon","_dayToTTime","getDayGap","beginDay","endDay","fromTTimeToStr","format","ttimePre","getSeconds","getMinuteGap","beginMin","endMin","getMinuteOffset","minute","offset","mincount","copyArrayOfDeep","obj","out","Array","isArray","len","length","copyJsonOfDeep","key","updateJsonOfDeep","source","isEmptyArray","offsetRect","rect","left","top","width","height","right","bottom","inRect","point","x","y","inRangeX","xx","inRangeY","yy","inArray","arr","indexOf","intersectArray","a","b","result","ai","bi","push","formatVolume","unit","parseFloat","toFixed","String","formatPrice","decimal","limit","isopen","substr","formatShowTime","toString","formatInfo","middle","zero","abs","getValue","fields","coinunit","label","index","val","idx","pow","vol","money","error","_getExrightPara","rightdata","exrightGs","exrightPg","exrightPx","_cl_data_def__WEBPACK_IMPORTED_MODULE_0__","FIELD_RIGHT","accrual","sendstock","allotstock","allotprice","gs","pg","px","_getExrightPrice","price","rightpara","mode","getExrightPriceRange","start","stop","rights","j","_transExright","days","end","FIELD_DAY","open","high","low","close","_isRight","dateBegin","dateEnd","rightdate","transExrightDay","time","transExrightMin","_util_cl_tool__WEBPACK_IMPORTED_MODULE_1__","h","findIndexInMin","status","lastIndex","findDateInDay","today","finded","getSize","checkZero","checkDayZero","checkDay5","tradeDate","tradetime","maxDays","FIELD_DAY5","count","curDate","splice","daymins","getMinuteCount","fromTradeTimeToIndex","allvol","allmoney","updateStatic","stktype","volunit","before","stophigh","stoplow","matchDayToWeek","daydata","zipday","field","isBegin","k","week","matchDayToMon","month","begin","nowmin","fromIndexToTradeTime","tindex","f","u","g","M","STOCK_TYPE_INDEX","STOCK_TYPE_A","STOCK_TYPE_B","STOCK_TYPE_OTHER","STOCK_TRADETIME","FIELD_MIN","FIELD_TICK","FIELD_LINE","FIELD_ILINE","FIELD_NOW","buy1","buyvol1","sell1","sellvol1","buy2","buyvol2","sell2","sellvol2","buy3","buyvol3","sell3","sellvol3","buy4","buyvol4","sell4","sellvol4","buy5","buyvol5","sell5","sellvol5","FIELD_ENOW","FIELD_NOW_IDX","ups","upvol","downs","downvol","mids","midvol","FIELD_CODE","code","spell","type","FIELD_INFO","FIELD_FINANCE","flow","total","earnings","FIELD_TRADE","info","__webpack_exports__","ClFormula","_data_cl_data_tools__WEBPACK_IMPORTED_MODULE_0__","this","data","minIndex","maxIndex","nowIndex","offIndex","runSingleStock","formula","singleValue","command","eval","MA","period","off","AVGPRC","G","V","U","Z","$","J","Q","tt","it","et","_setLineWidth","context","lineWidth","_drawVline","yy1","yy2","moveTo","lineTo","_drawHline","xx1","xx2","_drawmoveTo","_drawlineTo","_drawRect","ww","hh","strokeRect","_fillRect","fillclr","fillStyle","fillRect","_drawBegin","clr","beginPath","strokeStyle","_drawEnd","stroke","_drawDashLine","x1","y1","x2","y2","dashLen","beveling","sqrt","num","_setFontSize","font","pixel","_drawTxt","txt","pos","textBaseline","textAlign","fillText","getTxtWith","charMap","fontSize","scale","allWidth","element","_getTxtWidth","measureText","__getTxtRect","config","spaceX","spaceY","_drawTxtRect","tr","xxx","yyy","bakclr","_drawCircle","arc","PI","_drawCircleAndFilled","fill","_drawLineAlone","oldclr","_drawSignCircle","Arc1","Arc2","Arc3","_drawSignHLine","item","linew","display","set","maxR","minR","_drawKBar","unitX","xxm","yyh","round","maxmin","max","unitY","yyl","min","filled","_drawVBar","_setTransColor","scolor","trans","style","sColor","toLowerCase","test","sColorNew","concat","sColorChange","join","findNearTimeToIndex","findvalue","direction","cl_data_tools","setFixedLineFlags","showMode","fixed","maxCount","size","COLOR_WHITE","sys","line","back","baktxt","axis","grid","red","green","white","button","colume","box","COLOR_BLACK","_systemInfo","runPlatform","axisPlatform","eventPlatform","standard","sysColor","0","1","2","3","4","5","6","7","8","9",".",",","%",":"," ","K","O","L","-","[","]","mainCanvas","cursorCanvas","setColor","syscolor","color","cl_tool","setScale","canvas","clientWidth","clientHeight","initSystem","cfg","initCommonInfo","chart","father","checkLayout","layout","margin","title","axisX","scroll","digit","symbol","changeCursorStyle","cursor","getLineColor","ClDrawKBar","rectMain","linkInfo","onPaint","hotKey","getData","codeInfo","ClDrawLine","labelX","labelY","colorIndex","showSort","skips","ClDrawRight","rightData","rightMode","ClDrawVLine","CHART_LAYOUT","CHART_BUTTONS","CHART_ORDER","ZOOM_INFO_DEF","list","CHART_KBAR","zoomInfo","lines","axisY","className","extremum","method","maxvalue","minvalue","CHART_VBAR","CHART_NOW","CHART_NOWVOL","CHART_DAY5","CHART_DAY5VOL","CHART_NORMAL","ClDrawAxisY","align","static","text","hideInfo","posX","offX","offy","ClChartLine","dataLayer","init","callback","buttons","childCharts","checkConfig","setPublicRect","childDraws","setChildDraw","childLines","setChildLines","setButtons","setScroll","setZoomInfo","rectChart","axisInfo","rectTitle","rectMess","rectGridLine","rectAxisYLeft","rectAxisYRight","rectAxisX","rectScroll","getLineDataKey","ClassName","tradeTime","draw","rectFather","axisXInfo","axisYInfo","onClear","clearRect","mousePos","valueX","valueY","_beforePaint","q","th","_afterPaint","CURSOR","titleInfo","message","TITLE","AXISY_LEFT","AXISY_RIGHT","AXISX","offx","GRID","DEFAULT_SCROLL","shape","direct","range","select","rectMin","rectMax","rectMid","drawClear","drawGridline","drawButton","onChange","iscall","self","findMouseIndex","xpos","checkMin","onInit","who","onMouseOut","onMouseDown","event","onMouseUp","onMouseMove","curIndex","head","tail","createButton","DEFAULT_BUTTON","hotIdx","visible","translucent","map","setStatus","onClick","break","center","hasButton","fastDrawEnd","getDecimal","addLine","removeLine","zoomin","zoomout","setHotButton","focused","drawChildCharts","beforeLocation","drawChildLines","getMoveData","drawTitleInfo","drawChildDraw","moveIndex","locationData","readyData","readyDraw","getMiddle","calcMaxMin","mm","maxrate","minrate","cl_data_def","readyScroll","HSCROLL","getDataRange","newdata","showCursorLine","eventLayer","boardEvent","reDraw","onLongPress","onPinch","onMouseWheel","newIndex","step","deltaY","onKeyDown","keyCode","mouseIndex","getMouseMoveData","cl_chart","syscfg","DEFAULT_LINKINFO","locked","hotIndex","initChart","setDataLayer","setEventLayer","clear","fastDraw","clearData","getChart","getEventLayer","layer","bindChart","getDataLayer","bindData","initData","setData","JSON","parse","fastBuffer","makeLineData","createChart","usercfg","txtLen","timeLen","volLen","closeLen","isIndex","orderData","tickData","drawReady","drawIndex","drawOrder","drawTick","rectOrder","rectTick","getColor","inow","ticklen","drawGridLine","mmpCount","maxlines","recs","beginIndex","str","strint","fastDrawBegin","setHideInfo","isHideInfo","setStandard","_getTime","getTime","_getDistance","xLen","yLen","_getTouchInfo","mouseInfo","srcRect","getBoundingClientRect","offsetX","pageX","offsetY","pageY","cl_event_rn_getTime","cl_event_rn_getDistance","cl_event_rn_getTouchInfo","ClEvent","eventCanvas","eventSource","bindEvent","addHandler","touchstart","bind","touchend","touchmove","clearEvent","clearHandler","eventName","handler","on","removeListener","getEventInfo","__timestamp","touches","startX","startY","clearTimeout","longTapTimeout","point2","touchDistance","touchVector","startTime","setTimeout","emitEvent","previousTouchPoint","previousTouchTime","changedTouches","timestamp","moveX","moveY","previousPinchScale","pinchScale","mouseinfo","vector","angle","vector1","vector2","mr","acos","deltaX","isSupportTouch","document","addEventListener","preventDefault","mousemove","mouseout","mousewheel","mouseup","mousedown","keyup","keydown","click","attachEvent","removeEventListener","deattachEvent","mousein","srcElement","firstChart","HotWin","getMousePos","chartPath","findEventPath","ignore","path","ClData","cl_formula","InData","OutData","flushNowData","flushTick","nowdata","TICK","flushMin","MIN","checked","DAY","mergeDay","NOW","WEEK","mergeWeek","MON","mergeMon","DAY5","mergeDay5","makeMinute","updateMinute","now","RIGHT","rightmode","outkey","mergeNowMinToMin","curMin","sumVol","sumMoney","hasData","stopIdx","CHART_SEER","getSeerPos","nowprice","drawHotSeer","no","sourceSeer","startPrice","startTxt","surplus","paceY","drawTransRect","xxRight","infos","yl","stopOffset","stopX","filterSeer","nos","uids","date","hotSeer","lastDate","lastval","FIELD_SEER","buy","target","stoploss","showSeer","showPrice","seerPos","acrR","uid","cl_register","DEF_CHART","cl_chart_def_namespaceObject","DEF_DATA","PLUGINS","createSingleChart","sysInfo","createMulChart","chartList","charts"],"mappings":"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","file":"clchart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ClChart\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ClChart\"] = factory();\n\telse\n\t\troot[\"ClChart\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","'use strict'\n\n// /////////////////////////////////////////\n//   时间处理函数\n// ////////////////////////////////////////\n\nexport function addPreZero (v, n) { // n表示总共几位  (9,2) ---09\n  n = n > 9 ? 9 : n\n  const s = '000000000' + v\n  return s.slice(-1 * n)\n}\n\nexport function getMTime (ttime) { // 得到1970-1-1开始的毫秒数\n  let mtime, seconds\n  if (ttime === undefined) {\n    mtime = new Date()\n  } else {\n    if (typeof ttime === 'string') {\n      seconds = parseInt(ttime)\n    } else {\n      seconds = ttime\n    }\n    if (!isNaN(seconds)) {\n      mtime = new Date(seconds * 1000)\n    } else {\n      mtime = new Date()\n    }\n  }\n  return mtime\n}\n\n// time_t转换成20180101格式\nexport function getDate (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate()\n}\n// time_t提取其中的分钟 1030\nexport function getMinute (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getHours() * 100 + mtime.getMinutes()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayWeek (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getDay()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayMon (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getMonth() + 1\n}\n// 日期转换成time_t\nfunction _dayToTTime (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime / 1000\n}\n// 得到两个日期间隔的天数\nexport function getDayGap (beginDay, endDay) {\n  return Math.floor((_dayToTTime(endDay) - _dayToTTime(beginDay)) / (24 * 3600))\n}\n// 格式化time_t为指定字符串\nexport function fromTTimeToStr (ttime, format, ttimePre) {\n  const mtime = getMTime(ttime)\n  switch (format) {\n    case 'minute':\n      if (ttimePre === undefined) {\n        return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n      } else {\n        if (getMinute(ttime) === getMinute(ttimePre)) {\n          return ':' + addPreZero(mtime.getSeconds(), 2)\n        } else {\n          return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n        }\n      }\n    case 'datetime':\n      return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate() +\n      '-' + mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n    default:\n      return ''\n  }\n}\n// 分钟转字符串 1500 -- 15:00\nexport function fromMinuteToStr (minute) {\n  return addPreZero(Math.floor(minute / 100), 2).toString() + ':' + addPreZero(minute % 100, 2).toString()\n}\n// 得到间隔分钟数\nexport function getMinuteGap (beginMin, endMin) {\n  return (Math.floor(endMin / 100) - Math.floor(beginMin / 100)) * 60 + endMin % 100 - beginMin % 100\n}\n\n// 偏移分钟数，offset 为分钟数\nexport function getMinuteOffset (minute, offset) {\n  const mincount = Math.floor(minute / 100) * 60 + minute % 100 + offset\n  return Math.floor(mincount / 60) * 100 + mincount % 60\n}\n\n// /////////////////////////////////////////\n// 公用无关性的函数集合\n// /////////////////////////////////////////\n\nexport function copyArrayOfDeep (obj) {\n  let out\n  if (Array.isArray(obj)) {\n    out = []\n    const len = obj.length\n    for (let i = 0; i < len; i++) {\n      out[i] = copyArrayOfDeep(obj[i])\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\nexport function copyJsonOfDeep (obj) {\n  let out\n  if (obj instanceof Object) { // 数组和文档都为真\n    if (Array.isArray(obj)) { // 只有数组为真\n      out = copyArrayOfDeep(obj)\n    } else {\n      out = {}\n      for (const key in obj) {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\n// obj为子集，生成新的对象，仅仅替换source中存在的对应元素\n// 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// out = {a:[111,2,3]}\nexport function updateJsonOfDeep (obj, source) {\n  let out\n  if (source instanceof Object) {\n    if (Array.isArray(source)) {\n      out = []\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyArrayOfDeep(source[key])\n      }\n    } else {\n      out = {}\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyJsonOfDeep(source[key])\n      }\n    }\n  } else {\n    out = obj || source\n  }\n  return out\n}\n// // obj为原始集，不生成新的对象，用source中存在的对应元素替换obj的数据\n// // 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// // out = {a:[111,2,3],b:2}\nexport function mergeJsonOfDeep (obj, source) {\n  const out = updateJsonOfDeep(obj, source)\n\n  for (const key in obj) {\n    if (out[key] !== undefined) continue\n    if (obj[key] instanceof Object) {\n      if (Array.isArray(obj[key])) {\n        out[key] = copyArrayOfDeep(obj[key])\n      } else {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    } else {\n      out[key] = obj[key]\n    }\n  }\n  return out\n}\n// 数组是否为空\nexport function isEmptyArray (obj) {\n  if (obj !== undefined && Array.isArray(obj)) {\n    if (obj.length > 0) return false\n  }\n  return true\n}\n// 根据offset返回一个新的矩形\n// rect:{left,top,width,height}\n// offset:{left,top,right,bottom}\nexport function offsetRect (rect, offset) {\n  if (rect === undefined) return { left: 0, top: 0, width: 0, height: 0 }\n  if (offset === undefined) return rect\n  return {\n    left: rect.left + offset.left,\n    top: rect.top + offset.top,\n    width: rect.width - (offset.left + offset.right),\n    height: rect.height - (offset.top + offset.bottom)\n  }\n}\n// 判断点是否在矩形内\nexport function inRect (rect, point) {\n  if (rect === undefined || point === undefined) return false\n  if (point.x >= rect.left && point.y >= rect.top &&\n    point.x < (rect.left + rect.width) &&\n    point.y < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断X是否在矩形宽度范围内\nexport function inRangeX (rect, xx) {\n  if (rect === undefined || xx === undefined) return false\n  if (xx >= rect.left &&\n    xx < (rect.left + rect.width)) {\n    return true\n  }\n  return false\n}\n// 判断Y是否在矩形高度范围内\nexport function inRangeY (rect, yy) {\n  if (rect === undefined || yy === undefined) return false\n  if (yy >= rect.top &&\n    yy < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断 v 是否在数组arr中, 比in准确\nexport function inArray (v, arr) {\n  if (arr.indexOf(v) < 0) return false\n  return true\n}\n// 求数组a和b的交集\nexport function intersectArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    for (let bi = 0; bi < b.length; bi++) {\n      if (a[ai] === b[bi]) {\n        result.push(a[ai])\n        break\n      }\n    }\n  }\n  return result\n}\n// 求数组a和b的并集,去掉重复的元素\nexport function mergeArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    result.push(a[ai])\n  }\n  for (let bi = 0; bi < b.length; bi++) {\n    if (!inArray(b[bi], result)) {\n      result.push(b[bi])\n    }\n  }\n  return result\n}\n// 格式化百分比\nexport function formatRate (value, zero) {\n  if (value === undefined || isNaN(value) || zero === undefined) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  let result = Math.abs((value - zero) / zero * 100)\n  result = result.toFixed(2) + '%'\n  return result // 10.20%\n}\n// 格式化成交量\nexport function formatVolume (value, unit) {\n  if (value === undefined || isNaN(value)) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  if (unit === undefined) unit = 1\n  let result = value / unit\n\n  if (value > 100000000000) result = (value / 100000000).toFixed(0) + '亿'\n  else if (value > 10000000000) result = (value / 100000000).toFixed(1) + '亿'\n  else if (value > 1000000000) result = (value / 100000000).toFixed(2) + '亿'\n  else if (value > 100000000) result = (value / 100000000).toFixed(3) + '亿'\n  else if (value > 10000000) result = (value / 10000).toFixed(0) + '万'\n  else if (value > 1000000) result = (value / 10000).toFixed(1) + '万'\n  else if (value > -0.000000001 && value < 0.000000001) result = '--'\n  else result = value.toFixed(0)\n  return String(result)\n}\n// 格式化价格 decimal为小数点，limit为最大长度[4,10]，\nexport function formatPrice (value, decimal, limit, isopen) {\n  if (value === undefined || isNaN(value)) return '--'\n  // if (typeof value === 'string') value = parseFloat(value);\n\n  let result = value\n  if (decimal === undefined || decimal < 0 || decimal > 10) decimal = 0\n\n  if (value > -0.000000001 && value < 0.000000001 && !isopen) {\n    return '--'\n  }\n  result = result.toFixed(decimal)\n\n  if (limit === undefined || limit < 4) return result\n  return result.substr(0, limit)\n}\n// 格式化时间\nexport function formatShowTime (key, value, minute) {\n  let out = value\n  switch (key) {\n    case 'M5':\n    case 'M15':\n    case 'M30':\n    case 'M60':\n      out = fromTTimeToStr(value, 'datetime')\n      break\n    case 'MIN':\n      if (minute === undefined) {\n        out = fromTTimeToStr(value, 'minute')\n      } else {\n        out = fromMinuteToStr(minute)\n      }\n      break\n    case 'DAY5':\n      out = fromTTimeToStr(value, 'minute')\n      break\n  }\n  return out\n}\n\nexport function formatInfo (value, format, decimal, middle) {\n  let out\n  if (format === 'rate') {\n    out = formatRate(value, middle)\n  } else {\n    if (format === 'price') {\n      if (decimal === undefined) decimal = 2\n      out = formatPrice(value, decimal, 7)\n    } else {\n      out = formatVolume(value, 100)\n    }\n  }\n  return out\n}\n// /////////////////////////////////////////\n// 数据转换函数集合\n// /////////////////////////////////////////\n","'use strict'\n\nimport {\n  FIELD_DAY,\n  FIELD_TICK,\n  FIELD_RIGHT,\n  FIELD_DAY5\n} from '../cl.data.def'\n\nimport {\n  copyArrayOfDeep,\n  isEmptyArray,\n  getDate,\n  getDayWeek,\n  getDayGap,\n  getDayMon,\n  getMinuteGap,\n  getMinute,\n  getMinuteOffset\n} from '../util/cl.tool'\n\n// 按fields定义从数组value中获取，第index条标记为label的数据\nexport default function getValue ({\n  fields,\n  value,\n  coinunit\n}, label, index = 0) {\n  let val = 0\n  try {\n    // 支持二维数组和一维数组，判断如果是二维数组就取对应的值\n    let source = value\n    if (Array.isArray(value[0])) {\n      source = value[index]\n    }\n    switch (label) {\n      case 'idx':\n        // 序列，now 0-239，day5 0-5*239\n        // 非常重要，利用这里可以统一MIN和D5的画图\n        if (fields.idx === undefined) val = index\n        else val = source[fields.idx]\n        break\n      case 'coinunit':\n        val = Math.pow(10, getValue({\n          fields,\n          value\n        }, 'decimal', 0))\n        break\n      case 'before':\n      case 'open':\n      case 'high':\n      case 'low':\n      case 'close':\n      case 'stophigh':\n      case 'stoplow':\n      case 'buy1':\n      case 'buy2':\n      case 'buy3':\n      case 'buy4':\n      case 'buy5':\n      case 'sell1':\n      case 'sell2':\n      case 'sell3':\n      case 'sell4':\n      case 'sell5':\n        if (coinunit === undefined) coinunit = 100\n        val = source[fields[label]] / coinunit\n        break\n      case 'flow':\n      case 'total':\n        val = source[fields[label]] * 100\n        break\n      case 'decvol':\n        if (index === 0) {\n          val = source[fields.vol]\n        } else {\n          val = source[fields.vol] - getValue({\n            fields,\n            value\n          }, 'vol', index - 1)\n        }\n        break\n      case 'decmoney':\n        if (index === 0) {\n          val = source[fields.money]\n        } else {\n          val = source[fields.money] - getValue({\n            fields,\n            value\n          }, 'money', index - 1)\n        }\n        break\n      default:\n        if (source[fields[label]]) {\n          val = source[fields[label]]\n        }\n    }\n  } catch (error) {\n    val = 0\n  }\n  return val\n}\n\n// export function getTimeIndex(data, label, value) {\n//   let idx = -1;\n//   for (let i = data.value.length - 1; i >= 0; i--) {\n//     if (getValue(data, label, i) > value) continue;\n//     idx = i;\n//     break;\n//   }\n//   return idx;\n// }\n\nexport function getValueMax (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v > out) out = v\n  }\n  return out\n}\nexport function getValueMin (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v < out) out = v\n  }\n  return out\n}\n\n// /////////////////////////////////////////\n// 日线除权的函数集合\n// /////////////////////////////////////////\n\nfunction _getExrightPara (rightdata) {\n  let exrightGs = 1000 // 送股数\n  let exrightPg = 0 // 配股数\n  let exrightPx = 0 // 利息\n  if (rightdata[FIELD_RIGHT.accrual]) exrightPx = rightdata[FIELD_RIGHT.accrual] / 10\n  if (rightdata[FIELD_RIGHT.sendstock] > 0 || rightdata[FIELD_RIGHT.allotstock] > 0) {\n    exrightGs = 1000 + rightdata[FIELD_RIGHT.sendstock] / 10 + rightdata[FIELD_RIGHT.allotstock] / 10\n    exrightPg = -rightdata[FIELD_RIGHT.allotprice] * rightdata[FIELD_RIGHT.allotstock] / 10000\n  }\n  return {\n    gs: exrightGs,\n    pg: exrightPg,\n    px: exrightPx\n  }\n}\n// 传入的价格和传出的价格都是放大coinunit倍的整形\nfunction _getExrightPrice (price, coinunit, rightpara, mode) {\n  if (coinunit === undefined) coinunit = 100\n  if (mode === 'forword') {\n    price = (price * (1000 / coinunit) - rightpara.pg - rightpara.px) * 1000 / rightpara.gs\n  } else {\n    price = price * (1000 / coinunit) * rightpara.gs / 1000 + rightpara.pg + rightpara.px\n  }\n  // return Math.floor(price / (1000 / coinunit) + 0.5)\n  return price / (1000 / coinunit)\n}\n// 得到某个价格的除权价\nexport function getExrightPriceRange (start, stop, price, coinunit, rights) {\n  if (rights === undefined || rights.length < 1) return price\n  let rightpara\n  for (let j = 0; j < rights.length; j++) {\n    if (rights[j][0] > start && rights[j][0] <= stop) {\n      rightpara = _getExrightPara(rights[j])\n      price = _getExrightPrice(price, coinunit, rightpara, 'forword')\n      break\n    }\n  }\n  return price\n}\n\nfunction _transExright (days, coinunit, rightdata, mode, start, end) {\n  const rightpara = _getExrightPara(rightdata)\n  if (mode === 'forword') {\n    for (let i = start; i < end; i++) {\n      days[i][FIELD_DAY.open] = _getExrightPrice(days[i][FIELD_DAY.open], coinunit, rightpara, mode) // open\n      days[i][FIELD_DAY.high] = _getExrightPrice(days[i][FIELD_DAY.high], coinunit, rightpara, mode) // high\n      days[i][FIELD_DAY.low] = _getExrightPrice(days[i][FIELD_DAY.low], coinunit, rightpara, mode) // low\n      days[i][FIELD_DAY.close] = _getExrightPrice(days[i][FIELD_DAY.close], coinunit, rightpara, mode) // new\n      days[i][FIELD_DAY.vol] = days[i][FIELD_DAY.vol] * rightpara.gs / 1000\n    }\n  }\n}\n\n// 判断是否有除权\nfunction _isRight (dateBegin, dateEnd, rightdate) {\n  if (rightdate > dateBegin && rightdate <= dateEnd) {\n    return true\n  } else return false\n}\n// 对日线进行除权，周年线不能除权，,days传入时就是一个可修改的数组\nexport function transExrightDay (days, coinunit, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(days[i - 1][FIELD_DAY.time], days[i][FIELD_DAY.time], rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, coinunit, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {\n  }\n  return days\n}\n\n// 对分钟线除权,days传入时就是一个可修改的数组\nexport function transExrightMin (days, coinunit, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(\n          getDate(days[i - 1][FIELD_DAY.time]),\n          getDate(days[i][FIELD_DAY.time]),\n          rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, coinunit, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {\n  }\n  return days\n}\n// /////////////////\n// 检索数据函数集\n// /////////////////\n// 从分钟线查找对应记录\nexport function findIndexInMin (source, index) {\n  if (source.value.length < 1) {\n    return {\n      status: 'new',\n      index: -1\n    }\n  }\n  const lastIndex = source.value[source.value.length - 1][source.fields.time]\n  if (lastIndex === index) {\n    return {\n      status: 'old',\n      index: source.value.length - 1\n    }\n  } else if (lastIndex > index) {\n    return {\n      status: 'error',\n      index: source.value.length - 1\n    }\n  } else {\n    return {\n      status: 'new',\n      index: source.value.length - 1\n    }\n  }\n}\n// 从日线查找对应记录\nexport function findDateInDay (source, today) {\n  if (source === undefined || source.value === undefined || source.value.length < 1) {\n    return {\n      finded: false,\n      index: -1\n    }\n  }\n  const lastDate = source.value[source.value.length - 1][source.fields.time]\n  if (today === lastDate) {\n    return {\n      finded: true,\n      index: source.value.length - 1\n    }\n  }\n  return {\n    finded: false,\n    index: -1\n  }\n}\n// export function findDateInDay(source, today) {\n//   if (source === undefined || source.value === undefined || source.value.length < 1)\n//   {\n//     return {\n//       finded: false,\n//       index: -1\n//     };\n//   }\n//   const fields = source.fields;\n//   for (let i = source.value.length - 1; i >= 0; i--) {\n//     if (source.key === 'WEEK') {\n//       const curDay = source.value[i][fields.time];\n//       if (getDayGap(curDay, today) + getDayWeek(curDay) > 7) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'MON') {\n//       const curMon = Math.floor(source.value[i][fields.time] / 100);\n//       const todayMon = Math.floor(today / 100);\n//       if (curMon !== todayMon) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'DAY') {\n//       if (source.value[i][fields.time] === today) {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//   }\n//   return {\n//     finded: false,\n//     index: source.value.length - 1\n//   };\n// }\n\n// /////////////////\n// 检查数据完整性\n// /////////////////\nexport function getSize (source) {\n  if (source === undefined || isEmptyArray(source.value)) {\n    return 0\n  }\n  return source.value.length\n}\nexport function checkZero (value, fields) {\n  if (Array.isArray(value) &&\n    value[fields.open] > 0 &&\n    value[fields.high] > 0 &&\n    value[fields.low] > 0 &&\n    value[fields.close] > 0 &&\n    value[fields.vol] > 0 &&\n    value[fields.money] > 0) {\n    return false\n  } else {\n    return true\n  }\n}\nexport function checkDayZero (source) {\n  const out = []\n  if (!Array.isArray(source)) return out\n\n  for (let i = 0; i < source.length; i++) {\n    if (!checkZero(source[i], FIELD_DAY)) {\n      out.push(source[i])\n    }\n  }\n  return out\n}\n\nexport function checkDay5 (source, coinunit, tradeDate, tradetime) {\n  const out = []\n  if (source.length < 1) return out\n\n  const lastDate = getDate(source[source.length - 1][FIELD_DAY5.time])\n  // 判断是否已经有收盘数据了\n  let maxDays = 5\n  if (!lastDate === tradeDate) maxDays = 4\n\n  let idx\n  let count = 0\n  let curDate = 0\n  for (idx = source.length - 1; idx >= 0; idx--) {\n    if (curDate !== getDate(source[idx][FIELD_DAY5.time])) {\n      curDate = getDate(source[idx][FIELD_DAY5.time])\n      count++\n      if (count > maxDays) {\n        idx++\n        break\n      }\n    }\n    out.splice(0, 0, [source[idx][FIELD_DAY5.time], source[idx][FIELD_DAY5.close], source[idx][FIELD_DAY5.vol]])\n  }\n\n  count = 0\n  curDate = 0\n  let vol = 0\n  let money = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < out.length; idx++) {\n    if (curDate !== getDate(out[idx][FIELD_DAY5.time])) { // 增加记录\n      curDate = getDate(out[idx][FIELD_DAY5.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += out[idx][FIELD_DAY5.vol]\n    money += out[idx][FIELD_DAY5.close] * out[idx][FIELD_DAY5.vol] / coinunit\n    let index = fromTradeTimeToIndex(out[idx][FIELD_DAY5.time], tradetime)\n    index += (count - 1) * daymins\n    out[idx][FIELD_DAY5.idx] = index\n    out[idx][FIELD_DAY5.allvol] = vol\n    out[idx][FIELD_DAY5.allmoney] = money\n  }\n  return out\n}\n\nexport function updateStatic (fields, value) {\n  const coinunit = getValue({\n    fields,\n    value\n  }, 'coinunit')\n  const out = {\n    stktype: getValue({\n      fields,\n      value\n    }, 'type'),\n    volunit: getValue({\n      fields,\n      value\n    }, 'volunit'),\n    coinunit,\n    decimal: getValue({\n      fields,\n      value\n    }, 'decimal'),\n    before: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'before'),\n    stophigh: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'stophigh'),\n    stoplow: getValue({\n      fields,\n      value,\n      coinunit\n    }, 'stoplow')\n  }\n  return out\n}\n\n// /////////////////\n// 对数据进行周期性合并\n// /////////////////\n// export function matchMinToMinute(source, outkey) {\n//   switch (outkey) {\n//     case 'M15': out = matchMin5ToMinute(out, outkey, 15);\n//       break;\n//     case 'M30': out = matchMin5ToMinute(out, outkey, 30);\n//       break;\n//     case 'M60': out = matchMin5ToMinute(out, outkey, 60);\n//       break;\n//   }\n// export function mergeMin(daydata, rate) {\n// this.match_minute_line = function(srcfields, srcvalue, minfields, minvalue, period) {\n//   const out = copyArrayOfDeep(srcvalue);\n//   const cur_min = [];\n//   let base_vol = 0;\n//   let base_money = 0;\n\n//   let hasData = false;\n//   let stopIdx = 4;\n//   for (let k = 0; k < minvalue.length; k++) {\n//     const nowmin = minvalue[k][minfields.idx];\n//     if (nowmin < 0) continue;\n//     if (nowmin > stopIdx) {\n//       if (hasData) {\n//         cur_min[minfields.vol] = minvalue[k][minfields.vol] - base_vol;\n//         cur_min[minfields.money] = minvalue[k][minfields.money] - base_money;\n//         base_vol = minvalue[k][minfields.vol];\n//         base_money = minvalue[k][minfields.money];\n\n//         cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//         out.push(copyArrayOfDeep(cur_min));\n//       }\n//       stopIdx = (Math.floor(nowmin / offset) + 1) * offset - 1;\n//       cur_min[minfields.open] = minvalue[k][minfields.open];\n//       cur_min[minfields.high] = minvalue[k][minfields.high];\n//       cur_min[minfields.low] = minvalue[k][minfields.low];\n//       cur_min[minfields.close] = minvalue[k][minfields.close];\n//       hasData = true;\n//     } else { // nowmin 在0-5之间\n//       if (hasData) {\n//         cur_min[minfields.high] = cur_min[minfields.high] > minvalue[k][minfields.high] ? cur_min[minfields.high] : minvalue[k][minfields.high];\n//         cur_min[minfields.low] = cur_min[minfields.low] < minvalue[k][minfields.low] || minvalue[k][minfields.low] === 0 ?\n//                                   cur_min[minfields.low] : minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//       } else {\n//         cur_min[minfields.open] = minvalue[k][minfields.open];\n//         cur_min[minfields.high] = minvalue[k][minfields.high];\n//         cur_min[minfields.low] = minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//         hasData = true;\n//       }\n//     }\n//   } // for i\n//   if (hasData) {\n//     cur_min[minfields.vol] = minvalue[minvalue.length - 1][minfields.vol] - base_vol;\n//     cur_min[minfields.money] = minvalue[minvalue.length - 1][minfields.money] - base_money;\n//     cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//     out.push(copyArrayOfDeep(cur_min));\n//     // alert('4:'+out.toString());\n//   }\n//   return out;\n// }\n\n// 按rate率压缩日线和分钟数据，因为界面显示原因，可能会存在2日...7日等合并的线\nexport function getZipDay (daydata, rate) {\n  if (rate < 1) return daydata\n  const out = []\n  const zipday = []\n\n  let count = 0\n  const field = FIELD_DAY\n  for (let k = 0; k < daydata.length; k++) {\n    if (count === 0) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] = daydata[k][field.vol]\n      zipday[field.money] = daydata[k][field.money]\n      count = 1\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] += daydata[k][field.vol]\n      zipday[field.money] += daydata[k][field.money]\n      count++\n      if (count >= rate) {\n        zipday[field.time] = daydata[k][field.time]\n        out.push(copyArrayOfDeep(zipday))\n        count = 0\n      }\n    }\n  } // for i\n  if (count > 0) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n// 日线到周线\nexport function matchDayToWeek (daydata) {\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    // 周五 or 下一个日期跨越一周\n    const week = getDayWeek(daydata[k][field.time])\n    if (k >= daydata.length - 1 || week === 5 ||\n      (getDayGap(daydata[k][field.time], daydata[k + 1][field.time]) + week > 7)) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 日线到月线\nexport function matchDayToMon (daydata) {\n  let month\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      month = getDayMon(daydata[k][field.time])\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    if (k >= daydata.length - 1 || getDayMon(daydata[k + 1][field.time]) !== month) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 求交易时间的总共分钟数 [{begin:930,end:1130},{...}]\nexport function getMinuteCount (tradetime) { // time_t\n  let mincount = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    mincount += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n  }\n  return mincount\n}\n\n// 根据交易时间把time_t返回一个顺序值 time_t --> 0..239 -1表示没有非交易时间\nexport function fromTradeTimeToIndex (ttime, tradetime) { // time_t 返回０－２３９\n  const minute = getMinute(ttime)\n\n  let nowmin = 0\n  let index = -1\n  for (let i = 0; i < tradetime.length; i++) {\n    // 9:31:00--11:29:59  13:01:00--14:59:59\n    if (minute > tradetime[i].begin && minute < tradetime[i].end) {\n      index = nowmin + getMinuteGap(tradetime[i].begin, minute)\n      break\n    }\n    if (minute <= tradetime[i].begin && i === 0) { // 8:00:00---9:30:59秒前都=0\n      return 0\n    }\n    if (minute <= tradetime[i].begin && (minute > getMinuteOffset(tradetime[i].begin, -5))) { // 12:55:59--13:00:59秒\n      return nowmin\n    }\n\n    nowmin += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n\n    if (minute >= tradetime[i].end && i === tradetime.length - 1) { // 15:00:00秒后\n      return nowmin - 1\n    }\n    if (minute >= tradetime[i].end && (minute < getMinuteOffset(tradetime[i].end, 5))) { // 11:30:00--11:34:59秒\n      return nowmin - 1\n    }\n  }\n  return index\n}\n\n// 根据交易时间把0..239 转换为 time_t;  0 表示没有非交易时间\nexport function fromIndexToTradeTime (tindex, tradetime, tradeDate) {\n  let index = tindex\n  let offset = 0\n  let nowmin = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    nowmin = getMinuteGap(tradetime[i].begin, tradetime[i].end)\n    if (index < nowmin) {\n      offset = getMinuteOffset(tradetime[i].begin, index + 1)\n      const ttime = new Date(Math.floor(tradeDate / 10000), Math.floor(tradeDate % 10000 / 100) - 1, tradeDate % 100,\n        Math.floor(offset / 100), offset % 100, 0)\n      return Math.floor(ttime / 1000)\n    }\n    index -= nowmin\n  }\n  return 0\n}\n\nexport function outputDay5 (source, coinunit, tradetime) {\n  const out = {\n    key: 'DAY5',\n    fields: FIELD_DAY5,\n    value: []\n  }\n  if (source.length < 1) return out\n\n  let idx\n  let count = 0\n  let vol = 0\n  let money = 0\n  let curDate = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < source.length; idx++) {\n    if (curDate !== getDate(source[idx][FIELD_TICK.time])) {\n      curDate = getDate(source[idx][FIELD_TICK.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += source[idx][FIELD_TICK.vol]\n    money += source[idx][FIELD_TICK.close] * source[idx][FIELD_TICK.vol] / coinunit\n    let index = fromTradeTimeToIndex(source[idx][FIELD_TICK.time], tradetime)\n    index += (count - 1) * daymins\n    out.value.push([index, source[idx][FIELD_TICK.close], source[idx][FIELD_TICK.vol], money / vol])\n  }\n  return out\n}\n","'use strict'\n\n// 数据类型和数据名称分开；根据数据类型生成\n// 在comm中定义几个函数，用户可以自己定义数据类型，自己定义按钮，自己定义画线的方式，\n// 只要用户产生的类支持通用的接口onpaint等函数，并成功注册进来，就可以被chart拿来画图了\n// 这样扩展起来才方便\n// 而chart.line只画基础的一些图形，其他非标的图形由用户自行定义，包括数据生成的算法\n\nexport const STOCK_TYPE_INDEX = 0\nexport const STOCK_TYPE_A = 1\nexport const STOCK_TYPE_B = 4\nexport const STOCK_TYPE_OTHER = 5\n\nexport const STOCK_TRADETIME = [{\n  begin: 930,\n  end: 1130\n},\n{\n  begin: 1300,\n  end: 1500\n}\n]\n\n// 基本日线定义，历史分钟线，\nexport const FIELD_DAY = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6\n}\nexport const FIELD_MIN = {\n  idx: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  allvol: 5, // 增补\n  allmoney: 6 // 增补\n}\n\nexport const FIELD_TICK = {\n  time: 0,\n  close: 1,\n  vol: 2\n}\nexport const FIELD_DAY5 = {\n  time: 0,\n  close: 1,\n  vol: 2,\n  idx: 3, // 增补\n  allvol: 4, // 增补\n  allmoney: 5 // 增补\n}\n\n// 两种单线的定义\nexport const FIELD_LINE = {\n  time: 0,\n  value: 1\n}\nexport const FIELD_ILINE = {\n  idx: 0,\n  value: 1\n}\n\n// 标准5档实时行情\nexport const FIELD_NOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10,\n  buy2: 11,\n  buyvol2: 12,\n  sell2: 13,\n  sellvol2: 14,\n  buy3: 15,\n  buyvol3: 16,\n  sell3: 17,\n  sellvol3: 18,\n  buy4: 19,\n  buyvol4: 20,\n  sell4: 21,\n  sellvol4: 22,\n  buy5: 23,\n  buyvol5: 24,\n  sell5: 25,\n  sellvol5: 26\n}\n// 简易一档实时行情\nexport const FIELD_ENOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10\n}\n// 指数实时行情\nexport const FIELD_NOW_IDX = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  ups: 7,\n  upvol: 8,\n  downs: 9,\n  downvol: 10,\n  mids: 11,\n  midvol: 12\n}\n// 股票CODE列表\nexport const FIELD_CODE = {\n  index: 0,\n  code: 1,\n  name: 2, // 股票名称\n  spell: 3, // 拼音首字母\n  type: 4, // 股票类型\n  decimal: 5, // 保留小数点\n  volunit: 6, // 成交量单位\n  before: 7, // 前收盘\n  stophigh: 8, // 涨停价\n  stoplow: 9 // 跌停价\n}\n// 股票信息定义\nexport const FIELD_INFO = {\n  name: 0, // 股票名称\n  type: 1, // 股票类型\n  decimal: 2, // 保留小数点\n  volunit: 3, // 成交量单位\n  before: 4, // 前收盘\n  stophigh: 5, // 涨停价\n  stoplow: 6 // 跌停价\n}\n\n// 除权字段定义\nexport const FIELD_RIGHT = {\n  time: 0,\n  sendstock: 1, // 10送股 放大1000倍\n  allotstock: 2, // 10配股数 放大1000倍\n  allotprice: 3, // 配股价 放大1000倍\n  accrual: 4 // 10送红利 放大1000倍\n}\n// 财务信息定义\nexport const FIELD_FINANCE = {\n  code: 0,\n  time: 1,\n  flow: 2, // 流通股\n  total: 3, // 总股本\n  earnings: 4 // 每股收益\n}\n// ////////////////////////////////////////\n// 以上为系统默认定义，用户定义数据类型可以放在下面\n// ////////////////////////////////////////\n\nexport const FIELD_TRADE = {\n  time: 0, // 交易时间\n  code: 1, // 股票代码\n  type: 2, // B S 买卖标志\n  price: 3, // 交易价格\n  vol: 4, // 成交量\n  money: 5, // 成交金额\n  info: 6 // 交易参数\n}\n","'use strict'\n\n// /////////////////////////////////////////\n// 预先定义好的公式，比如MA等，可在这里扩展公式定义\n// 用户可以自定义公式注册到ClData层，便于系统调用\n// ////////////////////////////////////////\nimport getValue from '../data/cl.data.tools'\n\nexport function ClFormula () {\n  this.source = {\n    data: {},\n    minIndex: 0,\n    maxIndex: 0,\n    nowIndex: 0\n  }\n  this.getValue = function (label, offIndex) { // offIndex 向前偏移offIndex条记录\n    if (label === undefined) return 0\n    if (this.source.data === undefined || this.source.data.value === undefined) return 0\n\n    if (this.source.nowIndex === undefined) this.source.nowIndex = this.source.minIndex\n    const index = this.source.nowIndex - offIndex\n\n    return getValue(this.source.data, label, index)\n  }\n  this.runSingleStock = function (source, formula) {\n    const singleValue = []\n    this.source = source\n    const command = `\n    for (this.source.nowIndex = this.source.minIndex;this.source.nowIndex <= this.source.maxIndex;this.source.nowIndex++) {\n          const ${formula}\n          singleValue.push([this.getValue('idx', 0), out]);\n    }`\n    eval(command)\n    return singleValue\n  }\n  // ///////////////////\n  //  自定义公式\n  // /////////////////\n  this.MA = function (label, period) {\n    let off = 0\n    let value = 0\n    for (let m = 0; m < period; m++) {\n      const v = this.getValue(label, m)\n      if (v !== 0) {\n        off++\n        value += v\n      }\n    }\n    return off === 0 ? 0 : value / off\n  }\n  this.AVGPRC = function () {\n    let value = 0\n    value = this.getValue('allmoney', 0) / this.getValue('allvol', 0)\n    return value\n  }\n}\n\n//\n// 求均价时，需要考虑指数的均价问题\n// case 'MIN':\n// // 处理指数的均线问题\n// allmoney = 0;\n// fields = getFields('MIN');\n// if (this.InData.MIN === undefined) break;\n// value = this.InData['MIN'].value;\n// for (let k = 0; k < value.length; k++) {\n//   if (this.static.stktype === 0) {\n//     if (k === 0) {\n//       allmoney = value[k][fields.vol] * value[k][fields.close] / this.static.coinunit;\n//     } else {\n//       allmoney += (value[k][fields.vol] - value[k - 1][fields.vol]) * value[k][fields.close] / this.static.coinunit;\n//     }\n//     value[k][fields.allmoney] = allmoney;\n//   } else {\n//     // value[k][fields.allmoney] = value[k][fields.money];\n//   }\n// }\n// break;\n","'use strict'\n\nexport function _getImageData (context, xx, yy, ww, hh) {\n  if (context.getImageData) {\n    return context.getImageData(xx, yy, ww, hh)\n  }\n  return undefined\n}\n\nexport function _putImageData (context, img, xx, yy) {\n  if (context.putImageData) {\n    context.putImageData(img, xx, yy)\n  }\n}\n\nexport function _setLineWidth (context, l) {\n  context.lineWidth = l\n}\n\nexport function _getLineWidth (context) {\n  return context.lineWidth\n}\n\n// 画竖线\nexport function _drawVline (context, xx, yy1, yy2) {\n  context.moveTo(xx, yy1)\n  context.lineTo(xx, yy2)\n}\n// 画横线\nexport function _drawHline (context, xx1, xx2, yy) {\n  context.moveTo(xx1, yy)\n  context.lineTo(xx2, yy)\n}\n// 画斜线\nexport function _drawline (context, xx1, yy1, xx2, yy2) {\n  context.moveTo(xx1, yy1)\n  context.lineTo(xx2, yy2)\n}\n\n// 画线\nexport function _drawmoveTo (context, xx, yy) {\n  context.moveTo(xx, yy)\n}\n\n// 画线\nexport function _drawlineTo (context, xx, yy) {\n  context.lineTo(xx, yy)\n}\n\n// 画空心长方形\nexport function _drawRect (context, xx, yy, ww, hh) {\n  context.strokeRect(xx, yy, ww, hh) // 这里的宽度是指不算xx的起始点的宽度，所以你写宽5，实际出来图形是6个像素，\n}\n// 画实心长方形\nexport function _fillRect (context, xx, yy, ww, hh, fillclr) {\n  context.fillStyle = fillclr || context.fillStyle\n  context.fillRect(xx, yy, ww, hh)\n}\nexport function _clearRect (context, xx, yy, ww, hh) {\n  context.clearRect(xx, yy, ww, hh)\n}\n// 画实心长方形\nexport function _fill (context, fillclr) {\n  context.fillStyle = fillclr\n  context.fill()\n}\n// 开始画线\nexport function _drawBegin (context, clr) {\n  context.beginPath()\n  context.strokeStyle = clr || context.strokeStyle\n}\n\n// 结束画线\nexport function _drawEnd (context) {\n  context.stroke()\n}\n\n// 画一条虚线\nfunction __getBeveling (x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))\n}\nexport function _drawDashLine (context, x1, y1, x2, y2, dashLen) {\n  dashLen = dashLen === undefined ? 5 : dashLen\n  // 得到斜边的总长度\n  const beveling = __getBeveling(x2 - x1, y2 - y1)\n  // 计算有多少个线段\n  const num = Math.floor(beveling / dashLen)\n\n  for (let i = 0; i < num; i++) {\n    context[i % 2 === 0 ? 'moveTo' : 'lineTo'](x1 + (x2 - x1) / num * i, y1 + (y2 - y1) / num * i)\n  }\n  // context.stroke();\n}\n\n// ////////////////////////////\n// 以下显示文字\n// ///////////////////////////\n\nexport function _setFontSize (context, font, pixel) {\n  context.font = ' ' + pixel + 'px ' + font\n}\n\nexport function _drawTxt (context, xx, yy, txt, font, pixel, clr, pos) {\n  _setFontSize(context, font, pixel)\n  context.fillStyle = clr || context.fillStyle\n  context.textBaseline = pos ? pos.y || 'top' : 'top' // top（默认）；middle bottom\n  context.textAlign = pos ? pos.x || 'start' : 'start' // start（默认）;center end\n  // 需要将txt转为string类型，不然gcanvas会报错\n  context.fillText(txt.toString(), xx, yy)\n}\n\nfunction getTxtWith (charMap, txt, fontSize) {\n  const scale = fontSize / 12\n  let allWidth = 0\n  for (let i = 0; i < txt.length; i++) {\n    const element = txt[i].toString()\n    if (charMap && charMap[element]) {\n      allWidth += charMap[element].width\n    } else {\n      allWidth += 12\n    }\n  }\n  return allWidth * scale\n}\n\nexport function _getTxtWidth (context, txt, font, pixel) {\n  _setFontSize(context, font, pixel)\n  let width\n  if (context.measureText) {\n    try {\n      width = context.measureText(txt).width\n    } catch (error) {\n      width = getTxtWith(context.charMap, txt, pixel)\n    }\n    // 简单的计算尺寸返回，这样子计算存在误差，特别是存在中英文的时候\n  } else {\n    width = getTxtWith(context.charMap, txt, pixel)\n  }\n  return width\n}\n// export function _getTxtWidth (context, txt, font, pixel) {\n//   _setFontSize(context, font, pixel)\n//   let width\n//   if (context.measureText) {\n//     try {\n//       width = context.measureText(txt).width\n//     } catch (error) {\n//       // 简单的计算尺寸返回，这样子计算存在误差，特别是存在中英文的时候\n//       width = pixel * txt.length\n//     }\n//   }\n//   return width\n// }\n\n// 获取文字显示的最适合的Rect\nfunction __getTxtRect (context, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const len = _getTxtWidth(context, txt, config.font, config.pixel)\n  return { width: len + 2 * spaceX, height: config.pixel + spaceY * 2 }\n}\n// 把文本画在矩形内\nexport function _drawTxtRect (context, xx, yy, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const tr = __getTxtRect(context, txt, config)\n\n  let xxx, yyy\n  yyy = yy // top\n  xxx = xx // start\n  if (config.y === 'middle') yyy = yy - Math.floor(tr.height / 2) // middle\n  if (config.x === 'end') xxx = xx - tr.width\n  if (config.x === 'center') xxx = xx - Math.floor(tr.width / 2)\n  _fillRect(context, xxx, yyy, tr.width, tr.height, config.bakclr)\n\n  _drawBegin(context, config.clr)\n  _drawRect(context, xxx, yyy, tr.width, tr.height)\n  xxx = xx\n  yyy = yy\n  if (config.x === 'start') xxx = xx + spaceX // ||config.x==='center'\n  if (config.x === 'end') xxx = xx - spaceX\n  if (config.y === 'top') yyy = yy - spaceY\n  _drawTxt(context, xxx, yyy, txt, config.font, config.pixel, config.clr, {\n    x: config.x,\n    y: config.y\n  })\n  _drawEnd(context)\n}\n\n// 画空心圆\nexport function _drawCircle (context, x, y, r) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n}\n\n// 画实心圆\nfunction _drawCircleAndFilled (context, x, y, r, clr) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n  context.fillStyle = clr\n  context.fill()\n}\n\n// 画一根独立的线，不影响后面的画线颜色\nexport function _drawLineAlone (context, xx, yy, xx1, yy1, clr) {\n  const oldclr = context.strokeStyle\n  _drawBegin(context, clr)\n  context.moveTo(xx, yy)\n  context.lineTo(xx1, yy1)\n  _drawEnd(context)\n  context.strokeStyle = oldclr\n}\n\n// 画一个椭圆\nexport function _BezierEllipse (context, x, y, a, b, h) {\n  const k = 0.5522848\n  const ox = a * k // 水平控制点偏移量\n  const oy = b * k // 垂直控制点偏移量\n\n  context.beginPath()\n  // 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线\n  if (!h) {\n    context.moveTo(x - a, y)\n    context.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n    context.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y)\n    context.closePath()\n  } else {\n    context.moveTo(x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n  }\n  context.stroke()\n}\n\n// 画一个LOGO\nexport function _drawLogo (context, xx, yy, size) {\n  context.beginPath()\n  const lw = size\n\n  context.lineWidth = lw\n  context.strokeStyle = '#efefef'\n\n  context.moveTo(xx - 0.5 * lw, yy) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy) // 创建水平线\n  context.moveTo(xx, yy) // 创建开始点\n  context.lineTo(xx, yy + 13 * lw) // 创建水平线\n  context.moveTo(xx - 3 * lw, yy + 13 * lw) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy + 13 * lw) // 创建水平线\n\n  context.moveTo(xx + 10 * lw, yy + 3.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 3.5 * lw) // 创建水平线\n  context.moveTo(xx + 10 * lw, yy + 9.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 9.5 * lw) // 创建水平线\n  context.stroke()\n\n  _BezierEllipse(context, xx + 5.5 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw, true)\n  _BezierEllipse(context, xx + 9 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw)\n  context.fillStyle = '#000'\n  context.fillRect(xx + 8.5 * lw, yy + 4 * lw, 6 * lw, 5 * lw)\n}\n\n// ////////////////////////////////////\n// 以下函数只能调用上面的函数,不能直接画图\n// //////////////////////////////////\n\n// data {o,h,l,c}\nexport function _drawSignPlot (context, x, y, Arc1, Arc2) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawmoveTo(context, x - Arc1.r, y)\n    _drawlineTo(context, x + Arc1.r, y)\n    _drawlineTo(context, x, y + 2 * Arc1.r)\n    _drawlineTo(context, x - Arc1.r, y)\n    _fill(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n}\nexport function _drawSignCircle (context, x, y, Arc1, Arc2, Arc3) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n  if (Arc3 !== undefined && Arc3.r > 0) {\n    _drawBegin(context, Arc3.clr)\n    _drawCircleAndFilled(context, x, y, Arc3.r, Arc3.clr)\n    _drawEnd(context)\n  }\n}\n\nexport function _drawSignHLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.right - config.pixel / 2, config.yy, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n\n  config.width = config.right - config.xx\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let xx = config.xx + config.width * item[i].set / 100\n    if (item[i].txt === 'arc') {\n      if ((xx + item[i].maxR) > config.right) xx = config.right - item[i].maxR\n      _drawSignCircle(context, xx, config.yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((xx + tr.width) > config.right) xx = config.right - tr.width\n      let yy = config.yy\n      if (config.top && yy < config.top + tr.height / 2) {\n        yy = config.top + tr.height / 2\n      }\n      if (config.bottom && yy > config.bottom - tr.height / 2) {\n        yy = config.bottom - tr.height / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'start',\n        y: config.y,\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n\nexport function _drawSignVLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.xx, config.bottom - config.pixel / 2, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n  config.height = config.bottom - config.yy\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let yy = config.yy + config.height * item[i].set / 100\n\n    if (item[i].txt === 'arc') {\n      if ((yy + item[i].maxR) > config.bottom) yy = config.bottom - item[i].maxR\n      _drawSignCircle(context, config.xx, yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((yy + tr.height) > config.bottom) yy = config.bottom - tr.height\n      let xx = config.xx\n      if (config.left && xx < config.left + tr.width / 2) {\n        xx = config.left + tr.width / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'center',\n        y: 'middle',\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n// { index:k, unitX: unitX, spaceX:spaceX, unitY:unitY,maxmin:mm},\n// data {o,h,l,c}\nexport function _drawKBar (context, config, item) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const xxm = xx + Math.floor(config.unitX / 2)\n  const yyh = config.rect.top + Math.round((config.maxmin.max - item[1]) * config.unitY)\n  const yyl = config.rect.top + config.rect.height - Math.round((item[2] - config.maxmin.min) * config.unitY)\n  let hh\n\n  const yy = config.rect.top + Math.round((config.maxmin.max - item[0]) * config.unitY)\n\n  if (item[0] === item[3]) {\n    hh = 0\n    _drawHline(context, xx, xx + config.unitX, yy)\n    if (item[1] > item[2]) {\n      _drawVline(context, xxm, yyh, yyl)\n    }\n  } else {\n    hh = Math.round((item[0] - item[3]) * config.unitY)\n    _drawVline(context, xxm, yyh, yy)\n    if (config.filled) {\n      _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n    } else {\n      _drawRect(context, xx, yy, config.unitX, hh)\n    }\n    _drawVline(context, xxm, yy + hh, yyl)\n  }\n}\n// data {o,h,l,c}\nexport function _drawVBar (context, config, value) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const yy = config.rect.top + Math.round((config.maxmin.max - value) * config.unitY)\n  const hh = config.rect.top + config.rect.height - yy\n  if (config.filled) {\n    _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n  } else {\n    _drawRect(context, xx, yy, config.unitX, hh)\n  }\n}\n\n// ////////////////////////////////////\n// 以下函数为辅助画图的工具函数\n// Adjust 灰度\n// //////////////////////////////////\n// 为传入的16进制颜色增加透明度 ‘#1F1F2F’ -> rgba(...)\nexport function _setTransColor (scolor, trans, style) {\n  const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n  let sColor = scolor.toLowerCase()\n  if (sColor && reg.test(sColor)) {\n    if (sColor.length === 4) {\n      let sColorNew = '#'\n      for (let i = 1; i < 4; i += 1) {\n        sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\n      }\n      sColor = sColorNew\n    }\n    // 处理六位的颜色值\n    const sColorChange = []\n    for (let i = 1; i < 7; i += 2) {\n      sColorChange.push(parseInt('0x' + sColor.slice(i, i + 2)))\n    }\n    // 效果处理\n    switch (style) {\n      case 'adjust':\n        const r = sColorChange[0]\n        const g = sColorChange[1]\n        const b = sColorChange[2]\n        sColorChange[0] = (r * 0.272) + (g * 0.534) + (b * 0.131)\n        sColorChange[1] = (r * 0.349) + (g * 0.686) + (b * 0.168)\n        sColorChange[2] = (r * 0.393) + (g * 0.769) + (b * 0.189)\n        break\n    }\n    sColor = sColorChange.join(',')\n    trans = trans || 1\n    return 'rgba(' + sColor + ',' + trans + ')'\n  } else {\n    return sColor\n  }\n}\n","'use strict'\n\nimport getValue from '../data/cl.data.tools'\n\n// ///////////////////////////////////////\n// 和定位相关基本函数\n// //////////////////////////////////////\n\n// 根据label在data中寻找匹配的记录编号\nexport function findLabelToIndex (data, findvalue, label) {\n  for (let idx = 0; idx <= data.value.length - 1; idx++) {\n    if (findvalue === getValue(data, label, idx)) {\n      return idx\n    }\n  }\n  return -1\n}\n// 查找最匹配time的记录号，direction为forword的时候表示从后面向前开始寻找，\nexport function findNearTimeToIndex (data, findvalue, label, direction) {\n  if (label === undefined) label = 'time'\n  if (direction && direction === 'forword') {\n    for (let idx = data.value.length - 1; idx >= 0; idx--) {\n      if (getValue(data, label, idx) > findvalue) continue\n      return idx\n    }\n  } else {\n    for (let idx = 0; idx <= data.value.length - 1; idx++) {\n      if (getValue(data, label, idx) < findvalue) continue\n      return idx\n    }\n  }\n  return -1\n}\n// 专门处理分时图和5日图这种所有数据都会小于界面的情况\n// 此种情况下elementW一般就只有一个像素\nexport function setFixedLineFlags (info, config) {\n  info.showMode = 'fixed'\n  info.fixed = {\n    min: 0,\n    max: config.maxCount - 1,\n    left: 0,\n    right: 0\n  }\n  info.minIndex = 0\n  info.maxIndex = config.size - 1\n  // 5日线时 spaceX初始值设为0\n  info.maxCount = config.maxCount > 1 ? config.maxCount : 2\n  info.unitX = config.scale\n  info.spaceX = config.width / info.maxCount - info.unitX\n}\n// 此种情况下spaceX最小需要一个像素\nexport function setMoveLineFlags (info, config) {\n  const spaceX = info.unitX / 4\n  info.spaceX = spaceX < config.scale ? config.scale : spaceX\n  info.maxCount = Math.floor(config.width / (info.unitX + info.spaceX)) // 整个图形区域最大显示记录数\n  const offset = info.maxCount > config.size ? config.size : info.maxCount\n\n  switch (info.showMode) {\n    case 'fixed':\n    // 要根据fixed的最大最小值，合并数据\n      info.maxIndex = config.size - 1\n      info.minIndex = config.size - offset\n      break\n    case 'locked':\n      // info.locked.index = config.index ? config.index : info.locked.index;\n      // 把需要锁定的记录初始化，如果没有值就取当前画面中间的值\n      // info.locked.set = config.set ? config.set : info.locked.set;\n      break\n    case 'move':\n      break\n    default: // case 'last':\n      info.maxIndex = config.size - 1\n      info.minIndex = config.size - offset\n      break\n  }\n}\n","'use strict'\n\nimport {\n  copyJsonOfDeep\n} from '../util/cl.tool'\n\nimport * as drawClass from '../util/cl.draw'\n\nexport const COLOR_WHITE = {\n  sys: 'white',\n  line: ['#4048cc', '#dd8d2d', '#168ee0', '#ad7eac', '#ff8290', '#ba1215'],\n  back: '#fafafa',\n  txt: '#2f2f2f',\n  baktxt: '#2f2f2f',\n  axis: '#7f7f7f',\n  grid: '#cccccc',\n  red: '#ff6a6c',\n  green: '#32cb47',\n  white: '#7e7e7e',\n  vol: '#dd8d2d',\n  button: '#888888',\n  colume: '#41bfd0',\n  box: '#ddf4df',\n  code: '#3f3f3f'\n}\n\nexport const COLOR_BLACK = {\n  sys: 'black',\n  line: ['#efefef', '#fdc104', '#5bbccf', '#ad7eac', '#bf2f2f', '#cfcfcf'],\n  back: '#232323',\n  txt: '#bfbfbf',\n  baktxt: '#2f2f2f',\n  axis: '#afafaf',\n  grid: '#373737',\n  red: '#ff6a6c',\n  green: '#6ad36d',\n  white: '#9f9f9f',\n  vol: '#fdc104',\n  button: '#9d9d9d',\n  colume: '#41bfd0',\n  box: '#373737',\n  code: '#41bfd0'\n}\n\nexport const CHART_WIDTH_MAP = {\n  '0': {\n    'width': 7.1999969482421875\n  },\n  '1': {\n    'width': 4.8119964599609375\n  },\n  '2': {\n    'width': 7.1999969482421875\n  },\n  '3': {\n    'width': 7.1999969482421875\n  },\n  '4': {\n    'width': 7.1999969482421875\n  },\n  '5': {\n    'width': 7.1999969482421875\n  },\n  '6': {\n    'width': 7.1999969482421875\n  },\n  '7': {\n    'width': 6.563995361328125\n  },\n  '8': {\n    'width': 7.1999969482421875\n  },\n  '9': {\n    'width': 7.1999969482421875\n  },\n  '.': {\n    'width': 3.167999267578125\n  },\n  ',': {\n    'width': 3.167999267578125\n  },\n  '%': {\n    'width': 11.639999389648438\n  },\n  ':': {\n    'width': 3.167999267578125\n  },\n  ' ': {\n    'width': 3.9959869384765625\n  },\n  'K': {\n    'width': 8.279998779296875\n  },\n  'V': {\n    'width': 7.667999267578125\n  },\n  'O': {\n    'width': 9.203994750976562\n  },\n  'L': {\n    'width': 7.055999755859375\n  },\n  '-': {\n    'width': 7.2599945068359375\n  },\n  '[': {\n    'width': 3.9959869384765625\n  },\n  ']': {\n    'width': 3.9959869384765625\n  }\n}\n\n// ///////////////////////////\n//  这里是定义的一些公共变量，以及调用方法\n// ///////////////////////////\n\n// 以下的几个变量都是系统确立时就必须确立的，属于大家通用的配置\nconst _systemInfo = {\n  runPlatform: 'normal', // 支持其他平台，其他平台（如微信）可能需要做函数替代和转换 react\n  axisPlatform: 'web', // 'web' 对坐标显示的区别\n  eventPlatform: 'html5', // 'react'所有事件\n  scale: 1, // 屏幕的放大倍数，该常量会经常性使用，并且是必须的\n  standard: 'china', // 画图标准，美国’usa‘，需要调整颜色\n  sysColor: 'black', // 色系，分白色和黑色系\n  charMap: CHART_WIDTH_MAP,\n  mainCanvas: {},\n  cursorCanvas: {}\n}\n\nexport function setStandard (standard) {\n  _systemInfo.standard = standard || 'china'\n}\n\nexport function setColor (syscolor) {\n  let color = {}\n  if (syscolor === 'white') {\n    color = copyJsonOfDeep(COLOR_WHITE)\n    // color.line = copyArrayOfDeep(COLOR_WHITE.line)\n  } else {\n    color = copyJsonOfDeep(COLOR_BLACK)\n    // color.line = copyArrayOfDeep(COLOR_BLACK.line)\n  }\n  // 当发现国别为美国需要修改颜色配对\n  if (_systemInfo.standard === 'usa') {\n    const clr = color.red\n    color.red = color.green\n    color.green = clr\n  }\n  // 更新当前系统的颜色\n  _systemInfo.color = color\n  return color\n}\n\nexport function _getOtherTxtWidth (context, txt, font, pixel) {\n  const ww = _systemInfo.other.width\n  const hh = _systemInfo.other.height\n  drawClass._fillRect(0, 0, ww, hh, '#000')\n  drawClass._drawTxt(_systemInfo.other.context, 0, 0, txt, font, pixel, '#fff')\n  const imgData = _systemInfo.other.context.getImageData(0, 0, ww, hh).data\n  let width = 0\n  for (let i = 0; i < imgData.length; /* i += 4 */) {\n    if (imgData.data[i + 0] !== 0 || imgData.data[i + 1] !== 0 ||\n      imgData.data[i + 2] !== 0 || imgData.data[i + 3] !== 255) {\n      i += 4\n      width++\n    } else {\n      i += 4 * ww\n    }\n  }\n  return width\n}\n\nexport function setScale (canvas, scale) {\n  canvas.width = canvas.clientWidth * scale\n  canvas.height = canvas.clientHeight * scale\n  return {\n    width: canvas.width,\n    height: canvas.height\n  }\n}\nexport function initSystem (cfg) {\n  if (cfg === undefined) return\n  for (const key in _systemInfo) {\n    _systemInfo[key] = cfg[key] || _systemInfo[key]\n  }\n  _systemInfo.mainCanvas.canvas = cfg.mainCanvas.canvas\n  _systemInfo.mainCanvas.context = cfg.mainCanvas.context\n  _systemInfo.mainCanvas.context.charMap = _systemInfo.charMap\n  _systemInfo.cursorCanvas.canvas = cfg.cursorCanvas.canvas\n  _systemInfo.cursorCanvas.context = cfg.cursorCanvas.context\n  _systemInfo.cursorCanvas.context.charMap = _systemInfo.charMap\n\n  _systemInfo.color = setColor(_systemInfo.sysColor)\n\n  if (_systemInfo.runPlatform === 'normal') {\n    if (_systemInfo.mainCanvas.canvas !== undefined && _systemInfo.scale !== 1) {\n      setScale(_systemInfo.mainCanvas.canvas, _systemInfo.scale)\n      setScale(_systemInfo.cursorCanvas.canvas, _systemInfo.scale)\n    }\n  }\n  return _systemInfo\n}\n\n// 所有chart都必须调用这个函数，以获取基本的配置\nexport function initCommonInfo (chart, father) {\n  chart.father = father\n  chart.context = father.context\n  chart.scale = _systemInfo.scale\n  chart.color = _systemInfo.color\n  chart.axisPlatform = _systemInfo.axisPlatform\n  chart.eventPlatform = _systemInfo.eventPlatform\n}\nexport function checkLayout (layout) {\n  const scale = _systemInfo.scale\n  layout.margin.top *= scale\n  layout.margin.left *= scale\n  layout.margin.bottom *= scale\n  layout.margin.right *= scale\n\n  layout.offset.top *= scale\n  layout.offset.left *= scale\n  layout.offset.bottom *= scale\n  layout.offset.right *= scale\n\n  layout.title.pixel *= scale\n  layout.title.height *= scale\n  layout.title.spaceX *= scale\n  layout.title.spaceY *= scale\n\n  if (layout.title.height < (layout.title.pixel + layout.title.spaceY + 2 * scale)) {\n    layout.title.height = layout.title.pixel + layout.title.spaceY + 2 * scale\n  }\n\n  layout.axisX.pixel *= scale\n  layout.axisX.width *= scale\n  layout.axisX.height *= scale\n  layout.axisX.spaceX *= scale\n\n  layout.scroll.pixel *= scale\n  layout.scroll.size *= scale\n  layout.scroll.spaceX *= scale\n\n  layout.digit.pixel *= scale\n  layout.digit.height *= scale\n  layout.digit.spaceX *= scale\n\n  if (layout.digit.height < (layout.digit.pixel + 2 * scale)) {\n    layout.digit.height = layout.digit.pixel + 2 * scale\n  }\n\n  layout.symbol.size *= scale\n  layout.symbol.spaceX *= scale\n  layout.symbol.spaceY *= scale\n}\n// 改变鼠标样式\n// default\nexport function changeCursorStyle (style) {\n  if (_systemInfo.eventPlatform === 'html5') {\n    _systemInfo.mainCanvas.canvas.style.cursor = style\n    _systemInfo.cursorCanvas.canvas.style.cursor = style\n  }\n}\nexport function getLineColor (index) {\n  if (index === undefined) index = 0\n  return _systemInfo.color.line[index % _systemInfo.color.line.length]\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  // _setTransColor,\n  _drawKBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawKBar (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n    this.codeInfo = this.source.getData('INFO')\n\n    let clr = this.color.red\n    // clr = _setTransColor(clr, 1, 'adjust')\n    // clr = _setTransColor(clr, 0.7)\n    _drawBegin(this.context, clr)\n    let open, close\n    let before = getValue(this.codeInfo, 'before', 0)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open < close || (open === close && close >= before)) {\n      // getValue(this.data, 'high', idx),\n      // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: this.color.sys === 'white',\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [close,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          open\n        ])\n      }\n    }\n    _drawEnd(this.context)\n    clr = this.color.green\n    // clr = _setTransColor(clr, 1, 'adjust')\n    // clr = _setTransColor(clr, 0.7)\n    _drawBegin(this.context, clr)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open > close || (open === close && close < before)) {\n        // getValue(this.data, 'high', idx),\n        // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [open,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          close\n        ])\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo,\n  getLineColor\n} from '../chart/cl.chart.init'\nimport {\n  inRect\n} from '../util/cl.tool'\n\nexport default function ClDrawLine (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    if (this.info.labelX === undefined) this.info.labelX = 'idx'\n    if (this.info.labelY === undefined) this.info.labelY = 'value'\n    // 分钟线为‘close’\n\n    let xx, yy\n    let isBegin = false\n    let idx\n    let count = 0\n    let clr\n    if (this.info.color === undefined) {\n      clr = getLineColor(this.info.colorIndex)\n    } else {\n      clr = this.color[this.info.color]\n    }\n\n    _drawBegin(this.context, clr)\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + idx * (this.linkInfo.unitX + this.linkInfo.spaceX)\n      yy = this.rectMain.top + Math.round((this.maxmin.max - getValue(this.data, this.info.labelY, index)) * this.maxmin.unitY)\n      if (Math.floor(idx / this.info.skips) > count) {\n        count = Math.floor(idx / this.info.skips)\n        isBegin = false\n      }\n      if (!isBegin) {\n        isBegin = inRect(this.rectMain, { x: xx, y: yy })\n        if (isBegin) _drawmoveTo(this.context, xx, yy)\n        continue\n      }\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineRight 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  findNearTimeToIndex\n} from './cl.chart.tools'\nimport getValue, {\n  getSize\n} from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawRight (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n  this.symbol = father.layout.symbol\n\n  this.onPaint = function (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n    this.rightData = this.source.getData('RIGHT')\n    if (getSize(this.rightData) < 1) return\n\n    const len = _getTxtWidth(this.context, '▲', this.symbol.font, this.symbol.pixel)\n    for (let i = 0; i < this.rightData.value.length; i++) {\n      const idx = findNearTimeToIndex(this.data, getValue(this.rightData, 'time', i))\n      const offset = idx - this.linkInfo.minIndex\n      const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n      if (xx < this.rectMain.left) {\n        continue\n      }\n      let clr = this.color.button\n      if (this.linkInfo.rightMode !== 'no') clr = this.color.vol\n      _drawTxt(this.context, xx - Math.floor(len / 2), this.rectMain.top + this.rectMain.height - this.symbol.pixel - this.symbol.spaceY,\n        '▲', this.symbol.font, this.symbol.pixel, clr, { y: 'top' })\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawLineAlone,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo,\n  getLineColor\n} from '../chart/cl.chart.init'\n\nexport default function ClDrawVLine (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  // this.rectMain = {\n  //   left:rectMain.left,\n  //   top:rectMain.top,\n  //   width:rectMain.width,\n  //   height:rectMain.height\n  // };\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    if (this.info.labelX === undefined) this.info.labelX = 'time'\n    if (this.info.labelY === undefined) this.info.labelY = 'vol'\n\n    let xx, yy, value\n    let idx\n    let clr\n    if (this.info.color === undefined) {\n      clr = getLineColor(this.info.colorIndex)\n    } else {\n      clr = this.color[this.info.color]\n    }\n\n    _drawBegin(this.context, clr)\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + Math.floor(idx * (this.linkInfo.spaceX + this.linkInfo.unitX))\n      value = getValue(this.data, this.info.labelY, k)\n      if (value < 0) continue\n      yy = this.rectMain.top + Math.round((this.maxmin.max - value) * this.maxmin.unitY)\n      if (yy < this.rectMain.top) {\n        yy = this.rectMain.top + 1\n        _drawLineAlone(this.context, xx, this.rectMain.top + this.rectMain.height - 1, xx, yy, this.color.white)\n        continue\n      }\n      _drawmoveTo(this.context, xx, this.rectMain.top + this.rectMain.height - 1)\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","import ClDrawKBar from './chart/cl.draw.kbar'\nimport ClDrawLine from './chart/cl.draw.line'\nimport ClDrawRight from './chart/cl.draw.right'\nimport ClDrawVBar from './chart/cl.draw.vbar'\nimport ClDrawVLine from './chart/cl.draw.vline'\n\nexport const CHART_LAYOUT = {\n  margin: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }, // 边界偏移值\n  offset: {\n    left: 2,\n    top: 2,\n    right: 2,\n    bottom: 0\n  }, // 实际画图区域的偏移值\n  title: {\n    pixel: 12,\n    height: 18,\n    spaceX: 10,\n    spaceY: 2,\n    font: 'sans-serif'\n  }, // 标题文字的定义\n  axisX: {\n    pixel: 12,\n    height: 18,\n    width: 50,\n    spaceX: 2,\n    font: 'sans-serif'\n  },\n  scroll: {\n    pixel: 12,\n    size: 15,\n    spaceX: 10,\n    font: 'sans-serif'\n  },\n  digit: {\n    pixel: 12,\n    height: 16,\n    spaceX: 3,\n    font: 'sans-serif'\n  }, // 数字的定义\n  symbol: {\n    pixel: 10,\n    size: 18,\n    spaceX: 3,\n    font: 'sans-serif'\n  }// 标记的定义\n}\n// 按钮的预定义\nexport const CHART_BUTTONS = [\n  { key: 'zoomin' },\n  { key: 'zoomout' },\n  { key: 'exright' }\n]\n\n// 预定义参数\nexport const CHART_ORDER = {\n  style: 'normal', // 'tiny'只显示买一卖一 'normal' 5档买卖盘\n  title: {\n    display: 'text' // none 不显示 btn 按钮 text 文字\n  }\n}\nconst ZOOM_INFO_DEF = {\n  index: 3,\n  // list: [1, 2, 4, 5, 7, 9, 12, 15, 19]\n  list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n}\n// 预定义参数\nexport const CHART_KBAR = {\n  // buttons: ['zoomin', 'exright', 'zoomout'],\n  // title: { display: 'none' },\n  // scroll: {display: 'none'},\n  zoomInfo: ZOOM_INFO_DEF,\n  // zoomInfo: {\n  //   min: 1,\n  //   max: 26,\n  //   index: 2, // value = index*index + 1 [1,2,5,10,17,26]\n  //   value: 7 // 实际的值，如果超过10，就会index=3，如果为4，index=1 index = sqrt（value - 1）\n  // },\n  scroll: {\n    display: 'none' // none不显示\n  },\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'K线' // 需要显示的文字信息\n  },\n  axisX: {\n    lines: 0,\n    display: 'none', // none不显示， both 两边各一个值, block ：根据lines每个块显示一个值 = 显示坐标\n    type: 'normal', // 有 day1 当日 day5 5日线 和 normal:日线 三种模式\n    // ??? 是否把这三种统一起来\n    format: 'date' // date time datetime normal tradetime(9:30) 根据交易时间此时 = 输出的信息格式    width: 50       // 显示宽度，web下\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示, both, noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price 保留一定小数位 vol 没有小数\n    },\n    right: {\n      display: 'both', // none不显示，noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // rate, price vol\n    }\n  },\n  lines: [{\n    // type: 'l_kbar',\n    className: ClDrawKBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    }\n    // 第一根线默认的key是跟随chart的hotKey变化而变化的，其他线要么自己有数据，要么根据hotKey加上公式计算出自己的key\n  },\n  {\n    className: ClDrawRight\n  },\n  {\n    className: ClDrawLine,\n    info: { // 输出在信息栏目的数据\n      txt: '5:',\n      labelY: 'value', // 从key中获取对应的数据标签 用于显示信息用\n      format: 'price'\n    },\n    formula: { // 数据生成方式，都需要基于基本数据，没有formula表示取绑定的数据\n      key: 'DAYM1', // 生成和获取数据的key，\n      command: `out = this.MA('close',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM2', // 获取数据的key，\n      command: `out = this.MA('close',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM3', // 获取数据的key，\n      command: `out = this.MA('close',20)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '60:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM4', // 获取数据的key，\n      command: `out = this.MA('close',60)` // 公式只能输出值到out中\n    }\n  }]\n}\n\nexport const CHART_VBAR = {\n  zoomInfo: ZOOM_INFO_DEF,\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'VOL' // 需要显示的文字信息\n  },\n  axisX: {\n    lines: 0,\n    display: 'both', // 左右两边显示\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      labelY: 'vol', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '5:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL1', // 获取数据的key，\n      command: `out = this.MA('vol',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL2', // 获取数据的key，\n      command: `out = this.MA('vol',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL3', // 获取数据的key，\n      command: `out = this.MA('vol',20)` // 公式只能输出值到out中\n    }\n  }]\n}\n\nexport const CHART_NOW = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'none', // none不显示，sides：两边各一个值, block：根据块大小每个块显示一个值 = 显示坐标\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    },\n    info: {\n      labelX: 'idx',\n      labelY: 'close',\n      showSort: 'idx'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      showSort: 'idx'\n    },\n    formula: {\n      key: 'NOWM1', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\nexport const CHART_NOWVOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'both', // 左右两边显示\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['decvol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'idx',\n      labelY: 'decvol',\n      color: 'vol'\n    }\n  }]\n}\n\nexport const CHART_DAY5 = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'none', // none不显示，both 边各一个值, block 根据块大小每个块显示一个值 = 显示坐标\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['close'], // 参与计算最大值的标签\n      minvalue: ['close'] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'close'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      showSort: 'idx'\n    },\n    formula: {\n      key: 'NOWDAY5', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\n\nexport const CHART_DAY5VOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'block',\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'nofoot', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'vol',\n      color: 'vol'\n    }\n  }]\n}\n\nexport const CHART_NORMAL = {\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'NORMAL'\n  },\n  axisX: {\n    lines: 0,\n    display: 'none',\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    },\n    right: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    }\n  },\n  lines: [{\n    className: ClDrawLine\n  }]\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineVBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawVBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawVBar (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.source = father.father\n\n  this.maxmin = father.maxmin\n\n  this.onPaint = function (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    _drawBegin(this.context, this.color.red)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) <= parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: this.color.sys === 'white',\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.red\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n    _drawBegin(this.context, this.color.green)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) > parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.green\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisY 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  formatInfo\n} from '../util/cl.tool'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawAxisY (father, rectMain, align) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  this.linkInfo = father.father.linkInfo\n\n  this.static = father.static\n\n  this.align = align\n  this.axisY = father.config.axisY\n\n  this.maxmin = father.maxmin\n  this.text = father.layout.title\n\n  this.onPaint = function () {\n    if (this.axisY[this.align].display === 'none') return\n    if (this.linkInfo.hideInfo) return\n\n    let xx, yy\n    let value, clr\n\n    let posX\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    if (this.align === 'left') {\n      if (this.axisPlatform === 'phone') {\n        posX = 'start'\n        xx = this.rectMain.left + offX\n      } else {\n        posX = 'end'\n        xx = this.rectMain.left + this.rectMain.width + offX\n      }\n    } else {\n      if (this.axisPlatform === 'phone') {\n        posX = 'end'\n        xx = this.rectMain.left + this.rectMain.width - offX\n      } else {\n        posX = 'start'\n        xx = this.rectMain.left - offX\n      }\n    }\n    yy = this.rectMain.top + this.scale // 画最上面的\n\n    // console.log(xx, yy)\n    // 画不画最上面的坐标\n    if (this.axisY[this.align].display !== 'noupper') {\n      yy = this.rectMain.top + this.scale // 画最上面的\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.red\n      value = formatInfo(\n        this.maxmin.max,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'top' })\n    }\n    // 画不画最下面的坐标\n    if (this.axisY[this.align].display !== 'nofoot') {\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.green\n      yy = this.rectMain.top + this.rectMain.height - this.scale\n      value = formatInfo(\n        this.maxmin.min,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'bottom' })\n    }\n    // 画其他的坐标线\n    const offy = this.rectMain.height / (this.axisY.lines + 1)\n\n    for (let i = 0; i < this.axisY.lines; i++) {\n      value = this.maxmin.max - offy * (i + 1) / this.maxmin.unitY\n      yy = this.rectMain.top + Math.round((i + 1) * offy)\n      clr = this.color.axis\n      if (this.axisY[this.align].middle !== 'none') {\n        if ((i + 1) < Math.round(this.axisY.lines / 2)) clr = this.color.red\n        if ((i + 1) > Math.round(this.axisY.lines / 2)) clr = this.color.green\n        if ((i + 1) === Math.round(this.axisY.lines / 2)) {\n          value = this.axisY[this.align].middle === 'zero' ? 0 : this.static.before\n        }\n      }\n\n      value = formatInfo(\n        value,\n        this.axisY[this.align].format,\n        this.static.decimal,\n        this.static.before)\n\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'middle' })\n    }\n  }\n}\n","// //////////////////////////////////////////////////\n// 以下是ClChartLine的实体定义  --- 画线类\n// //////////////////////////////////////////////////\n// 实际上就是获取某种类型数据，然后横坐标 0 开始排序，永远是数值型，但显示出什么要到对应的数组中找\n// 纵坐标根据数据类型，计算最大最小值，然后根据画线类型画出数据线，所有的不同全部在ClChart中处理\n// //////////////////////////////////////////////////\nimport {\n  _fillRect,\n  _drawRect,\n  // _getImageData,\n  // _putImageData,\n  _setLineWidth,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  findLabelToIndex,\n  setFixedLineFlags,\n  setMoveLineFlags\n} from './cl.chart.tools'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  copyJsonOfDeep,\n  offsetRect,\n  inArray,\n  isEmptyArray,\n  formatShowTime,\n  formatInfo,\n  inRangeX\n} from '../util/cl.tool'\n\nimport {\n  STOCK_TYPE_INDEX\n} from '../data/../cl.data.def'\nimport getValue, {\n  getSize,\n  fromIndexToTradeTime,\n  getMinuteCount\n} from '../data/cl.data.tools'\n\nimport ClChartButton from './cl.chart.button'\nimport ClChartScroll from './cl.chart.scroll'\nimport ClDrawAxisX from './cl.draw.axisX'\nimport ClDrawAxisY from './cl.draw.axisY'\nimport ClDrawCursor from './cl.draw.cursor'\nimport ClDrawGrid from './cl.draw.grid'\nimport ClDrawInfo from './cl.draw.info'\nimport ClDrawLine from './cl.draw.line'\nimport ClDrawVLine from './cl.draw.vline'\n\nexport default function ClChartLine (father) {\n  initCommonInfo(this, father)\n\n  this.linkInfo = father.linkInfo\n  this.static = this.father.dataLayer.static\n\n  this.data = {}\n  this.maxmin = {}\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 400,\n      height: 200\n    }\n\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = copyJsonOfDeep(cfg.config)\n    // 这里直接赋值是因为外部已经设置好了配置才会开始初始化\n    this.buttons = cfg.buttons || []\n    this.scroll = cfg.config.scroll || {\n      display: 'none'\n    }\n    this.childCharts = {}\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n    // 初始化子窗口\n    this.childDraws = {}\n    this.setChildDraw()\n    this.childLines = {}\n    this.setChildLines()\n    // 初始化按钮\n    this.setButtons()\n    // 初始化滚动条\n    this.setScroll()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    if (this.config.zoomInfo !== undefined) {\n      this.setZoomInfo()\n    }\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    // rectChart 画图区\n    // rectTitle rectMess\n    // rectAxisX\n    // rectScroll\n    // rectAxisYLeft rectAxisYRight\n    // rectGridLine 坐标线区域\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n    const axisInfo = {\n      width: this.layout.axisX.width\n    } //\n\n    // 计算title和mess矩形位置\n    this.rectTitle = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    this.rectMess = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: axisInfo.width,\n        height: this.layout.title.height\n      }\n      this.rectMess = {\n        left: this.rectChart.left + axisInfo.width + this.scale,\n        top: this.rectChart.top,\n        width: this.rectChart.width - axisInfo.width * 2,\n        height: this.layout.title.height\n      }\n    }\n\n    // 计算rectAxisX和rectScroll矩形位置\n    axisInfo.left = this.rectChart.left\n    axisInfo.right = this.rectChart.left + this.rectChart.width\n    axisInfo.top = this.rectTitle.top + this.rectTitle.height\n    axisInfo.bottom = this.rectChart.top + this.rectChart.height\n\n    if (this.axisPlatform !== 'phone') {\n      if (this.config.axisY.left.display !== 'none') axisInfo.left += this.layout.axisX.width\n      if (this.config.axisY.right.display !== 'none') axisInfo.right -= this.layout.axisX.width\n    }\n    if (this.config.axisX.display !== 'none') {\n      axisInfo.bottom -= this.layout.axisX.height\n    }\n    if (this.scroll.display !== 'none') {\n      axisInfo.bottom -= this.layout.scroll.size\n    }\n    // 此时已经可以得出画坐标线的区域了\n    this.rectGridLine = {\n      left: axisInfo.left,\n      top: axisInfo.top,\n      width: axisInfo.right - axisInfo.left,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYLeft = {\n      left: this.rectChart.left,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYRight = {\n      left: this.rectChart.left + this.rectChart.width - axisInfo.width,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n\n    this.rectChart = offsetRect(this.rectGridLine, this.layout.offset)\n\n    this.rectAxisX = {\n      left: 0,\n      top: axisInfo.bottom,\n      width: 0,\n      height: 0\n    }\n    if (this.config.axisX.display !== 'none') {\n      this.rectAxisX = {\n        left: axisInfo.left,\n        top: axisInfo.bottom + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.axisX.height\n      }\n    }\n    if (this.scroll.display !== 'none') {\n      this.rectScroll = {\n        left: axisInfo.left,\n        top: this.rectAxisX.top + this.rectAxisX.height + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.scroll.size\n      }\n    }\n  }\n  this.getLineDataKey = function (line) {\n    if (line.formula === undefined) return this.hotKey\n    return line.formula.key\n  }\n  this.setChildLines = function () {\n    // l_kbar，l_line，l_nowvol，l_vbar l_nowline\n    let line\n    let clr = 0\n    for (let i = 0; i < this.config.lines.length; i++) {\n      const ClassName = this.config.lines[i].className\n      line = new ClassName(this, this.rectChart)\n\n      this.childLines['NAME' + i] = line\n      line.name = 'NAME' + i\n      line.hotKey = this.getLineDataKey(this.config.lines[i])\n      if (inArray(ClassName, [ClDrawLine, ClDrawVLine])) {\n        line.info = {\n          labelX: 'idx',\n          labelY: 'value'\n        }\n        if (this.config.lines[i].info !== undefined) line.info = this.config.lines[i].info\n        if (this.config.axisX.type === 'day5') {\n          // 专用于5日线跨天的连线问题\n          line.info.skips = getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n        line.info.colorIndex = clr\n        clr++\n      }\n    }\n  }\n  this.setChildDraw = function () {\n    let draw\n    draw = new ClDrawCursor(this, this.rectGridLine, this.rectChart)\n    this.childDraws['CURSOR'] = draw\n\n    if (this.config.title.display !== 'none') {\n      draw = new ClDrawInfo(this, this.rectTitle, this.rectMess)\n      this.childDraws['TITLE'] = draw\n    }\n    if (this.config.axisY.left.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYLeft, 'left')\n      this.childDraws['AXISY_LEFT'] = draw\n    }\n    if (this.config.axisY.right.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYRight, 'right')\n      this.childDraws['AXISY_RIGHT'] = draw\n    }\n    if (this.config.axisX.display !== 'none') {\n      draw = new ClDrawAxisX(this, this.rectAxisX)\n      this.childDraws['AXISX'] = draw\n    }\n    draw = new ClDrawGrid(this, this.rectGridLine)\n    this.childDraws['GRID'] = draw\n    // 下面是line的定义\n  }\n  this.setScroll = function () {\n    if (this.scroll.display === 'none') return\n    const chart = new ClChartScroll(this)\n    chart.name = 'HSCROLL'\n    // this.father.bindEvent(chart);\n    this.childCharts[chart.name] = chart\n\n    chart.init({\n      rectMain: this.rectScroll,\n      config: {\n        width: 8\n      }\n    },\n    result => {\n      const self = result.self.father\n      if (self.father.linkInfo.minIndex !== result.minIndex) {\n        self.father.linkInfo.minIndex = result.minIndex\n        self.father.onPaint()\n      }\n    })\n  }\n  this.createButton = function (name) {\n    if (this.childCharts[name] !== undefined) return this.childCharts[name]\n    const chart = new ClChartButton(this)\n    chart.name = name\n    // this.father.bindEvent(chart);\n    this.childCharts[name] = chart\n    return chart\n  }\n  this.hasButton = function (key, buttons) {\n    for (let k = 0; k < buttons.length; k++) {\n      if (key === buttons[k].key) return true\n    }\n    return false\n  }\n  this.setButtons = function () {\n    let chart\n    let xx, yy\n    let ww = 25 * this.scale\n    if (this.hasButton('zoomin', this.buttons) || this.hasButton('zoomout', this.buttons)) {\n      chart = this.createButton('zoomin')\n      xx = Math.floor((this.rectChart.width - (ww + ww) * 2) / 4)\n      yy = this.rectChart.top + this.rectChart.height * 0.95 - ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '-'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index > 0) {\n          this.config.zoomInfo.index--\n          this.setZoomInfo()\n          this.father.onPaint()\n        }\n      })\n      chart = this.createButton('zoomout')\n      xx += 2 * ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '+'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index < this.config.zoomInfo.list.length - 1) {\n          this.config.zoomInfo.index++\n          this.setZoomInfo()\n          this.father.onPaint()\n        }\n      })\n    }\n    if (this.hasButton('exright', this.buttons)) {\n      chart = this.createButton('exright')\n      ww = _getTxtWidth(this.context, '前复权', this.layout.title.font, this.layout.title.pixel)\n      xx = this.rectMain.left + this.rectMain.width - ww - this.layout.title.spaceX\n      if (this.config.title.display !== 'none') {\n        yy = (this.rectMess.height - this.layout.title.pixel - 2 * this.layout.title.spaceY) / 2\n      } else {\n        yy = this.rectMain.top + this.layout.title.spaceY\n      }\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: this.rectMess.top + yy,\n          width: ww + this.layout.title.spaceX,\n          height: this.layout.title.pixel + 2 * this.layout.title.spaceY\n        },\n        config: {\n          shape: 'box'\n        },\n        info: [{\n          map: '不除权',\n          value: 'no'\n        },\n        {\n          map: '前复权',\n          value: 'forword'\n        }\n          // , {\n          //   map: '后复权',\n          //   value: 'back'\n          // }\n        ]\n      },\n      result => {\n        // const self = result.self.father;\n        this.father.linkInfo.rightMode = result.info.value\n        this.father.fastDrawEnd()\n        this.father.onPaint()\n      })\n      chart.hotIdx = 0\n    }\n  }\n  // //////////////////////////////////////\n  // 下面开始是功能性函数 主要用于简化主函数的结构\n  // //////////////////////////////////////\n  this.getDecimal = function (label) {\n    if (label === 'vol' || label === 'decvol') return 0\n    return this.static.decimal\n  }\n  this.addLine = function (line) {\n    // this.removeLine(line.name);\n    this.config.lines.push(line)\n  }\n  this.removeLine = function (name) {\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].name === undefined) continue\n      if (this.config.lines[i].name === name) {\n        this.config.lines.splice(i, 1)\n      }\n    }\n  }\n  this.setZoomInfo = function () {\n    const info = this.config.zoomInfo\n    info.index = info.index > info.list.length - 1 ? info.list.length - 1 : info.index\n    info.index = info.index < 0 ? 0 : info.index\n    const value = info.list[info.index]\n\n    this.linkInfo.unitX = value * this.scale\n    if (this.linkInfo.unitX < this.scale) this.linkInfo.unitX = this.scale\n    this.linkInfo.spaceX = this.linkInfo.unitX / 4\n    if (this.linkInfo.spaceX < this.scale) this.linkInfo.spaceX = this.scale\n\n    if (this.childCharts['zoomin']) {\n      if (info.index === 0) this.childCharts['zoomin'].setStatus('disabled')\n      else this.childCharts['zoomin'].setStatus('enabled')\n    }\n    if (this.childCharts['zoomout']) {\n      if (info.index === info.list.length - 1) this.childCharts['zoomout'].setStatus('disabled')\n      else this.childCharts['zoomout'].setStatus('enabled')\n    }\n    this.father.fastDrawEnd()\n  }\n  this.setHotButton = function (chart) {\n    for (const name in this.childCharts) {\n      if (this.childCharts[name] === chart) {\n        this.childCharts[name].focused = true\n      } else {\n        this.childCharts[name].focused = false\n      }\n    }\n  }\n  // ////////////////////////////////////////////////\n  // 下面的函数为绘图函数，\n  // ////////////////////////////////////////////////\n\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  this.drawChildCharts = function () {\n    let top\n    for (const name in this.childCharts) {\n      if (!this.childCharts[name].focused) {\n        this.childCharts[name].onPaint()\n      } else {\n        top = this.childCharts[name]\n      }\n    }\n    if (top) top.onPaint()\n  }\n  this.beforeLocation = function () {\n    for (const name in this.childLines) {\n      if (this.childLines[name].beforeLocation) {\n        this.childLines[name].beforeLocation()\n      }\n    }\n  }\n  this.drawChildLines = function () {\n    for (const name in this.childLines) {\n      if (this.childLines[name].hotKey !== undefined) {\n        this.childLines[name].onPaint(this.childLines[name].hotKey)\n      } else {\n        this.childLines[name].onPaint(this.hotKey)\n      }\n    }\n  }\n  // 按记录索引根据keys获取一组数据，数据为{MA:[]...} 主要提供给鼠标移动\n  this.getMoveData = function (index) {\n    let lines = this.config.lines\n    const out = []\n    if (!Array.isArray(lines)) return out\n\n    let value, info\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].info === undefined) continue\n      if (lines[k].info.labelY !== undefined) {\n        if (lines[k].formula === undefined) {\n          value = getValue(this.data, lines[k].info.labelY, index)\n        } else {\n          value = getValue(this.father.getData(lines[k].formula.key), lines[k].info.labelY,\n            index - this.linkInfo.minIndex)\n        }\n        info = formatInfo(value, lines[k].info.format, this.static.decimal)\n        out.push({\n          index: k,\n          txt: lines[k].info.txt,\n          value: info\n        })\n      } else {\n        out.push({\n          index: k,\n          txt: lines[k].info.txt\n        })\n      }\n    }\n    return out\n  }\n  this.drawTitleInfo = function (index) {\n    if (this.config.title.display === 'none') return\n    if (index === undefined || index < 0 || index > this.linkInfo.maxIndex) index = this.linkInfo.maxIndex\n    this.childDraws['TITLE'].onPaint(this.getMoveData(index))\n  }\n  this.drawChildDraw = function (name) {\n    if (this.childDraws[name] !== undefined) {\n      if (name === 'TITLE') {\n        this.drawTitleInfo(this.linkInfo.moveIndex)\n      } else {\n        this.childDraws[name].onPaint()\n      }\n    }\n  }\n  this.onPaint = function () {\n    this.beforeLocation() // 数据定位前需要做的事情\n\n    this.data = this.father.getData(this.hotKey)\n    this.locationData()\n    this.father.readyData(this.data, this.config.lines)\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n\n    this.drawChildDraw('GRID') // 先画线格\n\n    // 为画图做准备工作\n    this.readyDraw()\n    this.drawChildDraw('AXISX')\n    this.drawChildDraw('AXISY_LEFT')\n    this.drawChildDraw('AXISY_RIGHT')\n\n    this.drawChildLines() // 画出所有的线\n\n    this.drawChildDraw('TITLE')\n    this.drawChildCharts()\n\n    // this.img = _getImageData(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n  }\n\n  // ///////////////////////////////////////////////////////////\n  // 画图前的准备工作\n  // ////////////////////////////////////////////////////////////\n  this.getMiddle = function (method) {\n    let middle = this.config.axisY.left.middle\n    if (method === 'fixedRight') middle = this.config.axisY.right.middle\n    if (middle === 'before') return this.static.before\n    if (middle === 'zero') return 0\n    return 0\n  }\n  this.calcMaxMin = function (data, extremum, start, stop) {\n    const mm = {\n      max: 0.0,\n      min: 0.0\n    }\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      mm.min = middle * (1 - 0.01)\n      mm.max = middle * (1 + 0.01)\n    }\n    if (data === undefined || isEmptyArray(data.value)) return mm\n\n    let value\n    if (start === undefined) start = 0\n    if (stop === undefined) stop = data.value.length - 1\n\n    for (let k = start; k <= stop; k++) {\n      if (!isEmptyArray(extremum.maxvalue)) {\n        for (let m = 0; m < extremum.maxvalue.length; m++) {\n          if (typeof (extremum.maxvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.maxvalue[m], k)\n          if (value > 0 && value > mm.max) {\n            mm.max = value\n          }\n        }\n      }\n      if (!isEmptyArray(extremum.minvalue)) {\n        for (let m = 0; m < extremum.minvalue.length; m++) {\n          if (typeof (extremum.minvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.minvalue[m], k)\n          if (mm.min === 0.0) mm.min = value\n          if (value > 0 && value < mm.min) {\n            mm.min = value\n          }\n        }\n      }\n    }\n    // //////////////////\n    if (!isEmptyArray(extremum.maxvalue)) {\n      for (let m = 0; m < extremum.maxvalue.length; m++) {\n        if (typeof (extremum.maxvalue[m]) === 'number') {\n          mm.max = extremum.maxvalue[m]\n          break\n        }\n      }\n    }\n    if (!isEmptyArray(extremum.minvalue)) {\n      for (let m = 0; m < extremum.minvalue.length; m++) {\n        if (typeof (extremum.minvalue[m]) === 'number') {\n          mm.min = extremum.minvalue[m]\n          break\n        }\n      }\n    }\n\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      if (mm.max === mm.min) {\n        if (mm.max > middle) mm.min = middle\n        if (mm.min < middle) mm.max = middle\n      }\n      const maxrate = Math.abs(mm.max - middle) / middle\n      const minrate = Math.abs(middle - mm.min) / middle\n      if (maxrate < 0.01 && minrate < 0.01 &&\n        this.static.stktype !== STOCK_TYPE_INDEX) {\n        mm.min = middle * (1 - 0.01)\n        mm.max = middle * (1 + 0.01)\n      } else {\n        if (maxrate > minrate) {\n          mm.min = middle / (1 + maxrate)\n        } else {\n          mm.max = middle * (1 + minrate)\n        }\n      }\n      if (mm.min < 0) mm.min = 0\n    }\n\n    return mm\n  }\n  this.readyScroll = function () { // 计算最大最小值等\n    if (this.scroll.display === 'none') return\n    if (this.childCharts['HSCROLL'] !== undefined) {\n      let left = getValue(this.data, 'time', this.linkInfo.minIndex)\n      left = formatShowTime(this.data.key, left, this.father.dataLayer.tradeTime[0].begin)\n      let right = getValue(this.data, 'time', this.linkInfo.maxIndex)\n      right = formatShowTime(this.data.key, right,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n      let head = getValue(this.data, 'time', 0)\n      head = formatShowTime(this.data.key, head, this.father.dataLayer.tradeTime[0].begin)\n      let tail = getValue(this.data, 'time', this.data.value.length - 1)\n      tail = formatShowTime(this.data.key, tail,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n\n      this.childCharts['HSCROLL'].onChange({\n        head,\n        tail,\n        left,\n        right,\n        min: this.linkInfo.minIndex,\n        max: this.linkInfo.maxIndex,\n        range: this.data.value.length\n      })\n    }\n  }\n  this.getDataRange = function (data) {\n    const out = {\n      minIndex: -1,\n      maxIndex: -1\n    }\n    if (isEmptyArray(data.value) || isEmptyArray(this.data.value)) return out\n    const start = getValue(this.data, 'time', this.linkInfo.minIndex)\n    const stop = getValue(this.data, 'time', this.linkInfo.maxIndex)\n    for (let k = 0; k <= data.value.length - 1; k++) {\n      const tt = getValue(data, 'time', k)\n      if (tt >= start) {\n        out.minIndex = k\n        break\n      }\n    }\n    for (let k = data.value.length - 1; k >= 0; k--) {\n      const tt = getValue(data, 'time', k)\n      if (tt <= stop) {\n        out.maxIndex = k\n        break\n      }\n    }\n    return out\n  }\n  this.locationData = function () {\n    if (this.data === undefined) return\n    const size = getSize(this.data)\n    if (this.config.axisX.type === 'day1') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          scale: this.scale,\n          maxCount: getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else if (this.config.axisX.type === 'day5') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          scale: this.scale,\n          maxCount: 5 * getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else {\n      setMoveLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          scale: this.scale,\n          size\n        }\n      )\n    }\n  }\n  this.readyDraw = function () { // 计算最大最小值等\n    // 画滚动块\n    this.readyScroll()\n\n    // 求最大最小值\n    let mm, maxmin\n    // const force = true;   // 由于定义了没有在后面使用，因此注释掉\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].extremum === undefined) continue\n      if (isEmptyArray(this.config.lines[i].extremum.maxvalue) &&\n        isEmptyArray(this.config.lines[i].extremum.minvalue)) continue\n      // 只对第一个线和有需要的线计算最大最小值\n      // const ds = this.getLineDS(this.config.lines[i]);\n      const formula = this.config.lines[i].formula\n      if (formula !== undefined) {\n        const newdata = this.father.getData(formula.key)\n        const range = this.getDataRange(newdata)\n        mm = this.calcMaxMin(newdata, this.config.lines[i].extremum,\n          range.minIndex, range.maxIndex)\n      } else {\n        mm = this.calcMaxMin(this.data, this.config.lines[i].extremum,\n          this.linkInfo.minIndex, this.linkInfo.maxIndex)\n      }\n      if (maxmin === undefined) maxmin = mm\n      else {\n        maxmin.max = maxmin.max > mm.max ? maxmin.max : mm.max\n        maxmin.min = maxmin.min < mm.min ? maxmin.min : mm.min\n      }\n    } // for\n    this.maxmin.max = maxmin.max\n    this.maxmin.min = maxmin.min\n    this.maxmin.unitY = (this.rectChart.height - 2) / (this.maxmin.max - this.maxmin.min) // 一个单位价位多少像素\n  }\n\n  // ////////////////////////////////////////////////\n  // 下面的函数为事件处理函数，\n  // ////////////////////////////////////////////////\n  this.onClick = function (event) {\n    if (this.axisPlatform !== 'phone1') {\n      this.linkInfo.showCursorLine = !this.linkInfo.showCursorLine\n      if (this.linkInfo.showCursorLine) {\n        this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event)\n      } else {\n        event.reDraw = true // 需要重画\n        this.father.eventLayer.boardEvent(this.father, 'onMouseOut', event)\n      }\n    }\n  }\n  this.onLongPress = function (event) {\n    this.linkInfo.showCursorLine = true\n    this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event)\n  }\n  this.onPinch = function (event) {\n    if (event.scale > 0) {\n      this.config.zoomInfo.index++\n    } else {\n      this.config.zoomInfo.index--\n    }\n    if (this.config.zoomInfo.index < 0) {\n      this.config.zoomInfo.index = 0\n      return\n    }\n    // this.setZoomInfo(Math.pow(2, this.config.zoomInfo.index) + 1)\n    this.setZoomInfo(this.config.zoomInfo.index * 2 + 1)\n    this.father.onPaint()\n  }\n  this.onMouseOut = function (event) {\n    if (this.linkInfo.showCursorLine || event.reDraw) {\n      this.linkInfo.moveIndex = this.linkInfo.maxIndex\n      this.drawTitleInfo(this.linkInfo.moveIndex)\n      // this.father.onPaint(this)\n    }\n    this.childDraws['CURSOR'].onClear()\n  }\n  this.onMouseWheel = function (event) {\n    if (this.config.zoomInfo === undefined) return\n\n    let step = Math.floor(event.deltaY / 10)\n    if (step === 0) step = event.deltaY > 0 ? 1 : -1\n    let newIndex\n    if (step > 0) newIndex = this.config.zoomInfo.index - 1\n    else newIndex = this.config.zoomInfo.index + 1\n    if (newIndex >= 0 && newIndex <= this.config.zoomInfo.list.length - 1) {\n      this.config.zoomInfo.index = newIndex\n      this.setZoomInfo()\n      this.father.onPaint()\n    }\n  }\n\n  this.onKeyDown = function (event) {\n    switch (event.keyCode) {\n      case 38: // up\n        break\n      case 40: // down\n        break\n      case 37: // left\n        break\n      case 39: // right\n        break\n    }\n  }\n  this.onMouseMove = function (event) {\n    if (this.linkInfo.hideInfo) return\n    if (!this.linkInfo.showCursorLine) return\n    // this.draw_clear();\n    // 找到X坐标对应的数据索引\n    const mousePos = event.mousePos\n    // if (this.img !== undefined) {\n    //   _putImageData(this.context, this.img, this.rectMain.left, this.rectMain.top)\n    // }\n\n    const mouseIndex = this.getMouseMoveData(mousePos.x)\n    let idx, valueY\n    let valueX = mouseIndex\n    if (mouseIndex > 0) {\n      if (this.config.axisX.type === 'day1' || this.config.axisX.type === 'day5') {\n        valueX = valueX % 240\n        valueX = fromIndexToTradeTime(valueX, this.father.dataLayer.tradeTime, this.father.dataLayer.tradeDate)\n        idx = findLabelToIndex(this.data, mouseIndex, 'idx')\n      } else {\n        valueX = getValue(this.data, 'time', mouseIndex)\n        idx = mouseIndex\n      }\n      if (inRangeX(this.rectChart, mousePos.x)) {\n        this.drawTitleInfo(idx)\n      }\n      if (this.linkInfo.moveIndex !== mouseIndex) {\n        this.linkInfo.moveIndex = mouseIndex\n        this.callback({\n          event: 'mousemove',\n          before: mouseIndex > 0 ? getValue(this.data, 'close', mouseIndex - 1) : getValue(this.data, 'open', 0),\n          data: this.data.value[mouseIndex]\n        })\n      }\n    }\n    this.childDraws['CURSOR'].onPaint(mousePos, valueX, valueY)\n  }\n\n  // 事件监听\n  // ////////////////////////////////////////////////////////////////\n  //   处理数据的函数集合\n  // ///////////////////////////////////////////////////////////////\n  this.getMouseMoveData = function (xpos) {\n    const idx = Math.round((xpos - this.rectChart.left) / (this.linkInfo.unitX + this.linkInfo.spaceX) - 0.5)\n    if (this.config.axisX.type === 'day1') {\n      return idx\n    } else if (this.config.axisX.type === 'day5') {\n      return idx\n    } else {\n      return this.linkInfo.minIndex + idx\n    }\n  }\n\n  // /// ClChart end.\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawCursor 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxtRect,\n  _clearRect,\n  _drawLineAlone\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  inRangeX,\n  inRangeY,\n  formatShowTime,\n  formatInfo\n} from '../util/cl.tool'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawCursor (father, rectMain, rectChart) {\n  initCommonInfo(this, father)\n  this.rectFather = father.rectMain\n  this.rectMain = rectMain // 画十字线和边界标签\n  this.rectChart = rectChart // 鼠标有效区域\n\n  this.linkInfo = father.father.linkInfo\n  this.static = father.static\n\n  this.axisXInfo = father.config.axisX\n  this.axisYInfo = father.config.axisY\n\n  this.maxmin = father.maxmin\n  this.axisX = father.layout.axisX\n\n  this.context = father.father.cursorCanvas.context\n  this.onClear = function () {\n    _clearRect(this.context, this.rectFather.left, this.rectFather.top,\n      this.rectFather.left + this.rectFather.width,\n      this.rectFather.top + this.rectFather.height)\n  }\n\n  this.onPaint = function (mousePos, valueX, valueY) {\n    if (typeof this.context._beforePaint === 'function') {\n      this.context._beforePaint()\n    }\n    if (inRangeX(this.rectChart, mousePos.x) === false) return\n    this.onClear()\n\n    let txt\n    let xx = mousePos.x\n    let yy = mousePos.y\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    // 如果鼠标在本图区域，就画横线信息\n    if (inRangeY(this.rectChart, mousePos.y)) {\n      if (valueY === undefined) {\n        valueY = this.maxmin.max - (mousePos.y - this.rectChart.top) / this.maxmin.unitY\n      } else {\n        yy = (this.maxmin.max - valueY) * this.maxmin.unitY + this.rectChart.top\n      }\n\n      _drawLineAlone(this.context, this.rectMain.left, yy, this.rectMain.left + this.rectMain.width, yy, this.color.grid)\n      let posX = this.axisPlatform === 'phone' ? 'start' : 'end'\n\n      if (this.axisYInfo.left.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.left.format,\n          this.static.decimal,\n          this.static.before)\n        xx = this.rectMain.left + offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n      if (this.axisYInfo.right.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.right.format,\n          this.static.decimal,\n          this.static.before)\n        posX = this.axisPlatform === 'phone' ? 'end' : 'start'\n        xx = this.rectMain.left + this.rectMain.width - offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n    }\n\n    _drawLineAlone(this.context, mousePos.x, this.rectMain.top, mousePos.x, this.rectMain.top + this.rectMain.height - 1, this.color.grid)\n    if (this.axisXInfo.display !== 'none') {\n      xx = mousePos.x\n      const th = Math.floor((this.axisX.height - this.axisX.pixel - this.scale) / 2)\n      yy = this.rectMain.top + this.rectMain.height + th\n      txt = formatShowTime(this.father.data.key, valueX)\n      const len = Math.round(_getTxtWidth(this.context, txt, this.axisX.font, this.axisX.pixel) / 2)\n      let posX = 'center'\n      if (xx - len < this.rectMain.left + offX) { xx = this.rectMain.left + offX; posX = 'start' }\n      if (xx + len > this.rectMain.left + this.rectMain.width - offX) {\n        xx = this.rectMain.left + this.rectMain.width - offX\n        posX = 'end'\n      }\n      _drawTxtRect(this.context, xx, yy, txt, {\n        font: this.axisX.font,\n        pixel: this.axisX.pixel,\n        spaceX: this.axisX.spaceX,\n        clr: this.color.txt,\n        bakclr: this.color.grid,\n        x: posX,\n        y: 'top'\n      })\n    }\n    if (typeof this.context._afterPaint === 'function') {\n      this.context._afterPaint()\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _fillRect,\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawInfo (father, rectMain, rectMess) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n  this.rectMess = rectMess\n\n  this.linkInfo = father.father.linkInfo\n\n  this.title = father.layout.title\n  this.titleInfo = father.config.title\n\n  this.onPaint = function (message) {\n    if (this.titleInfo.display === 'none' || this.linkInfo.hideInfo) return\n\n    _fillRect(this.context, this.rectMain.left + this.scale, this.rectMain.top + this.scale,\n      this.rectMess.left + this.rectMess.width - 2 * this.scale,\n      this.rectMain.height - 2 * this.scale, this.color.back)\n\n    let clr = this.color.txt\n    const spaceY = Math.round((this.title.height - this.title.pixel) / 2) - this.scale\n    const yy = this.rectMess.top + spaceY\n\n    if (this.titleInfo.label !== undefined) {\n      _drawTxt(this.context, this.rectMain.left + this.scale, yy, this.titleInfo.label,\n        this.title.font, this.title.pixel, clr)\n    }\n    let xx = this.rectMess.left + this.scale\n    for (let i = 0; i < message.length; i++) {\n      clr = this.color.line[i]\n      if (message[i].txt !== undefined) {\n        _drawTxt(this.context, xx, yy, message[i].txt, this.title.font, this.title.pixel, clr)\n        xx += _getTxtWidth(this.context, message[i].txt, this.title.font, this.title.pixel) + this.title.spaceX\n      }\n      if (message[i].value === undefined) continue\n      _drawTxt(this.context, xx, yy, ' ' + message[i].value, this.title.font, this.title.pixel, clr)\n      xx += _getTxtWidth(this.context, ' ' + message[i].value, this.title.font, this.title.pixel) + this.title.spaceX\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisX 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  // _drawLineAlone,\n  _drawTxt\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  getDate,\n  formatShowTime\n} from '../util/cl.tool'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawAxisX (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n  this.axisX = father.config.axisX\n\n  this.maxmin = father.maxmin\n  this.text = father.layout.axisX\n\n  this.onPaint = function () {\n    this.data = father.data\n    if (this.axisX.display === 'none') return\n\n    let xx, value, spaceX\n    xx = this.rectMain.left + this.text.spaceX\n\n    const yy = this.rectMain.top + this.rectMain.height / 2\n    if (this.axisX.display === 'block') {\n      let count = -1\n      let days = 0\n      const daymins = this.linkInfo.maxCount / (this.axisX.lines + 1)\n      spaceX = this.rectMain.width / (this.axisX.lines + 1)\n      for (let k = this.linkInfo.minIndex; k <= this.linkInfo.maxIndex; k++) {\n        const index = getValue(this.data, 'idx', k)\n        if (index < 0) continue\n        days = Math.floor(index / daymins)\n        if (days > count) {\n          count = days\n          xx = this.rectMain.left + spaceX / 2 + spaceX * count\n          value = getDate(getValue(this.data, 'time', k))\n          _drawTxt(this.context, xx, yy, value,\n            this.text.font, this.text.pixel, this.color.axis, { y: 'middle', x: 'center' })\n        }\n      }\n    } else {\n      if (this.axisX.format === 'tradetime') {\n        this.tradeTime = this.father.father.dataLayer.tradeTime\n        value = formatShowTime(this.data.key, 0, this.tradeTime[0].begin)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = formatShowTime(this.data.key, 0, this.tradeTime[this.tradeTime.length - 1].end)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      } else {\n        // _drawLineAlone(this.context, this.rectMain.left, this.rectMain.top,\n        //   this.rectMain.left + this.rectMain.width, this.rectMain.top, this.color.red)\n        value = getValue(this.data, 'time', this.linkInfo.minIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.min)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = getValue(this.data, 'time', this.linkInfo.maxIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.max)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      }\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawHline,\n  _drawVline\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawGrid (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.axisX = father.config.axisX\n  this.axisY = father.config.axisY\n\n  this.onPaint = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top)\n    if (this.axisY.lines > 0) {\n      const offy = this.rectMain.height / (this.axisY.lines + 1)\n      for (let i = 0; i < this.axisY.lines; i++) {\n        _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + Math.round((i + 1) * offy))\n      }\n    }\n    if (this.axisX.display !== 'none') {\n      _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + this.rectMain.height)\n    }\n    // 画纵坐标\n    if (this.axisX.lines > 0) {\n      const offx = this.rectMain.width / (this.axisX.lines + 1)\n      for (let i = 0; i < this.axisX.lines; i++) {\n        _drawVline(this.context, this.rectMain.left + Math.round((i + 1) * offx), this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      }\n    }\n    if (this.axisPlatform !== 'phone') {\n      _drawVline(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      _drawVline(this.context, this.rectMain.left + this.rectMain.width, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n// 可以拖动的滑动块定义\n// 支持锁定模式和自由模式，锁定模式滑动块固定大小，和传统滑动块类似，自由模式可左右选择范围，并返回值域，\n// 通常定义最大最小值，当前选定的最大最小值，并在鼠标放开后返回当前值域\n// ///////////////////////////////////////////////////////////////\nimport {\n  _getTxtWidth,\n  _setLineWidth,\n  _drawTxt,\n  _fillRect,\n  _drawRect,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  changeCursorStyle,\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  offsetRect,\n  inRect\n} from '../util/cl.tool'\n\nexport default function ClChartScroll (father) {\n  const DEFAULT_SCROLL = {\n    // display: 'none', // true\n    shape: 'fixed', // fixed 为固定宽度 free有边界\n    direct: 'horizontal', // ver 竖立 和横\n    range: 100,\n    select: { min: 40, max: 60 }, // min == beginIdx max = pageCount\n    status: 'enabled',\n    txt: {}\n  }\n  initCommonInfo(this, father)\n\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 25 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_SCROLL)\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    const count = this.config.range\n    let spaceX\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n\n    let start, stop, spaceY\n    if (this.config.direct === 'horizontal') {\n      spaceX = this.rectMain.width / (count - 1)\n      spaceY = this.rectMain.height - this.scale * 2\n      start = this.rectMain.left + spaceX * this.config.select.min\n      stop = this.rectMain.left + spaceX * this.config.select.max\n      if (this.config.shape === 'free') {\n        this.rectMin = {\n          left: start - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMax = {\n          left: stop - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMid = {\n          left: start + this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: stop - start - this.layout.scroll.size,\n          height: spaceY\n        }\n      } else {\n        this.rectMid = {\n          left: start,\n          top: this.rectMain.top + this.scale,\n          width: stop - start,\n          height: spaceY\n        }\n      }\n    } else {\n      // spaceX = this.rectMain.height / (count - 1);\n      // spaceY = this.rectMain.width - this.scale * 2;\n      // start = this.rectMain.top + spaceX * this.config.select;\n      // stop = this.rectMain.top + spaceX * this.config.select;\n    }\n  }\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.onPaint = function () { // 重画\n    _setLineWidth(this.context, this.scale)\n\n    this.drawClear()\n    this.drawGridline() // 先画线格\n    this.setPublicRect()\n    this.drawButton()\n  }\n  // ////////////////////////////////////////////////////////////////\n  // 事件监听\n  // ///////////////////////////////////////////////////////////////\n  this.onChange = function (info) {\n    this.config = updateJsonOfDeep(info, this.config)\n    if (this.config.select.max > this.config.range) this.config.select.max = this.config.range - 1\n    if (info.iscall) {\n      this.callback({ self: this, minIndex: this.config.select.min })\n    }\n  }\n  this.findMouseIndex = function (xpos) {\n    const count = this.config.range\n    const spaceX = this.rectMain.width / (count - 1)\n    const idx = Math.round((xpos - this.rectMain.left) / spaceX)\n    return idx\n  }\n  this.checkMin = function (min) {\n    if (min < 0) return 0\n    if (min > this.config.range - (this.config.select.max - this.config.select.min + 1)) {\n      return this.config.range - (this.config.select.max - this.config.select.min + 1)\n    }\n    return min\n  }\n  this.onInit = function () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  this.onMouseOut = function () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  this.onMouseDown = function (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos)) {\n      this.who = 'min'\n    } else if (inRect(this.rectMax, mousePos)) {\n      this.who = 'max'\n    } else if (inRect(this.rectMid, mousePos)) {\n      this.who = 'mid'\n      this.index = this.findMouseIndex(mousePos.x)\n    } else {\n      this.who = undefined\n    }\n  }\n\n  this.onMouseUp = function (event) {\n    if (this.config.shape !== 'free' && this.who === undefined) {\n      const mousePos = event.mousePos\n      const curIndex = this.findMouseIndex(mousePos.x)\n      let min = curIndex - Math.floor((this.config.select.max - this.config.select.min) / 2)\n      min = this.checkMin(min)\n      this.onChange({ min, iscall: true })\n    }\n    this.who = undefined\n  }\n  this.onMouseMove = function (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos) || inRect(this.rectMax, mousePos)) {\n      changeCursorStyle('col-resize')\n    } else if (inRect(this.rectMid, mousePos)) {\n      changeCursorStyle('move')\n    } else {\n      changeCursorStyle('default')\n    }\n    if (this.who !== undefined) {\n      let min, max\n      const curIndex = this.findMouseIndex(mousePos.x)\n      if (this.config.shape === 'free') {\n        if (curIndex < this.config.select.max) {\n          if (this.who === 'max') {\n            max = curIndex\n          } else if (this.who === 'min') {\n            min = curIndex\n          }\n        } else if (curIndex >= this.config.select.max) {\n          if (this.who === 'min') {\n            min = this.config.select.max\n            max = curIndex\n            this.who = 'max'\n          } else if (this.who === 'max') {\n            max = curIndex\n          }\n        }\n        this.onChange({ min, max, iscall: true })\n      } else {\n        min = this.config.select.min + curIndex - this.index\n        this.index = curIndex\n        min = this.checkMin(min)\n        this.onChange({ min, iscall: true })\n      }\n    }\n  }\n\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  this.drawGridline = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width + this.scale / 2, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  this.drawButton = function () {\n    if (this.config.direct === 'horizontal') {\n      const spaceY = (this.rectChart.height - this.layout.scroll.height) / 2\n      if (this.config.txt.head !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.scale, this.rectChart.top + spaceY,\n          this.config.txt.head,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.tail !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.rectChart.width - this.scale,\n          this.rectChart.top + spaceY, this.config.txt.tail,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n\n      _drawBegin(this.context, this.color.colume)\n      _drawRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height)\n      _fillRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height, this.color.box)\n      if (this.config.shape === 'free') {\n        _fillRect(this.context, this.rectMin.left, this.rectMin.top,\n          this.rectMin.width, this.rectMin.height, this.color.colume)\n        _fillRect(this.context, this.rectMax.left, this.rectMax.top,\n          this.rectMax.width, this.rectMax.height, this.color.colume)\n      }\n      _drawEnd(this.context)\n      const len = _getTxtWidth(this.context, this.config.txt.left, this.layout.scroll.font, this.layout.scroll.pixel) + 2 * this.scale\n      if (this.config.txt.left !== undefined && this.rectMid.width > len) {\n        _drawTxt(this.context, this.rectMid.left + this.scale, this.rectMid.top + spaceY,\n          this.config.txt.left,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.right !== undefined && this.rectMid.width > 2 * len) {\n        _drawTxt(this.context, this.rectMid.left + this.rectMid.width - this.scale,\n          this.rectMid.top + spaceY, this.config.txt.right,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n    }\n    // else {\n\n    // }\n  }\n}\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n//   按钮定义\n// ▲▼※★☆○●◎☉√↑←→↓↖↗↘↙‰℃∧∨△□▽♂♀﹡\n// ///////////////////////////////////////////////////////////////\nimport {\n  _drawRect,\n  _drawVline,\n  _drawHline,\n  _drawCircle,\n  _setLineWidth,\n  _drawTxt,\n  _fillRect,\n  _drawBegin,\n  _drawSignCircle,\n  _drawSignPlot,\n  _setTransColor,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport { updateJsonOfDeep } from '../util/cl.tool'\n\nexport default function ClChartButton (father) {\n  const DEFAULT_BUTTON = {\n    shape: 'arc', // box range radio checkbox set(位置)\n    hotIdx: 0,\n    visible: true,\n    translucent: true, // 是否透明\n    status: 'enabled' // disable focused : 热点\n  }\n  initCommonInfo(this, father)\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 25,\n      height: 25\n    }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_BUTTON)\n\n    this.info = cfg.info || [{\n      map: '+'\n    }]\n    // map: 如果不在以下 '+' '-' 'left' 'right'就表示直接显示字符串\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n  }\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n  }\n  this.setStatus = function (status) {\n    if (this.config.status !== status) {\n      this.config.status = status\n    }\n  }\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.onClick = function (event) {\n    if (!this.config.visible) return\n    // if (this.config.status === 'disabled') return\n    if (this.info.length > 1) {\n      this.config.hotIdx++\n      this.config.hotIdx %= this.info.length\n      this.onPaint()\n    }\n    if (this.config.hotIdx >= 0 && this.config.hotIdx < this.info.length) {\n      this.callback({\n        self: this,\n        info: this.info[this.config.hotIdx]\n      })\n    } else {\n      this.callback({\n        self: this\n      })\n    }\n    event.break = true\n  }\n  // 事件监听\n  this.onPaint = function () { // 重画\n    if (!this.config.visible) return\n    _setLineWidth(this.context, this.scale)\n\n    let clr = this.color.button\n    if (this.config.status === 'disabled') clr = this.color.grid\n\n    _drawBegin(this.context, clr)\n    const center = {\n      xx: Math.floor(this.rectMain.width / 2),\n      yy: Math.floor(this.rectMain.height / 2),\n      offset: 4 * this.scale\n    }\n\n    const info = this.info[this.config.hotIdx]\n    switch (this.config.shape) {\n      case 'set':\n        if (this.config.status === 'focused') {\n          clr = this.color.red\n          if (this.config.translucent) clr = _setTransColor(clr, 0.95)\n          _drawSignPlot(this.context, this.rectMain.left + center.xx,\n            this.rectMain.top + center.xx, {\n              r: Math.round(this.layout.symbol.size / 2),\n              clr\n            }\n          )\n          center.yy = center.xx\n        } else {\n          clr = this.color.vol\n          if (this.config.translucent) clr = _setTransColor(clr, 0.85)\n          _drawSignCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, {\n            r: Math.round(this.layout.symbol.size / 2),\n            clr\n          })\n        }\n        break\n      case 'arc':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'box':\n        _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n        _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n        break\n      case 'range':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'radio':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'checkbox':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      default:\n    }\n    _drawEnd(this.context)\n    if (this.config.status === 'disabled') _drawBegin(this.context, this.color.grid)\n    else _drawBegin(this.context, this.color.button)\n    switch (info.map) {\n      case '+':\n        _drawVline(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.offset,\n          this.rectMain.top + this.rectMain.height - center.offset)\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '-':\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case '*':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy - 2 * this.scale, '...',\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case 'left':\n      case 'right':\n        break\n      default:\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.title.font, this.layout.title.pixel, this.color.button, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n    }\n    _drawEnd(this.context)\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是ClChart的实体定义\n// 一般只用操作这个类就可以实现功能了\n// 一个ClChart类只是调度框架下所属的Chart的画图，鼠标键盘事件，并不存储数据\n// 多图联动时，子图都到这里来获取相关信息。\n// //////////////////////////////////////////////////\n\nimport {\n  copyJsonOfDeep\n  // formatInfo\n} from '../util/cl.tool'\n// import ClChartButton from './cl.chart.button';\nimport ClChartLine from './cl.chart.line'\nimport ClChartOrder from './cl.chart.order'\n// import ClChartScroll from './cl.chart.scroll';\n// import getValue from '../data/cl.data.tools';\nimport { setColor, setStandard } from '../chart/cl.chart.init'\n\n// 必须包含 context，其他初始化信息参考initSystem\nfunction ClChart (syscfg) {\n  const DEFAULT_LINKINFO = {\n    showMode: 'last',\n    // 'last' 以最新数据为定位，maxIndex=-1 表示显示最新的数据\n    // ‘move’ 当发生移动就设置该参数，-- 可能不需要\n    // fixed 固定显示一定范围的 分时图和5日线这一类固定数量的显示模式\n    // locked 指定某条记录放中间位置\n    fixed: { // 对应fixed模式\n      min: -1, // 最小记录, 为-1表示最小记录加上left\n      max: -1, // 最大记录, 为-1表式最大记录减去right\n      left: 20,\n      right: 20\n    },\n    locked: { // 只有当showMode==‘locked’模式才有作用\n      index: -1, // 当前锁定的记录号，\n      set: 0.5 // 表示锁定在中间，1表示锁定在最后一条记录，当前记录的百分比\n    },\n    minIndex: -1, // 当前画面的起始记录号 -1 表示第一次\n    maxIndex: -1, // 当前画面的最大记录号 -1 表示第一次\n    hotIndex: -1, // 循环时需要定位当前数据的指针定位\n    showCursorLine: false, // 是否显示光标信息\n    moveIndex: -1, // 当前鼠标所在位置的记录号 -1 表示没有鼠标事件或第一次\n    spaceX: 2, // 每个数据的间隔像素，可以根据实际情况变化，但不能系统参数里设定的spaceX小\n    unitX: 5, // 每天数据的宽度 默认为5， 可以在1..50之间切换\n    rightMode: 'no', // 除权模式\n    hideInfo: false // 是否显示价格\n  }\n  // 必须设置context\n  this.context = syscfg.mainCanvas.context\n  this.cursorCanvas = syscfg.cursorCanvas\n  this.sysColor = syscfg.sysColor\n  // 通过这个来判断是否为根\n  this.father = undefined\n  // //////////////////////////////////////////////\n  // 重新初始化Chart，会清理掉所有的图表和数据\n  // //////////////////////////////////////////////\n  this.initChart = function (dataLayer, eventLayer) {\n    // linkInfo 是所有子chart公用的参数集合，也是dataLayer应用的集合\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n    // this.checkConfig();\n    // 初始化子chart为空\n    this.childCharts = {}\n    // 设置数据层，同时对外提供设置接口\n    this.setDataLayer(dataLayer)\n    // 设置事件层，同时对外提供设置接口\n    this.setEventLayer(eventLayer)\n  }\n  this.clear = function () {\n    this.childCharts = {}\n    this.fastDraw = false\n    this.dataLayer.clearData()\n    // this.eventLayer.clear();\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n  }\n\n  this.getChart = function (key) {\n    return this.childCharts[key]\n  }\n  // //////////////////////////////////////////////\n  // 以下是设置chart的事件关联接口，element表示映射的chart类\n  // 所有事件由外部获取事件后传递到eventLayer后，再统一分发给相应的图表\n  // eventLayer中有针对html5的鼠标键盘事件处理接口，其他事件处理接口另外再做\n  // ////////////////////////////////////////////\n  this.getEventLayer = function () {\n    return this.eventLayer\n  }\n  this.setEventLayer = function (layer) {\n    if (layer === undefined) return\n    this.eventLayer = layer\n    this.eventLayer.bindChart && this.eventLayer.bindChart(this) // 把chart绑定到事件处理层\n  }\n  // this.bindEvent = function (chart) {\n  //   this.eventLayer.bindEvent(chart);\n  // }\n  // //////////////////////////////////////////////\n  // 下面是绑定数据层，engine\n  // //////////////////////////////////////////////\n  this.getDataLayer = function () {\n    return this.dataLayer\n  }\n  this.setDataLayer = function (layer) {\n    if (layer === undefined) return\n    this.dataLayer = layer\n    layer.father = this // 告诉数据层\n    this.static = this.dataLayer.static\n  }\n  // 设置对应的chart基本的数据key\n  this.bindData = function (chart, key) {\n    if (chart.hotKey !== key) {\n      this.linkInfo.showMode = 'last' // 切换数据后需要重新画图\n      this.linkInfo.minIndex = -1\n      chart.hotKey = key // hotKey 针对chart的数据都调用该数据源\n      this.fastDrawEnd() // 热点数据改变，就重新计算\n    }\n  }\n  // 以下是客户端设置data中数据的接口\n  this.initData = function (tradeDate, tradetime) {\n    this.dataLayer.initData(tradeDate, tradetime)\n  }\n  this.setData = function (key, fields, value) {\n    let info = value\n    if (typeof value === 'string') info = JSON.parse(value)\n    this.dataLayer.setData(key, fields, info)\n    this.fastDrawEnd() // 新的数据被设置，就重新计算\n  }\n  // 按key获取一个数组数据\n  this.getData = function (key) {\n    if (this.fastDraw) {\n      if (this.fastBuffer[key] !== undefined) {\n        return this.fastBuffer[key]\n      }\n    }\n    const out = this.dataLayer.getData(key, this.linkInfo.rightMode)\n    if (this.fastDraw) {\n      this.fastBuffer[key] = out\n    }\n    return out\n  }\n  this.readyData = function (data, lines) {\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].formula === undefined) continue\n      if (!this.fastDraw || (this.fastDraw && this.fastBuffer[lines[k].formula.key] === undefined)) {\n        this.dataLayer.makeLineData(\n          { data, minIndex: this.linkInfo.minIndex, maxIndex: this.linkInfo.maxIndex },\n          lines[k].formula.key,\n          lines[k].formula.command\n        )\n      }\n    }\n  }\n  // //////////////////////////////////////////////\n  // name是唯一的名字，名字一样会覆盖以前同名的类，\n  // className是调用什么类型的图，目前只支持 Line Order Button Scroll\n  // usercfg指该图特殊的配置\n  // callback 表示鼠标移动时返回的当前记录数据\n  // //////////////////////////////////////////////\n  this.createChart = function (name, className, usercfg, callback) {\n    // if (!inArray(className, [\n    //   ClChartButton,\n    //   ClChartLine,\n    //   ClChartOrder,\n    //   ClChartScroll\n    // ])) return undefined;\n    // const chart = new className(this);\n\n    let chart\n    switch (className) {\n      case 'CHART.ORDER': chart = new ClChartOrder(this); break\n      case 'CHART.LINE': chart = new ClChartLine(this); break\n      default : chart = new ClChartLine(this); break\n    }\n\n    chart.name = name\n    this.childCharts[name] = chart\n\n    // this.bindEvent(chart);\n    chart.init(usercfg, callback) // 根据用户配置初始化信息框\n\n    return chart\n  }\n\n  // 以下是chart画图的接口\n  this.onPaint = function (chart) { // 需要重画时调用\n    if (typeof this.context._beforePaint === 'function') {\n      this.context._beforePaint()\n    }\n    this.fastDrawBegin()\n\n    for (const key in this.childCharts) {\n      if (chart !== undefined) {\n        if (this.childCharts[key] === chart) {\n          this.childCharts[key].onPaint()\n        }\n      } else {\n        this.childCharts[key].onPaint()\n      }\n    }\n    // this.fastDrawEnd();\n    if (typeof this.context._afterPaint === 'function') {\n      this.context._afterPaint()\n    }\n  }\n  // 用于同一组多图只取一次数据，这样可以加速显示，程序结构不会乱\n  this.fastDrawBegin = function () {\n    if (!this.fastDraw) {\n      this.fastBuffer = []\n      this.fastDraw = true\n    }\n  }\n  this.fastDrawEnd = function () {\n    this.fastDraw = false\n  }\n\n  // ///////////////////////////////////\n  // 设置通用参数API\n  // //////////////////////////////////\n  this.setHideInfo = function (isHideInfo) {\n    if (isHideInfo === undefined) return\n    if (isHideInfo !== this.linkInfo.hideInfo) {\n      this.linkInfo.hideInfo = isHideInfo\n      this.onPaint()\n    }\n  }\n  // 最多支持多级图层\n  this.setColor = function (sysColor, chart) { // 设置背景颜色方案\n    if (sysColor === this.sysColor) return\n    this.color = setColor(sysColor)\n    if (chart === undefined) chart = this\n    for (const key in chart.childCharts) {\n      chart.childCharts[key].color = this.color\n      this.setColor(sysColor, chart.childCharts[key])\n    }\n    // 需要将其子配置的颜色也一起改掉\n    for (const key in chart.childDraws) {\n      chart.childDraws[key].color = this.color\n      this.setColor(sysColor, chart.childDraws[key])\n    }\n    for (const key in chart.childLines) {\n      chart.childLines[key].color = this.color\n      this.setColor(sysColor, chart.childLines[key])\n    }\n    // 修复递归调用问题\n    // this.onPaint()\n  }\n  // 改变语言\n  this.setStandard = function (standard) {\n    setStandard(standard)\n    this.setColor(this.sysColor)\n    this.onPaint()\n  }\n  // ///////////////////////////////////\n  //\n  // //////////////////////////////////\n\n  // this.makeLineData = function(data, key, formula, punit) {\n  //   return this.dataLayer.makeLineData(data, key, this.linkInfo.minIndex, this.linkInfo.maxIndex, formula);\n  // }\n}\n\nexport default ClChart\n","'use strict'\n\n// ////////////////////////////////////////////////////////////////\n//   画买卖盘\n// ///////////////////////////////////////////////////////////////\n// 画买卖盘和Tick\n\nimport {\n  _fillRect,\n  _drawRect,\n  _drawHline,\n  _setLineWidth,\n  _drawTxt,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  fromTTimeToStr,\n  formatVolume,\n  formatPrice,\n  updateJsonOfDeep,\n  offsetRect\n} from '../util/cl.tool'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT, CHART_ORDER } from '../cl.chart.def'\nimport getValue from '../data/cl.data.tools'\nimport {\n  FIELD_NOW,\n  FIELD_NOW_IDX,\n  FIELD_TICK\n} from '../data/../cl.data.def'\n\nexport default function ClChartOrder (father) {\n  initCommonInfo(this, father)\n\n  this.linkInfo = father.linkInfo\n  this.static = this.father.dataLayer.static\n  // ////////////////////////////////////////////////////////////////\n  //   程序入口程序，以下都是属于设置类函数，基本不需要修改，\n  // ///////////////////////////////////////////////////////////////\n  this.init = function (cfg) {\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 300 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n\n    this.config = updateJsonOfDeep(cfg.config, CHART_ORDER)\n\n    this.style = cfg.config.style || 'normal'\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n\n  this.checkConfig = function () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    this.txtLen = _getTxtWidth(this.context, '涨', this.layout.digit.font, this.layout.digit.pixel)\n    this.timeLen = _getTxtWidth(this.context, '15:30', this.layout.digit.font, this.layout.digit.pixel)\n    this.volLen = _getTxtWidth(this.context, '888888', this.layout.digit.font, this.layout.digit.pixel)\n    this.closeLen = _getTxtWidth(this.context, '888.88', this.layout.digit.font, this.layout.digit.pixel)\n  }\n  this.setPublicRect = function () { // 计算所有矩形区域\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n  }\n\n  // //////////\n  //\n  // ///////////\n  this.onClick = function (/* e */) {\n    if (this.isIndex) return // 如果是指数就啥也不干\n    if (this.style === 'normal') {\n      this.style = 'tiny'\n    } else {\n      this.style = 'normal'\n    }\n    this.father.onPaint(this)\n  }\n  // 事件监听\n  this.onPaint = function () { // 重画\n    this.codeInfo = this.father.getData('INFO')\n    this.orderData = this.father.getData('NOW')\n    this.tickData = this.father.getData('TICK')\n    if (this.orderData === undefined || this.tickData === undefined) return\n    this.orderData.coinunit = this.static.coinunit\n    this.tickData.coinunit = this.static.coinunit\n    this.isIndex = getValue(this.codeInfo, 'type') === 0\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n    this.drawReady() // 数据准备\n\n    if (this.isIndex) {\n      this.drawIndex()\n    } else {\n      this.drawOrder()\n    }\n    this.drawTick()\n  }\n\n  // ////////////////////////////////////////////////////////////////\n  //   绘图函数\n  // ///////////////////////////////////////////////////////////////\n  this.drawClear = function () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  this.drawReady = function () {\n    if (this.tickData === undefined) {\n      this.tickData = { key: 'TICK', fields: FIELD_TICK, value: [] }\n    }\n    if (this.orderData === undefined) {\n      this.orderData = { key: 'NOW', fields: FIELD_NOW, value: [] }\n    }\n    let yy\n    if (this.style === 'normal') {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 10\n    } else {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 2\n    }\n    if (this.isIndex) {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 4\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    } else {\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: yy,\n        width: this.rectChart.width,\n        height: this.layout.title.height\n      }\n    } else {\n      this.rectTitle = {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }\n    }\n    yy += this.rectTitle.height\n    this.rectTick = {\n      left: this.rectChart.left,\n      top: yy,\n      width: this.rectChart.width,\n      height: this.rectChart.height - yy - this.layout.digit.height / 2\n    }\n  }\n  this.getColor = function (close, before) {\n    if (close > before) {\n      return this.color.red\n    } else if (close < before) {\n      return this.color.green\n    } else {\n      return this.color.white\n    }\n  }\n  this.drawIndex = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    const offy = this.rectOrder.height / 3\n    const offx = this.rectOrder.width / 3\n    let xx, yy, len\n    let value\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n\n    xx = this.rectOrder.left + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '涨', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '跌', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + 2 * offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '平', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    const inow = { key: 'NOW', fields: FIELD_NOW_IDX, value: this.orderData.value }\n    yy = this.rectOrder.top + offy + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    value = formatVolume(getValue(inow, 'ups'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downs'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'mids'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + 2 * offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    yy = this.rectOrder.top + 2 * offy + Math.floor((offy - this.layout.digit.height) / 2)\n\n    value = formatVolume(getValue(inow, 'upvol'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downvol'))\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      const ticklen = _getTxtWidth(this.context, '分时成交', this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, '分时成交',\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n  }\n  this.drawOrder = function () {\n    const xpos = this.drawGridLine() // 先画线格\n    if (this.orderData === undefined || this.orderData.value.length < 1) {\n      return\n    }\n    const offx = (this.rectOrder.width - xpos - 2 * this.layout.digit.spaceX - this.closeLen - this.volLen) / 2\n\n    let mmpCount = 1\n    if (this.style === 'normal') {\n      mmpCount = 5\n    }\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    let xx, yy\n    let value, clr\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    for (let idx = mmpCount; idx >= 1; idx--) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'sell' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'sellvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n    for (let idx = 1; idx <= mmpCount; idx++) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'buy' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'buyvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n  this.drawTick = function () {\n    if (this.tickData === undefined || this.tickData.value.length < 1) return\n    const maxlines = Math.floor(this.rectTick.height / this.layout.digit.height) - 1 // 屏幕最大能显示多少条记录\n    const recs = this.tickData.value.length\n    const beginIndex = recs > maxlines ? recs - maxlines : 0\n    const offy = this.rectTick.height / maxlines\n\n    let xx, yy\n    let value, clr\n    let offx = (this.rectTick.width - 4 * this.layout.digit.spaceX - this.timeLen - this.closeLen - this.volLen) / 2\n    if (this.isIndex) offx = (this.rectTick.width - 3 * this.layout.digit.spaceX - this.timeLen - this.closeLen) / 2\n\n    yy = this.rectTick.top + 2 + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = recs - 1; idx >= beginIndex; idx--) {\n    // for (let idx = beginIndex; idx < recs; idx++) {\n      xx = this.rectTick.left + this.layout.digit.spaceX + this.timeLen\n      value = getValue(this.tickData, 'time', idx)\n      clr = this.color.txt\n      let str\n      if (idx === 0) {\n        str = fromTTimeToStr(value, 'minute')\n      } else {\n        str = fromTTimeToStr(value, 'minute', getValue(this.tickData, 'time', idx - 1))\n      }\n      _drawTxt(this.context, xx, yy, str,\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      if (this.isIndex) {\n        xx = this.rectTick.left + this.rectTick.width - this.layout.digit.spaceX\n\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n        yy += offy\n        continue\n      }\n      xx += offx + this.closeLen + this.layout.digit.spaceX\n\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.decimal),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n\n      value = getValue(this.tickData, 'decvol', idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, 100),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n\n  this.drawGridLine = function () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    let mmpCount = 1\n    if (this.style === 'normal') {\n      mmpCount = 5\n    }\n    let len = 0\n    _drawHline(this.context, this.rectOrder.left, this.rectOrder.left + this.rectOrder.width, this.rectOrder.top + Math.floor(this.rectOrder.height / 2))\n\n    let xx, yy, value\n    const strint = ['①', '②', '③', '④', '⑤']\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    len = _getTxtWidth(this.context, '卖①', this.layout.title.font, this.layout.digit.height)\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = mmpCount - 1; idx >= 0; idx--) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '卖' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    for (let idx = 0; idx < mmpCount; idx++) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '买' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      if (this.style === 'normal') {\n        value = '分时成交 △'\n      } else {\n        value = '分时成交 ▽'\n      }\n      const ticklen = _getTxtWidth(this.context, value, this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n    return len\n  }\n}\n","'use strict'\n\n// /////////////////////////////////////////////////\n// 定义特定函数\n// ////////////////////////////////////////////////\n\nfunction _getTime () {\n  return new Date().getTime()\n}\n\nfunction _getDistance (xLen, yLen) {\n  return Math.sqrt(xLen * xLen + yLen * yLen)\n}\n/**\n * 获取向量的旋转方向\n */\nfunction _getRotateDirection (vector1, vector2) {\n  return vector1.x * vector2.y - vector2.x * vector1.y\n}\n\nfunction _getRotateAngle (vector1, vector2) {\n  let direction = _getRotateDirection(vector1, vector2)\n  direction = direction > 0 ? -1 : 1\n  const len1 = _getDistance(vector1.x, vector1.y)\n  const len2 = _getDistance(vector2.x, vector2.y)\n  const mr = len1 * len2\n  if (mr === 0) return 0\n  const dot = vector1.x * vector2.x + vector1.y * vector2.y\n  let r = dot / mr\n  if (r > 1) r = 1\n  if (r < -1) r = -1\n  return Math.acos(r) * direction * 180 / Math.PI\n}\n\nfunction _getTouchInfo (point, element) {\n  const mouseInfo = {\n    name: 'touch'\n  }\n  let srcRect = {\n    left: 0,\n    top: 0\n  }\n  if (element !== undefined) srcRect = element.getBoundingClientRect()\n  mouseInfo.offsetX = point.pageX - srcRect.left\n  mouseInfo.offsetY = point.pageY - srcRect.top\n  return mouseInfo\n}\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n\nexport default function ClEventWeb (father) {\n  this.father = father\n  this.eventCanvas = father.eventCanvas\n  // 如果实在手机端支持touch事件，则不需要绑定click事件以及mouse事件\n  // 在pc端则与之相反\n  this.isSupportTouch = !!('ontouchend' in document)\n\n  // 移除长按弹出菜单按钮\n  this.eventCanvas.addEventListener && this.eventCanvas.addEventListener('contextmenu', e => {\n    e.preventDefault()\n  })\n\n  this.bindEvent = function () {\n    if (this.isSupportTouch) {\n      this.addHandler('touchstart', this.touchstart.bind(this))\n      this.addHandler('touchend', this.touchend.bind(this))\n      this.addHandler('touchmove', this.touchmove.bind(this))\n    } else {\n      this.addHandler('mousemove', this.mousemove.bind(this))\n      // this.addHandler('mousein', this.mousein.bind(this));\n      this.addHandler('mouseout', this.mouseout.bind(this))\n      this.addHandler('mousewheel', this.mousewheel.bind(this))\n      this.addHandler('mouseup', this.mouseup.bind(this))\n      this.addHandler('mousedown', this.mousedown.bind(this))\n      this.addHandler('keyup', this.keyup.bind(this))\n      this.addHandler('keydown', this.keydown.bind(this))\n\n      this.addHandler('click', this.click.bind(this))\n    }\n  }\n  this.clearEvent = function () {\n    if (this.isSupportTouch) {\n      this.clearHandler('touchstart', this.touchstart.bind(this))\n      this.clearHandler('touchend', this.touchend.bind(this))\n      this.clearHandler('touchmove', this.touchmove.bind(this))\n    } else {\n      this.clearHandler('mousemove', this.mousemove.bind(this))\n      // this.clearHandler('mousein', this.mousein.bind(this));\n      this.clearHandler('mouseout', this.mouseout.bind(this))\n      this.clearHandler('mousewheel', this.mousewheel.bind(this))\n      this.clearHandler('mouseup', this.mouseup.bind(this))\n      this.clearHandler('mousedown', this.mousedown.bind(this))\n      this.clearHandler('keyup', this.keyup.bind(this))\n      this.clearHandler('keydown', this.keydown.bind(this))\n\n      this.clearHandler('click', this.click.bind(this))\n    }\n  }\n  this.addHandler = function (eventName, handler) {\n    if (this.eventCanvas.addEventListener) {\n      this.eventCanvas.addEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.attachEvent) {\n      this.eventCanvas.attachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = handler /* 直接赋给事件 */\n    }\n  }\n  /* 清理所有的绑定事件 */\n  this.clearHandler = function (eventName, handler) { /* Chrome */\n    if (this.eventCanvas.removeEventListener) {\n      this.eventCanvas.removeEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.deattachEvent) {\n      this.eventCanvas.deattachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = null /* 直接赋给事件 */\n    }\n  }\n  // /////////////////////\n  // 下面时对事件的处理\n  // /////////////////////\n  this.getEventInfo = function (event) {\n    return {\n      offsetX: event.offsetX,\n      offsetY: event.offsetY\n    }\n  }\n  this.mousemove = function (event) {\n    this.father.emitEvent('onMouseMove', this.getEventInfo(event))\n  }\n  this.mousein = function (event) {\n    this.father.emitEvent('onMouseIn', this.getEventInfo(event))\n  }\n  this.mouseout = function (event) {\n    this.father.emitEvent('onMouseOut', this.getEventInfo(event))\n  }\n  this.mousewheel = function (event) {\n    const info = this.getEventInfo(event)\n    info.deltaY = event.deltaY\n    this.father.emitEvent('onMouseWheel', info)\n  }\n  this.mouseup = function (event) {\n    this.father.emitEvent('onMouseUp', this.getEventInfo(event))\n  }\n  this.mousedown = function (event) {\n    this.father.emitEvent('onMouseDown', this.getEventInfo(event))\n  }\n  // 键盘\n  this.keyup = function (event) {\n    const info = this.getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyUp', info)\n  }\n  this.keydown = function (event) {\n    const info = this.getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyDown', info)\n  }\n  this.click = function (event) {\n    this.father.emitEvent('onClick', this.getEventInfo(event))\n  }\n  // 触摸\n  this.touchstart = function (event) {\n    this.__timestamp = new Date()\n    const point = event.touches ? event.touches[0] : event\n    this.startX = point.pageX\n    this.startY = point.pageY\n    window.clearTimeout(this.longTapTimeout)\n    // 两点接触\n    if (event.touches.length > 1) {\n      const point2 = event.touches[1]\n      const xLen = Math.abs(point2.pageX - this.startX)\n      const yLen = Math.abs(point2.pageY - this.startY)\n      this.touchDistance = _getDistance(xLen, yLen)\n      this.touchVector = {\n        x: point2.pageX - this.startX,\n        y: point2.pageY - this.startY\n      }\n      this.startTime = _getTime()\n    } else {\n      this.startTime = _getTime()\n      this.longTapTimeout = setTimeout(() => {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.srcElement))\n      }, 600)\n      if (this.previousTouchPoint) {\n        if (Math.abs(this.startX - this.previousTouchPoint.startX) < 10 &&\n          Math.abs(this.startY - this.previousTouchPoint.startY) < 10 &&\n          Math.abs(this.startTime - this.previousTouchTime) < 300) {\n          // this._emitEvent('onDoubleTap');\n          this.father.emitEvent('onDBClick', _getTouchInfo(point, event.srcElement))\n        }\n      }\n      this.previousTouchTime = this.startTime\n      this.previousTouchPoint = {\n        startX: this.startX,\n        startY: this.startY\n      }\n    }\n  }\n  this.touchend = function (event) {\n    /**\n     * 在X轴或Y轴发生过移动\n     */\n    const point = event.changedTouches ? event.changedTouches[0] : event\n    window.clearTimeout(this.longTapTimeout)\n    const timestamp = _getTime()\n    if ((this.moveX !== null && Math.abs(this.moveX - this.startX) > 10) ||\n      (this.moveY !== null && Math.abs(this.moveY - this.startY) > 10)) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onSwipe'); // 挥手\n        this.father.emitEvent('onSwipe', _getTouchInfo(point, event.srcElement))\n      }\n    } else if (timestamp - this.startTime < 2000) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onTap'); // 单击\n        this.father.emitEvent('onClick', _getTouchInfo(point, event.srcElement))\n      }\n      if (timestamp - this.startTime > 500) {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.srcElement))\n      }\n    }\n    this.startX = this.startY = this.moveX = this.moveY = null\n    this.previousPinchScale = 1\n    this.father.emitEvent('onMouseOut', _getTouchInfo(point, event.srcElement))\n  }\n  this.touchmove = function (event) {\n    if (new Date() - this.__timestamp < 150) {\n      return event\n    }\n    const timestamp = _getTime()\n    if (event.touches.length > 1) {\n      const xLen = Math.abs(event.touches[0].pageX - event.touches[1].pageX)\n      const yLen = Math.abs(event.touches[1].pageY - event.touches[1].pageY)\n      const touchDistance = _getDistance(xLen, yLen)\n      if (this.touchDistance) {\n        const pinchScale = touchDistance / this.touchDistance\n        const point = event.touches ? event.touches[0] : event\n        // this._emitEvent('onPinch', { scale: pinchScale - this.previousPinchScale }); // 缩放\n        const mouseinfo = _getTouchInfo(point, event.srcElement)\n        if ((timestamp - this.startTime) > 90 && this.previousPinchScale) {\n          mouseinfo.scale = pinchScale - this.previousPinchScale\n          if (Math.abs(mouseinfo.scale) > 0.01) {\n            this.father.emitEvent('onPinch', mouseinfo)\n          }\n          this.startTime = _getTime()\n        }\n        this.previousPinchScale = pinchScale\n      }\n      if (this.touchVector) {\n        const vector = {\n          x: event.touches[1].pageX - event.touches[0].pageX,\n          y: event.touches[1].pageY - event.touches[0].pageY\n        }\n        const angle = _getRotateAngle(vector, this.touchVector)\n        // this._emitEvent('onRotate', {\n        //   angle\n        // })\n        this.father.emitEvent('onRotate', {\n          angle\n        })\n        this.touchVector.x = vector.x\n        this.touchVector.y = vector.y\n      }\n    } else {\n      window.clearTimeout(this.longTapTimeout)\n      const point = event.touches ? event.touches[0] : event\n      const deltaX = this.moveX === null ? 0 : point.pageX - this.moveX\n      const deltaY = this.moveY === null ? 0 : point.pageY - this.moveY\n      // this._emitEvent('onMove', { deltaX, deltaY });\n      const config = _getTouchInfo(point, event.srcElement)\n      config.deltaX = deltaX\n      config.deltaY = deltaY\n      this.father.emitEvent('onMouseMove', config)\n      this.moveX = point.pageX\n      this.moveY = point.pageY\n    }\n    event.preventDefault()\n  }\n}\n","'use strict'\n\n// /////////////////////////////////////////////////\n// 定义特定函数\n// ////////////////////////////////////////////////\n\nfunction _getTime () {\n  return new Date().getTime()\n}\n\nfunction _getDistance (xLen, yLen) {\n  return Math.sqrt(xLen * xLen + yLen * yLen)\n}\n/**\n * 获取向量的旋转方向\n */\nfunction _getRotateDirection (vector1, vector2) {\n  return vector1.x * vector2.y - vector2.x * vector1.y\n}\n\nfunction _getRotateAngle (vector1, vector2) {\n  let direction = _getRotateDirection(vector1, vector2)\n  direction = direction > 0 ? -1 : 1\n  const len1 = _getDistance(vector1.x, vector1.y)\n  const len2 = _getDistance(vector2.x, vector2.y)\n  const mr = len1 * len2\n  if (mr === 0) return 0\n  const dot = vector1.x * vector2.x + vector1.y * vector2.y\n  let r = dot / mr\n  if (r > 1) r = 1\n  if (r < -1) r = -1\n  return Math.acos(r) * direction * 180 / Math.PI\n}\n\nfunction _getTouchInfo (point) {\n  const mouseInfo = {\n    name: 'touch'\n  }\n  let srcRect = {\n    left: 0,\n    top: 0\n  }\n  mouseInfo.offsetX = point.offsetX - srcRect.left\n  mouseInfo.offsetY = point.offsetY - srcRect.top\n  return mouseInfo\n}\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n\nexport default function ClEventWeb (father) {\n  this.father = father\n  this.eventCanvas = father.eventCanvas\n\n  this.bindEvent = function () {\n    this.addHandler('touchstart', this.touchstart.bind(this))\n    this.addHandler('touchend', this.touchend.bind(this))\n    this.addHandler('touchmove', this.touchmove.bind(this))\n  }\n  this.clearEvent = function () {\n    this.clearHandler('touchstart', this.touchstart.bind(this))\n    this.clearHandler('touchend', this.touchend.bind(this))\n    this.clearHandler('touchmove', this.touchmove.bind(this))\n  }\n  this.addHandler = function (eventName, handler) {\n    this.eventCanvas.on(eventName, handler)\n  }\n  /* 清理所有的绑定事件 */\n  this.clearHandler = function (eventName, handler) { /* Chrome */\n    this.eventCanvas.removeListener(eventName, handler)\n  }\n  // /////////////////////\n  // 下面时对事件的处理\n  // /////////////////////\n  this.getEventInfo = function (event) {\n    return {\n      offsetX: event.offsetX,\n      offsetY: event.offsetY\n    }\n  }\n  // 触摸\n  this.touchstart = function (event) {\n    this.__timestamp = new Date()\n    const point = event.touches ? event.touches[0] : event\n    this.startX = point.pageX\n    this.startY = point.pageY\n    clearTimeout(this.longTapTimeout)\n    // 两点接触\n    if (event.touches.length > 1) {\n      const point2 = event.touches[1]\n      const xLen = Math.abs(point2.pageX - this.startX)\n      const yLen = Math.abs(point2.pageY - this.startY)\n      this.touchDistance = _getDistance(xLen, yLen)\n      this.touchVector = {\n        x: point2.pageX - this.startX,\n        y: point2.pageY - this.startY\n      }\n      this.startTime = _getTime()\n    } else {\n      this.startTime = _getTime()\n      this.longTapTimeout = setTimeout(() => {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point))\n      }, 600)\n      if (this.previousTouchPoint) {\n        if (Math.abs(this.startX - this.previousTouchPoint.startX) < 10 &&\n          Math.abs(this.startY - this.previousTouchPoint.startY) < 10 &&\n          Math.abs(this.startTime - this.previousTouchTime) < 300) {\n          // this._emitEvent('onDoubleTap');\n          this.father.emitEvent('onDBClick', _getTouchInfo(point))\n        }\n      }\n      this.previousTouchTime = this.startTime\n      this.previousTouchPoint = {\n        startX: this.startX,\n        startY: this.startY\n      }\n    }\n  }\n  this.touchend = function (event) {\n    /**\n     * 在X轴或Y轴发生过移动\n     */\n    const point = event.changedTouches ? event.changedTouches[0] : event\n    clearTimeout(this.longTapTimeout)\n    const timestamp = _getTime()\n    if ((this.moveX !== null && Math.abs(this.moveX - this.startX) > 10) ||\n      (this.moveY !== null && Math.abs(this.moveY - this.startY) > 10)) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onSwipe'); // 挥手\n        this.father.emitEvent('onSwipe', _getTouchInfo(point))\n      }\n    } else if (timestamp - this.startTime < 2000) {\n      if (timestamp - this.startTime < 500) {\n        // this._emitEvent('onTap'); // 单击\n        this.father.emitEvent('onClick', _getTouchInfo(point))\n      }\n      if (timestamp - this.startTime > 500) {\n        // this._emitEvent('onLongPress');\n        this.father.emitEvent('onLongPress', _getTouchInfo(point))\n      }\n    }\n    this.startX = this.startY = this.moveX = this.moveY = null\n    this.previousPinchScale = 1\n    this.father.emitEvent('onMouseOut', _getTouchInfo(point))\n  }\n  this.touchmove = function (event) {\n    if (new Date() - this.__timestamp < 150) {\n      return event\n    }\n    const timestamp = _getTime()\n    if (event.touches.length > 1) {\n      const xLen = Math.abs(event.touches[0].pageX - event.touches[1].pageX)\n      const yLen = Math.abs(event.touches[1].pageY - event.touches[1].pageY)\n      const touchDistance = _getDistance(xLen, yLen)\n      if (this.touchDistance) {\n        const pinchScale = touchDistance / this.touchDistance\n        const point = event.touches ? event.touches[0] : event\n        // this._emitEvent('onPinch', { scale: pinchScale - this.previousPinchScale }); // 缩放\n        const mouseinfo = _getTouchInfo(point)\n        if ((timestamp - this.startTime) > 90 && this.previousPinchScale) {\n          mouseinfo.scale = pinchScale - this.previousPinchScale\n          if (Math.abs(mouseinfo.scale) > 0.01) {\n            this.father.emitEvent('onPinch', mouseinfo)\n          }\n          this.startTime = _getTime()\n        }\n        this.previousPinchScale = pinchScale\n      }\n      if (this.touchVector) {\n        const vector = {\n          x: event.touches[1].pageX - event.touches[0].pageX,\n          y: event.touches[1].pageY - event.touches[0].pageY\n        }\n        const angle = _getRotateAngle(vector, this.touchVector)\n        // this._emitEvent('onRotate', {\n        //   angle\n        // })\n        this.father.emitEvent('onRotate', {\n          angle\n        })\n        this.touchVector.x = vector.x\n        this.touchVector.y = vector.y\n      }\n    } else {\n      clearTimeout(this.longTapTimeout)\n      const point = event.touches ? event.touches[0] : event\n      const deltaX = this.moveX === null ? 0 : point.pageX - this.moveX\n      const deltaY = this.moveY === null ? 0 : point.pageY - this.moveY\n      // this._emitEvent('onMove', { deltaX, deltaY });\n      const config = _getTouchInfo(point)\n      config.deltaX = deltaX\n      config.deltaY = deltaY\n      this.father.emitEvent('onMouseMove', config)\n      this.moveX = point.pageX\n      this.moveY = point.pageY\n    }\n  }\n}\n","'use strict'\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n// 鼠标事件\n//  onMouseMove // 移动\n//  onMouseIn  // 进入\n//  monMouseOut // 离开\n//  onMousewheel // 滚动\n//  onMouseUp  //\n//  onMouseDown //\n// 键盘事件\n//  onKeyUp\n//  onKeyDown\n// 触摸事件\n//  onTouchStart // 触摸开始\n//  onTouchEnd   // 触摸结束\n//  onTouchMove  // 触摸移动\n// 其他事件\n//  onClick // 点击\n//  onLongPress // 长按\n//  onPinch // 两指放大或缩小\n//  onRotate // 旋转\n//  onSwipe //左滑或右滑\nimport {\n  copyJsonOfDeep,\n  inRect\n} from '../util/cl.tool'\nimport ClEventWeb from './cl.event.web'\nimport ClEventRN from './cl.event.rn'\n\nexport const EVENT_DEFINE = [\n  'onMouseMove',\n  // 'onMouseIn',\n  'onMouseOut',\n  'onMousewheel',\n  'onMouseUp',\n  'onMouseDown',\n  'onKeyUp',\n  'onKeyDown',\n  'onClick',\n  'onDBClick',\n  'onLongPress',\n  'onPinch',\n  'onRotate',\n  'onSwipe'\n]\n\nexport default function ClEvent (syscfg) {\n  // this.eventCanvas = syscfg.mainCanvas.canvas // 对web来说就是虚拟接收事件的canvas\n  this.eventCanvas = syscfg.cursorCanvas.canvas\n  this.eventPlatform = syscfg.eventPlatform || 'html5'\n  this.scale = syscfg.scale\n\n  if (this.eventPlatform === 'react-native') {\n    this.eventSource = new ClEventRN(this)\n    this.eventSource.bindEvent()\n  } else if (this.eventPlatform === 'html5') {\n    this.eventSource = new ClEventWeb(this)\n    this.eventSource.bindEvent()\n  }\n  // 只需要绑定一个原始ClChart就可以了，子图的事件通过childCharts来判断获取\n  // 每个chart如果自己定义了对应事件就会分发，未定义不分发，分发后以返回值判断是否继续传递到下一个符合条件的chart\n  this.bindChart = function (source) {\n    this.firstChart = source\n    this.HotWin = undefined\n  }\n  this.clearEvent = function () {\n    this.eventSource.clearEvent()\n  }\n  // 下面是接收事件后,根据热点位置来判断归属于哪一个chart,并分发事件;\n  // config 必须包含鼠标位置 {offsetX:offsetY:}\n  this.emitEvent = function (eventName, config) {\n    // .....这里需要特殊分解处理Out的事件\n    if (eventName === 'onMouseOut' || eventName === 'onMouseMove') {\n      this.boardEvent(this.firstChart, eventName, config)\n      this.HotWin = undefined\n      return\n    }\n    const mousePos = this.getMousePos(config)\n    const chartPath = []\n    for (const name in this.firstChart.childCharts) {\n      // 判断鼠标在哪个区域\n      if (inRect(this.firstChart.childCharts[name].rectMain, mousePos)) {\n        // 取得事件冒泡顺序\n        this.findEventPath(chartPath, this.firstChart.childCharts[name], mousePos)\n        // 只处理符合条件的一个区域，重叠区域不考虑\n        break\n      }\n    }\n    if (chartPath.length < 1) return\n    // 继承最初始的传入参数,从最顶层开始处理\n    const event = copyJsonOfDeep(config)\n    for (let k = chartPath.length - 1; k >= 0; k--) {\n      if (chartPath[k][eventName] !== undefined) {\n        // 这里生成一个相对鼠标位置\n        event.mousePos = {\n          // x: mousePos.x - chartPath[k].rectMain.left,\n          // y: mousePos.y - chartPath[k].rectMain.top\n          x: mousePos.x,\n          y: mousePos.y\n        }\n        // 执行事件函数\n        chartPath[k][eventName](event)\n        if (event.break) break // 跳出循环\n      }\n    }\n  }\n  // 用于鼠标联动时，向childCharts同一级别画图区域广播事件\n  //\n  this.boardEvent = function (chart, eventName, config, ignore) {\n    const event = copyJsonOfDeep(config)\n    const mousePos = this.getMousePos(config)\n\n    for (const name in chart.childCharts) {\n      if (chart.childCharts[name] === ignore) continue\n      if (chart.childCharts[name][eventName] === undefined) continue\n\n      event.mousePos = {\n        // x: mousePos.x - chart.childCharts[name].rectMain.left,\n        // y: mousePos.y - chart.childCharts[name].rectMain.top\n        x: mousePos.x,\n        y: mousePos.y\n      }\n      chart.childCharts[name][eventName](event)\n      if (event.break) break\n    }\n  }\n  this.findEventPath = function (path, chart, mousePos) {\n    path.push(chart)\n    if (chart.childCharts === undefined) return\n\n    for (const name in chart.childCharts) {\n      if (inRect(chart.childCharts[name].rectMain, mousePos)) {\n        this.findEventPath(path, chart.childCharts[name], mousePos)\n      }\n    }\n  }\n  this.getMousePos = function (event) {\n    const mouseX = event.offsetX * this.scale\n    const mouseY = event.offsetY * this.scale\n    return {\n      x: mouseX,\n      y: mouseY\n    }\n  }\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是ClData的实体定义\n// 一般只用操作这个类就可以获取单个股票的所有数据\n// 不支持多个股票的数据，对于列表来说，这里只保存ID列表，其他的数据由实际画图自行获取，\n// //////////////////////////////////////////////////\n\nimport {\n  fromTradeTimeToIndex,\n  fromIndexToTradeTime,\n  checkZero,\n  getSize,\n  checkDayZero,\n  checkDay5,\n  updateStatic,\n  findDateInDay,\n  findIndexInMin,\n  matchDayToWeek,\n  matchDayToMon,\n  getMinuteCount,\n  transExrightMin,\n  transExrightDay\n} from './cl.data.tools'\nimport {\n  FIELD_INFO,\n  FIELD_CODE,\n  FIELD_DAY,\n  FIELD_MIN,\n  FIELD_TICK,\n  FIELD_DAY5,\n  FIELD_NOW,\n  FIELD_ILINE,\n  FIELD_ENOW\n} from '../cl.data.def'\nimport {\n  getDate,\n  isEmptyArray,\n  copyArrayOfDeep\n} from '../util/cl.tool'\nimport {\n  ClFormula\n} from '../formula/cl.formula'\n// 只保存一只股票的信息，当前日期，开收市时间\n\nexport default function ClData () {\n  // this.formula = new ClFormula();\n  this.static = {\n    stktype: 1,\n    volunit: 100,\n    coinunit: 100,\n    decimal: 2,\n    before: 1000,\n    stophigh: 1100,\n    stoplow: 900\n  }\n\n  // 只保存一只股票的信息，当前日期，开收市时间\n  this.initData = function (tradeDate, tradetime) {\n    this.formula = new ClFormula()\n    this.clearData()\n    if (tradetime === undefined) {\n      this.tradeTime = [{\n        begin: 930,\n        end: 1130\n      },\n      {\n        begin: 1300,\n        end: 1500\n      }\n      ]\n    } else {\n      this.tradeTime = tradetime\n    }\n\n    if (tradeDate === undefined) {\n      this.tradeDate = getDate() // 得到当天的日期\n    } else {\n      this.tradeDate = tradeDate // 最近一个交易日期，并不一定等于今天的日期，比如节假日期间\n    }\n  }\n  // 包含一个股票所有的数据,以便于以后做公式系统也使用这个数据定义\n  this.clearData = function () {\n    this.InData = [] // 数据 json格式数据 {key:..,fields:.., value:[[],[]...]}\n    this.OutData = [] // 专门用于获取数据时临时产生的数据\n  }\n  // //////////////////////\n  // 下面是设置数据的方法\n  // ////////////////////\n  this.setData = function (key, fields, value) {\n    if (value === undefined) value = []\n    if (this.InData[key] === undefined) this.InData[key] = {}\n    switch (key) {\n      case 'DAY5':\n        value = checkDay5(value, this.static.coinunit, this.tradeDate, this.tradeTime)\n        break\n      case 'NOW':\n      case 'ENOW':\n        this.flushNowData(key, value)\n        break\n      case 'MIN':\n      case 'DAY':\n        value = checkDayZero(value, this.tradeDate)\n        break\n      case 'INFO':\n        this.static = updateStatic(FIELD_INFO, value)\n        break\n      case 'CODE':\n        this.static = updateStatic(FIELD_CODE, value)\n        break\n    }\n    // // 设置了CODE或者INFO后，把一些常用的数取出来放到static中\n    // 仅仅接收以上和 MIN5 RIGHT 等原始数据，周月年和其他周期分钟线，全部通过计算获取\n    this.InData[key] = {\n      key,\n      fields\n    }\n    this.InData[key].value = copyArrayOfDeep(value)\n  }\n\n  this.flushTick = function (nowdata, fields) {\n    // if (this.static.stktype == 0) return ;\n    if (getSize(this.InData['TICK']) < 1) {\n      if (nowdata[fields.vol] > 0) {\n        this.InData['TICK'] = {\n          key: 'TICK',\n          fields: FIELD_TICK,\n          value: [nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]]\n        }\n      }\n    } else {\n      if (this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.vol] < nowdata[fields.vol] ||\n        this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.close] !== nowdata[fields.close]) {\n        // 成交量变化才生成tick,或收盘价不一样\n        this.InData['TICK'].value.push([nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]])\n      }\n    }\n  }\n  this.flushMin = function (nowdata, fields) {\n    if (this.InData['MIN'] === undefined) {\n      this.InData['MIN'] = {\n        key: 'MIN',\n        fields: FIELD_MIN,\n        value: [\n          fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime),\n          nowdata[fields.open],\n          nowdata[fields.high],\n          nowdata[fields.low],\n          nowdata[fields.close],\n          nowdata[fields.vol],\n          nowdata[fields.money]\n        ]\n      }\n    } else {\n      const index = fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime)\n      const checked = findIndexInMin(this.InData['MIN'], index)\n      if (checked.status === 'old') {\n        if (this.InData['MIN'].value[checked.index][fields.high] < nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.high] = nowdata[fields.close]\n        }\n        if (this.InData['MIN'].value[checked.index][fields.low] > nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.low] = nowdata[fields.close]\n        }\n        this.InData['MIN'].value[checked.index][fields.close] = nowdata[fields.close]\n        this.InData['MIN'].value[checked.index][fields.vol] = nowdata[fields.vol]\n        this.InData['MIN'].value[checked.index][fields.money] = nowdata[fields.money]\n      } else if (checked.status === 'new') {\n        this.InData['MIN'].value.push([index, nowdata[fields.close], nowdata[fields.close],\n          nowdata[fields.close], nowdata[fields.close], nowdata[fields.vol], nowdata[fields.money]\n        ])\n      }\n    }\n  }\n  // 当有新的NOW进来时，需要对TICK和当日MIN线进行更新，\n  this.flushNowData = function (key, nowdata) {\n    if (nowdata.length < 1) return\n    let fields = FIELD_NOW\n    if (key === 'ENOW') fields = FIELD_ENOW\n    if (checkZero(nowdata, fields)) return\n\n    // 先处理TICK\n    this.flushTick(nowdata, fields)\n\n    // 再处理Min\n    this.flushMin(nowdata, fields)\n  }\n\n  // //////////////////////\n  // 下面是获取数据的方法,先从OutData获取，没有数据就从InData数据中获取\n  // ////////////////////\n  this.getData = function (key, rightMode) {\n    switch (key) {\n      case 'DAY':\n        this.OutData['DAY'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['DAY'].value = this.mergeDay(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 对原始数据不做变更\n        break\n      case 'WEEK':\n        this.OutData['WEEK'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['WEEK'].value = this.mergeWeek(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'MON':\n        this.OutData['MON'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['MON'].value = this.mergeMon(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'DAY5':\n        this.OutData['DAY5'] = {\n          key,\n          fields: FIELD_DAY5\n        }\n        this.OutData['DAY5'].value = this.mergeDay5(this.InData['DAY5'], this.InData['MIN'])\n        // 每次都从日线计算生成\n        break\n      case 'M5':\n      case 'M15':\n      case 'M30':\n      case 'M60':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData[key].value = this.makeMinute(key, this.InData[key], this.InData['MIN'], rightMode)\n        break\n      case 'MIN':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_MIN\n        }\n        this.OutData[key].value = this.updateMinute(this.InData[key])\n        break\n    }\n    // 先找Out中的数据，没有就找In的数据\n    return this.OutData[key] ? this.OutData[key] : this.InData[key]\n  }\n  this.updateMinute = function (source) {\n    let out = copyArrayOfDeep(source.value)\n\n    let allmoney\n    for (let k = 0; k < out.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          allmoney = out[k][FIELD_MIN.vol] * out[k][FIELD_MIN.close] / this.static.coinunit\n        } else {\n          allmoney += (out[k][FIELD_MIN.vol] - out[k - 1][FIELD_MIN.vol]) * out[k][FIELD_MIN.close] / this.static.coinunit\n        }\n        out[k][FIELD_MIN.allmoney] = allmoney\n      } else {\n        // value[k][fields.allmoney] = value[k][fields.money];\n      }\n    }\n    return out\n  }\n  this.mergeDay = function (source, now, rightMode) {\n    let out = copyArrayOfDeep(source.value)\n    if (now !== undefined && !checkZero(now.value, now.fields)) {\n      const checked = findDateInDay(source, getDate(now.value[now.fields.time]))\n      if (checked.finded) {\n        out[checked.index] = [\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ]\n      } else {\n        out.push([\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ])\n      }\n    }\n    if (this.InData['RIGHT'] && rightMode !== 'none') {\n      out = transExrightDay(out, this.static.coinunit, this.InData['RIGHT'].value, rightMode,\n        0, out.length - 1)\n    }\n    // this.config.start,this.config.stop);\n\n    return out\n  }\n  this.mergeWeek = function (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToWeek(out)\n    // 合并周线\n  }\n  this.mergeMon = function (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToMon(out)\n    // 合并月线\n  }\n  this.mergeDay5 = function (source, min) {\n    let out = []\n\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        return out\n      }\n    }\n    if (min === undefined || isEmptyArray(min.value)) {\n      return out\n    }\n    const daymins = getMinuteCount(this.tradeTime) * 4\n    let money\n    for (let k = 0; k < min.value.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          money = min.value[k][min.fields.vol] * min.value[k][min.fields.close] / this.static.coinunit\n        } else {\n          money += (min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol]) * min.value[k][min.fields.close] / this.static.coinunit\n        }\n      } else {\n        money = min.value[k][min.fields.money]\n      }\n      out.push([\n        fromIndexToTradeTime(min.value[k][min.fields.idx], this.tradeTime, this.tradeDate),\n        min.value[k][min.fields.close],\n        k === 0 ? min.value[k][min.fields.vol] : min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol],\n        daymins + min.value[k][min.fields.idx],\n        min.value[k][min.fields.vol],\n        money\n      ])\n    }\n    return out\n  }\n  // source历史分钟线 nowmin当日分钟线\n  this.makeMinute = function (outkey, source, nowmin, rightMode) {\n    let out = []\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      out = transExrightMin(out, this.static.coinunit, this.InData['RIGHT'].value, rightMode,\n        // this.config.start,this.config.stop);\n        0, out.length - 1)\n\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        // 已经是最新的数据了\n        return out\n      }\n    }\n    // 没有原始数据或者未收市，需要把当日的nowmin合并\n    if (nowmin !== undefined && !isEmptyArray(nowmin.value)) {\n      let offset = 5\n      if (outkey === 'M15') offset = 15\n      if (outkey === 'M30') offset = 30\n      if (outkey === 'M60') offset = 60\n      out = this.mergeNowMinToMin(out, nowmin, offset) // 当日的分钟线转成分钟线，索引转时间的问题\n    }\n    // out = matchMinToMinute(out, outkey);\n    return out\n  }\n\n  this.mergeNowMinToMin = function (source, min, offset) {\n    const curMin = []\n    let sumVol = 0\n    let sumMoney = 0\n\n    let hasData = false\n    let stopIdx = 4\n\n    for (let k = 0; k < min.value.length; k++) {\n      const curIndex = min.value[k][min.fields.idx]\n      if (curIndex < 0) continue\n      if (curIndex > stopIdx) {\n        if (hasData) {\n          curMin[min.fields.vol] = min.value[k][min.fields.vol] - sumVol\n          curMin[min.fields.money] = min.value[k][min.fields.money] - sumMoney\n          sumVol = min.value[k][min.fields.vol]\n          sumMoney = min.value[k][min.fields.money]\n\n          curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n          source.push(copyArrayOfDeep(curMin))\n        }\n        stopIdx = (Math.floor(curIndex / offset) + 1) * offset - 1\n        curMin[min.fields.open] = min.value[k][min.fields.open]\n        curMin[min.fields.high] = min.value[k][min.fields.high]\n        curMin[min.fields.low] = min.value[k][min.fields.low]\n        curMin[min.fields.close] = min.value[k][min.fields.close]\n        hasData = true\n      } else { // curIndex 在0-5之间\n        if (hasData) {\n          curMin[min.fields.high] = curMin[min.fields.high] > min.value[k][min.fields.high]\n            ? curMin[min.fields.high] : min.value[k][min.fields.high]\n          curMin[min.fields.low] = curMin[min.fields.low] < min.value[k][min.fields.low] ||\n            min.value[k][min.fields.low] === 0\n            ? curMin[min.fields.low] : min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n        } else {\n          curMin[min.fields.open] = min.value[k][min.fields.open]\n          curMin[min.fields.high] = min.value[k][min.fields.high]\n          curMin[min.fields.low] = min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n          hasData = true\n        }\n      }\n    } // for i\n    if (hasData) {\n      curMin[min.fields.vol] = min.value[min.value.length - 1][min.fields.vol] - sumVol\n      curMin[min.fields.money] = min.value[min.value.length - 1][min.fields.money] - sumMoney\n      curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n      source.push(copyArrayOfDeep(curMin))\n    }\n    return source\n  }\n\n  // /////////////////////////////////////////\n  //  以下为公司系统，自由计算的定义\n  // /////////////////////////////////////////\n  this.makeLineData = function (source, outkey, formula) {\n    const value = this.formula.runSingleStock(source, formula)\n    if (this.OutData[outkey] === undefined) {\n      this.OutData[outkey] = {\n        outkey,\n        fields: FIELD_ILINE,\n        value\n      }\n    } else {\n      this.OutData[outkey].value = value\n      // 返回的值都是真实的值，不用再除单位了，具体显示几个小数点，由坐标的类别来定，\n    }\n    return this.OutData[outkey]\n  }\n} // end.\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawSeer 的实体定义\n// //////////////////////////////////////////////////\n// case 1: return '未生效';\n// case 2: return '股票停牌';\n// case 20: return '股东增持';\n// case 100: return '已生效(1 -> 100)';\n// case 101: return '已成功(100 -> 101)';\n// case 102: return '已失败(100 -> 102)';\n// case 200: return '未成功已结束(100 -> 200)';\n// case 201: return '成功已结束(101 -> 201)';\n// case 202: return '失败已结束(102 -> 202)';\n// case 300: return '未生效已结束(1/2 -> 300)';\n// case 400: return '错误';\n// 预定义参数\n\nimport ClDrawKBar from '../chart/cl.draw.kbar'\nimport ClDrawRight from '../chart/cl.draw.right'\nimport ClDrawSeer from './cl.seer'\n\nexport const CHART_SEER = {\n  zoomInfo: {\n    index: 3,\n    list: [1, 2, 4, 5, 7, 9, 12, 15, 19]\n  },\n  // zoomInfo: {\n  //   min: 1,\n  //   max: 26,\n  //   index: 2, // value = index*index + 1 [1,2,5,10,17,26]\n  //   value: 7 // 实际的值，如果超过10，就会index=3，如果为4，index=1 index = sqrt（value - 1）\n  // },\n  scroll: {\n    display: 'none' // none不显示\n  },\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 0,\n    display: 'both', // none不显示， both 两边各一个值, block ：根据lines每个块显示一个值 = 显示坐标\n    type: 'normal', // 有 day1 当日 day5 5日线 和 normal:日线 三种模式\n    format: 'date' // date time datetime normal tradetime(9:30) 根据交易时间此时 = 输出的信息格式    width: 50       // 显示宽度，web下\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示, both, noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price 保留一定小数位 vol 没有小数\n    },\n    right: {\n      display: 'both', // none不显示，noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // rate, price vol\n    }\n  },\n  lines: [{\n    // type: 'l_kbar',\n    className: ClDrawKBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    }\n    // 第一根线默认的key是跟随chart的hotKey变化而变化的，其他线要么自己有数据，要么根据hotKey加上公式计算出自己的key\n  },\n  {\n    className: ClDrawRight\n  },\n  {\n    className: ClDrawSeer\n  }]\n}\n\nexport const FIELD_SEER_HOT = {\n  uid: 0\n}\n\n// 预测信息定义\nexport const FIELD_SEER = {\n  // code: 0,\n  start: 1, // 开始日期\n  period: 2, // 预期周期\n  buy: 3, // 买入价\n  target: 4, // 目标价\n  stoploss: 5, // 止损价\n  status: 6, // 当前状态\n  // stopdate: 7, // 停止日期 正在进行的为0\n  // highdate: 8,  // 最高价格日期\n  // lowdate: 9,    // 最低价格日期\n  // surplus: 10, // 剩余天数\n  uid: 11, // 预测的id\n  focused: 12 // 是否热点\n}\n","'use strict'\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawSeer 的实体定义\n// //////////////////////////////////////////////////\n// case 1: return '未生效';\n// case 2: return '股票停牌';\n// case 20: return '股东增持';\n// case 100: return '已生效(1 -> 100)';\n// case 101: return '已成功(100 -> 101)';\n// case 102: return '已失败(100 -> 102)';\n// case 200: return '未成功已结束(100 -> 200)';\n// case 201: return '成功已结束(101 -> 201)';\n// case 202: return '失败已结束(102 -> 202)';\n// case 300: return '未生效已结束(1/2 -> 300)';\n// case 400: return '错误';\n\nimport {\n  _drawSignCircle,\n  _setTransColor,\n  _fillRect,\n  _drawSignHLine,\n  _drawSignVLine\n} from '../util/cl.draw'\nimport {\n  findNearTimeToIndex\n} from '../chart/cl.chart.tools'\nimport getValue, {\n  // getZipDay,\n  getExrightPriceRange\n} from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  inArray,\n  inRangeY,\n  intersectArray,\n  // copyArrayOfDeep,\n  formatPrice,\n  copyArrayOfDeep\n} from '../util/cl.tool'\nimport {\n  FIELD_DAY\n} from '../cl.data.def'\nimport {\n  FIELD_SEER\n} from './cl.seer.def'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\nexport default function ClDrawSeer (father, rectMain) {\n  initCommonInfo(this, father)\n  this.rectMain = rectMain\n\n  this.linkInfo = father.father.linkInfo\n\n  this.source = father.father\n\n  this.static = father.father.static\n\n  this.maxmin = father.maxmin\n  this.layout = father.layout\n\n  this.getSeerPos = function (index, nowprice) {\n    const offset = index - this.linkInfo.minIndex\n    if (offset < 0 || index > this.linkInfo.maxIndex) {\n      return {\n        visible: false\n      }\n    }\n    // 不在视线内就不画\n    const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n    let price = nowprice\n    if (nowprice === undefined) {\n      price = getValue(this.data, 'close', index)\n    }\n    const yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    return {\n      visible: true,\n      xx,\n      yy\n    }\n  }\n\n  this.drawHotSeer = function (no) {\n    let idx = findNearTimeToIndex(this.data, getValue(this.sourceSeer, 'start', no), 'time', 'forword')\n    if (idx === -1) idx = this.linkInfo.maxIndex\n    const offset = idx - this.linkInfo.minIndex\n    if (offset < 0) return // 不在视线内就不画\n\n    const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n\n    const status = getValue(this.sourceSeer, 'status', no)\n    const startPrice = getValue(this.sourceSeer, 'buy', no)\n    let price = startPrice\n    let yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n\n    let startTxt = this.linkInfo.hideInfo ? '买点' : '买点:' + formatPrice(price, this.static.decimal)\n    if (startPrice === 0) {\n      startTxt = '停牌中' // 停牌期间预测的股票\n      price = getValue(this.data, 'close', idx)\n      yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    }\n    let color = this.color.vol\n    if (inArray(status, [1, 20, 300])) {\n      color = this.color.txt\n    } else if (inArray(status, [2])) {\n      startTxt = '停牌中'\n    }\n    _drawSignHLine(this.context, {\n      linew: this.scale,\n      xx,\n      yy,\n      right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n      clr: color,\n      bakclr: this.color.back,\n      font: this.layout.title.font,\n      pixel: this.layout.title.pixel,\n      spaceX: 4 * this.scale,\n      spaceY: 3 * this.scale,\n      x: 'start',\n      y: 'middle'\n    }, [{\n      txt: startTxt,\n      set: 100,\n      display: !this.linkInfo.hideInfo\n    }])\n\n    const period = getValue(this.sourceSeer, 'period', no)\n    const surplus = period - (this.linkInfo.maxIndex - idx)\n\n    let txt = ' 周期:[' + period + '天]'\n    if (surplus > 0) txt += ' 剩余:[' + surplus + '天]'\n\n    _drawSignVLine(this.context, {\n      linew: this.scale,\n      xx,\n      yy,\n      left: this.rectMain.left,\n      bottom: this.rectMain.top + this.rectMain.height + this.layout.offset.bottom + 2 * this.scale,\n      clr: color,\n      bakclr: this.color.back,\n      font: this.layout.title.font,\n      pixel: this.layout.title.pixel,\n      spaceX: 2 * this.scale,\n      paceY: 2 * this.scale\n    }, [{\n      txt: 'arc',\n      set: 0,\n      minR: 0,\n      maxR: 3 * this.scale,\n      display: true\n    },\n    {\n      txt: getValue(this.sourceSeer, 'start', no) + txt,\n      set: 100,\n      display: true\n    }\n    ])\n    this.drawTransRect(this.rectMain.left, xx)\n    const xxRight = xx + period * (this.linkInfo.spaceX + this.linkInfo.unitX)\n    this.drawTransRect(xxRight, this.rectMain.left + this.rectMain.width)\n    if (startPrice === 0) return\n    // ///////////////////////////////\n    let infos\n    price = getValue(this.sourceSeer, 'stoploss', no)\n    let yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    if (yl - yy > 1.5 * this.layout.title.pixel) {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: this.linkInfo.hideInfo ? '止损' : '止损:' + formatPrice(price, this.static.decimal),\n        set: 100,\n        display: !this.linkInfo.hideInfo\n      }\n      ]\n    } else {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: 'arc',\n        set: 100,\n        minR: 0,\n        maxR: 1 * this.scale,\n        display: true\n      }\n      ]\n    }\n    if (inRangeY(this.rectMain, yy)) {\n      _drawSignHLine(this.context, {\n        linew: this.scale,\n        xx,\n        yy: yl,\n        right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n        clr: this.color.green,\n        bakclr: this.color.back,\n        font: this.layout.title.font,\n        pixel: this.layout.title.pixel,\n        spaceX: 4 * this.scale,\n        spaceY: 3 * this.scale,\n        x: 'start',\n        y: 'middle'\n      }, infos)\n    }\n\n    price = getValue(this.sourceSeer, 'target', no)\n    yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    if (yy - yl > 1.5 * this.layout.title.pixel) {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: this.linkInfo.hideInfo ? '目标' : '目标:' + formatPrice(price, this.static.decimal),\n        set: 100,\n        display: !this.linkInfo.hideInfo\n      }\n      ]\n    } else {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: 'arc',\n        set: 100,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      }\n      ]\n    }\n    if (inRangeY(this.rectMain, yy)) {\n      _drawSignHLine(this.context, {\n        linew: this.scale,\n        xx,\n        yy: yl,\n        right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n        clr: this.color.red,\n        bakclr: this.color.back,\n        font: this.layout.title.font,\n        pixel: this.layout.title.pixel,\n        spaceX: 4 * this.scale,\n        spaceY: 3 * this.scale,\n        x: 'start',\n        y: 'middle'\n      }, infos)\n    }\n    // ///////////显示预测结束的信息///////////////////\n    const stop = getValue(this.sourceSeer, 'stop', no)\n    // 100 进行中\n    if (inArray(status, [101, 102, 200, 201, 202, 300])) {\n      const stopIdx = findNearTimeToIndex(this.data, stop, 'time', 'forword')\n      const stopOffset = stopIdx - this.linkInfo.minIndex\n      const stopX = this.rectMain.left + stopOffset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n      if (stopX > this.rectMain.left && stopX < this.rectMain.left + this.rectMain.width - 4 * this.scale) {\n        color = this.color.vol\n        price = getValue(this.sourceSeer, 'buy', no)\n        yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        if (inArray(status, [102, 202])) {\n          color = this.color.green\n          price = getValue(this.sourceSeer, 'stoploss', no)\n          yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        } else if (inArray(status, [101, 201])) {\n          color = this.color.red\n          price = getValue(this.sourceSeer, 'target', no)\n          yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        } else if (inArray(status, [300])) {\n          color = this.color.txt\n        }\n        _drawSignCircle(this.context, stopX, yl, {\n          r: 3 * this.scale,\n          clr: color\n        }\n          // { r: 2 * this.scale, clr: this.color.back },\n        )\n      }\n    }\n  }\n\n  this.filterSeer = function () {\n    const out = {}\n    for (let i = 0; i < this.sourceSeer.value.length; i++) {\n      const curDate = getValue(this.sourceSeer, 'start', i)\n      let index = findNearTimeToIndex(this.data, curDate, 'time', 'forword')\n      if (index === -1) index = this.linkInfo.maxIndex\n      if (out[index] === undefined) {\n        out[index] = {\n          nos: [],\n          uids: []\n        }\n      }\n      out[index].name = 'SEER' + index\n      out[index].date = getValue(this.data, 'time', index)\n      out[index].nos.push(i)\n      out[index].uids.push(getValue(this.sourceSeer, 'uid', i))\n      // 这里判断当前节点是否存在热点\n      if (inArray(getValue(this.sourceSeer, 'uid', i), this.hotSeer.value)) {\n        out[index].focused = true\n        out[index].hotIdx = i\n      }\n    }\n    return out\n  }\n  this.beforeLocation = function () {\n    this.linkInfo.rightMode = 'forword'\n    this.data = this.source.getData(this.father.hotKey)\n    const lastDate = this.data.value[this.data.value.length - 1][this.data.fields.time]\n\n    this.sourceSeer = this.source.getData('SEER')\n    this.hotSeer = this.source.getData('SEERHOT')\n\n    if (this.sourceSeer.value.length < 1) return 0\n    if (this.hotSeer === undefined) {\n      this.hotSeer = {\n        value: [getValue(this.sourceSeer, 'uid', 0)]\n      }\n    }\n    if (this.sourceSeer.value.length < 1) return 0\n    // 求最大最小日期\n    const maxmin = {\n      max: getValue(this.sourceSeer, 'start', 0),\n      min: getValue(this.sourceSeer, 'start', this.sourceSeer.value.length - 1)\n    }\n    // 除权处理\n    const rights = this.source.getData('RIGHT')\n    if (rights !== undefined) {\n      const lastval = copyArrayOfDeep(this.sourceSeer.value)\n      for (let i = 0; i < lastval.length; i++) {\n        lastval[i][FIELD_SEER.buy] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.buy], 1, rights.value)\n        lastval[i][FIELD_SEER.target] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.target], 1, rights.value)\n        lastval[i][FIELD_SEER.stoploss] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.stoploss], 1, rights.value)\n      }\n      // 这里必须重新指向，否则会重复除权\n      this.sourceSeer = {\n        key: 'SEER',\n        fields: FIELD_SEER,\n        value: lastval\n      }\n    }\n    // 整理标记点\n    this.showSeer = this.filterSeer() // name,date,[该按钮对应的id列表],chart按钮\n    // 创建标记点\n    for (const k in this.showSeer) {\n      this.showSeer[k].chart = this.father.createButton(this.showSeer[k].name)\n      maxmin.max = maxmin.max < this.showSeer[k].date ? this.showSeer[k].date : maxmin.max\n      maxmin.min = maxmin.min > this.showSeer[k].date ? this.showSeer[k].date : maxmin.min\n    }\n    // ???\n    // 下面开始压缩数据\n    // let out = copyArrayOfDeep(this.data.value)\n\n    this.hotKey = 'SEERDAY'\n    this.data = {key: 'SEERDAY', fields: FIELD_DAY, value: this.data.value}\n\n    this.linkInfo.showMode = 'fixed'\n    // this.linkInfo.fixed.left = 20\n    // this.linkInfo.fixed.right = 20\n    this.linkInfo.fixed.min = maxmin.min\n    this.linkInfo.fixed.max = maxmin.max\n  }\n  this.drawTransRect = function (left, right) {\n    if (right < left) return\n    const clr = _setTransColor(this.color.grid, 0.5)\n    _fillRect(this.context, left, this.rectMain.top, right - left, this.rectMain.height, clr)\n  }\n  this.onPaint = function (key) {\n    // if (key !== undefined) this.hotKey = key\n    // this.data = this.source.getData(this.hotKey)\n    // 设置可见\n    for (const k in this.showSeer) {\n      let showPrice\n      if (this.showSeer[k].uids.length < 1) continue\n      // 如果只有一条记录就以买入价为定位，否则以收盘价为定位\n      if (this.showSeer[k].uids.length === 1) {\n        showPrice = getValue(this.sourceSeer, 'buy', this.showSeer[k].nos[0])\n      }\n      if (this.showSeer[k].focused === true) {\n        this.father.setHotButton(this.showSeer[k].chart)\n        if (this.hotSeer.value.length === 1) {\n          showPrice = getValue(this.sourceSeer, 'buy', this.showSeer[k].hotIdx)\n        }\n      }\n      const seerPos = this.getSeerPos(k, showPrice)\n\n      let num = '*'\n      if (this.showSeer[k].uids.length < 10) {\n        num = this.showSeer[k].uids.length.toString()\n      }\n      const acrR = this.layout.symbol.size / 2\n\n      this.showSeer[k].chart.init({\n        rectMain: {\n          left: seerPos.xx - acrR,\n          top: this.showSeer[k].focused ? seerPos.yy - acrR - 2 * acrR : seerPos.yy - acrR,\n          width: 2 * acrR,\n          height: this.showSeer[k].focused ? 2 * acrR + 2 * acrR : 2 * acrR\n        },\n        config: {\n          translucent: true,\n          visible: seerPos.visible,\n          status: this.showSeer[k].focused ? 'focused' : 'enabled',\n          shape: 'set'\n        },\n        info: [{\n          map: num\n        }]\n      },\n      result => {\n        // const self = result.self.father\n        const hotInfo = intersectArray(this.showSeer[k].uids, this.hotSeer.value)\n        if (hotInfo.length > 0) {\n          this.hotSeer.value = []\n          this.father.callback({\n            event: 'seerclick',\n            data: []\n          })\n          this.source.onPaint()\n        } else {\n          this.hotSeer.value = this.showSeer[k].uids\n          this.father.callback({\n            event: 'seerclick',\n            data: this.showSeer[k].uids\n          })\n          this.source.onPaint()\n        }\n      })\n    }\n    if (this.hotSeer.value.length === 1) {\n      for (let k = 0; k < this.sourceSeer.value.length; k++) {\n        if (getValue(this.sourceSeer, 'uid', k) === this.hotSeer.value[0]) {\n          this.drawHotSeer(k)\n        }\n      }\n    }\n  }\n}\n","'use strict'\n\nimport { CHART_SEER, FIELD_SEER } from './cl.seer.def'\nexport default {\n  CHART_SEER,\n  FIELD_SEER\n}\n","'use strict'\n\nimport ClChart from './chart/cl.chart'\nimport ClEvent from './event/cl.event'\nimport ClData from './data/cl.data'\n\nimport * as ClChartDef from './cl.chart.def'\nimport * as ClDataDef from './cl.data.def'\nimport ClPlugins from './plugins/cl.register'\n\nimport {\n  initSystem\n} from './chart/cl.chart.init'\n\nexport const DEF_CHART = ClChartDef\nexport const DEF_DATA = ClDataDef\nexport const PLUGINS = ClPlugins\n\n// ///////////////////////////\n//  以下区域用于加载plugins中的定义\n// ///////////////////////////\n\n// ///////////////////////////\n//  下面是一个接口API函数\n// ///////////////////////////\n// 针对单一的Chart（一个股票对应一组数据图表）\n// 多个股票对应多图需要各自设定对应关系\n// cfg 为以下区域\n//   runPlatform: 'normal', // 支持其他平台，其他平台（如微信）可能需要做函数替代和转换\n//   axisPlatform: 'phone', // 'web' 对坐标显示的区别\n//   eventPlatform: 'html5', // 'react'所有事件\n//   scale: 1, // 屏幕的放大倍数，该常量会经常性使用，并且是必须的\n//   standard: 'china',  // 画图标准，美国’usa‘，需要调整颜色\n//   sysColor: 'black'  // 色系，分白色和黑色系\n// ///////////////////////////////////\n//   context:  // 画布\n//   canvas:   // 用于接受事件处理的\n// ///////////////////////////////////\nexport function createSingleChart (cfg) {\n  const sysInfo = initSystem(cfg)\n  const chart = new ClChart(sysInfo)\n  const event = new ClEvent(sysInfo)\n  const data = new ClData()\n\n  chart.initChart(data, event)\n  return chart\n}\n\n// ///////////////////////////////////\n//   多股票同列的处理\n//   context:  // 画布\n//   canvas:   // 用于接受事件处理的\n//   charts: [name1:{},name2:{},name2:{}...]\n// 返回一组chart，每组chart按名字存在一个json数据结构里，方便使用\n// ///////////////////////////////////\nexport function createMulChart (cfg) {\n  const sysInfo = initSystem(cfg)\n  const event = new ClEvent(sysInfo)\n  const chartList = {}\n  for (const key in cfg.charts) {\n    const chart = new ClChart(sysInfo)\n    const data = new ClData()\n    chart.initChart(data, event)\n    chartList[key] = chart\n  }\n  return chartList\n}\n"],"sourceRoot":""}